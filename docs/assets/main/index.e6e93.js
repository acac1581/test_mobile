System.register("chunks:///_virtual/AccountManager.ts", ['cc', './index.mjs'], function (exports) {
  var cclegacy, _decorator, Component, game, lib_default;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      game = module.game;
    }, function (module) {
      lib_default = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "0ca1bTS7I1B7JWMQxBaiXyA", "AccountManager", undefined);
      const {
        ccclass,
        property
      } = _decorator;
      let AccountManager = exports('AccountManager', (_dec = ccclass('AccountManager'), _dec(_class = (_class2 = class AccountManager extends Component {
        constructor() {
          super(...arguments);
          this.botID = "7510075369";
        }
        onLoad() {
          if (AccountManager.Instance == null) {
            AccountManager.Instance = this;
            game.addPersistRootNode(this.node);
          } else {
            this.destroy();
          }
        }
        start() {
          try {
            console.log("window.Telegram.WebApp.expand()");
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
          } catch (e) {
            console.log(e);
          }
        }
        async LoginTele() {
          try {
            console.warn("WebApp", window.Telegram.WebApp.initDataUnsafe);
          } catch (error) {
            console.warn(0, error);
            try {
              const result = await lib_default(this.botID, {
                windowFeatures: {
                  popup: true
                }
              });
              console.warn(result);
            } catch (error1) {
              console.warn(1, error1);
            }
          }
        }
      }, _class2.Instance = void 0, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ButtonAnim.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SoundController.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, CCFloat, CCBoolean, _decorator, Component, Button, Toggle, Vec3, Node, color, tween, SoundController, EnumSound;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      CCFloat = module.CCFloat;
      CCBoolean = module.CCBoolean;
      _decorator = module._decorator;
      Component = module.Component;
      Button = module.Button;
      Toggle = module.Toggle;
      Vec3 = module.Vec3;
      Node = module.Node;
      color = module.color;
      tween = module.tween;
    }, function (module) {
      SoundController = module.SoundController;
      EnumSound = module.EnumSound;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "7105bq4HCxIUaVlEcIPifoH", "ButtonAnim", undefined);
      const {
        ccclass,
        property
      } = _decorator;

      /**
       * Predefined variables
       * Name = ButtonAnim
       * DateTime = Sat Dec 25 2021 10:22:24 GMT+0700 (Indochina Time)
       * Author = acac1581
       * FileBasename = ButtonAnim.ts
       * FileBasenameNoExtension = ButtonAnim
       * URL = db://assets/Script/utility/ButtonAnim.ts
       * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/
       *
       */

      let ButtonAnim = exports('ButtonAnim', (_dec = ccclass('ButtonAnim'), _dec2 = property(CCFloat), _dec3 = property(CCFloat), _dec4 = property(CCBoolean), _dec(_class = (_class2 = class ButtonAnim extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "scaleAdd", _descriptor, this);
          _initializerDefineProperty(this, "timeScale", _descriptor2, this);
          _initializerDefineProperty(this, "isColorTransition", _descriptor3, this);
          this.targetNode = void 0;
          this.btnClick = void 0;
          this.originScale = void 0;
          this.targetScale = void 0;
          this.isClicked = void 0;
          this.scaleTween = void 0;
        }
        onLoad() {
          this.btnClick = this.node.getComponent(Button);
          if (this.btnClick == null) this.btnClick = this.node.getComponent(Toggle);
          this.targetNode = this.btnClick.target;
          this.originScale = new Vec3(this.targetNode.getScale());
          let vec1 = new Vec3(this.scaleAdd, this.scaleAdd, this.scaleAdd);
          this.targetScale = new Vec3(this.originScale);
          this.targetScale.subtract(vec1);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.Release, this);
          this.node.on(Node.EventType.TOUCH_START, this.Down, this);
          this.node.on(Node.EventType.TOUCH_END, this.Release, this);
          if (this.isColorTransition) {
            this.btnClick.transition = Button.Transition.COLOR;
            this.btnClick.normalColor = color("#FFFFFF");
            this.btnClick.pressedColor = color("#C8C8C8");
            this.btnClick.hoverColor = color("#E3E3E3");
          }
        }
        onDisable() {
          if (this.timeScale <= 0) return;
          if (this.scaleTween != null) this.scaleTween.stop();
          if (this.targetNode) this.targetNode.setScale(this.originScale);
        }
        Down() {
          if (this.btnClick.interactable != false) {
            this.isClicked = true;
            if (SoundController.Instance != null) SoundController.Instance.PlaySound(EnumSound.GameUI_button_click);
            if (this.timeScale <= 0) return;
            if (this.scaleTween != null) this.scaleTween.stop();
            this.scaleTween = tween(this.targetNode).to(this.timeScale, {
              scale: this.targetScale
            }, {
              easing: "elasticOut"
            });
            this.scaleTween.start();
          }
        }
        Release() {
          if (this.isClicked) {
            this.isClicked = false;
            if (this.timeScale <= 0) return;
            if (this.scaleTween != null) this.scaleTween.stop();
            this.scaleTween = tween(this.targetNode).to(this.timeScale, {
              scale: this.originScale
            }, {
              easing: "elasticOut"
            });
            this.scaleTween.start();
          }
        }
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scaleAdd", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0.08;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "timeScale", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 1.4;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isColorTransition", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return true;
        }
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.3/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.3/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.3/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/colyseus.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);
      let _cjsExports;
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        // THIS VERSION USES "XMLHttpRequest" INSTEAD OF "fetch" FOR COMPATIBILITY WITH COCOS CREATOR
        // colyseus.js@0.15.17 (@colyseus/schema 2.0.9)
        (function (global, factory) {
          typeof exports$1 === 'object' && typeof module !== 'undefined' ? factory(exports$1) : typeof define === 'function' && define.amd ? define('colyseus.js', ['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Colyseus = {}));
        })(this, function (exports) {
          function _mergeNamespaces(n, m) {
            m.forEach(function (e) {
              e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
                if (k !== 'default' && !(k in n)) {
                  var d = Object.getOwnPropertyDescriptor(e, k);
                  Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                      return e[k];
                    }
                  });
                }
              });
            });
            return Object.freeze(n);
          }

          //
          // Polyfills for legacy environments
          //
          /*
           * Support Android 4.4.x
           */
          if (!ArrayBuffer.isView) {
            ArrayBuffer.isView = function (a) {
              return a !== null && typeof a === 'object' && a.buffer instanceof ArrayBuffer;
            };
          }
          // Define globalThis if not available.
          // https://github.com/colyseus/colyseus.js/issues/86
          if (typeof globalThis === "undefined" && typeof window !== "undefined") {
            // @ts-ignore
            window['globalThis'] = window;
          }

          /******************************************************************************
          Copyright (c) Microsoft Corporation.
            Permission to use, copy, modify, and/or distribute this software for any
          purpose with or without fee is hereby granted.
            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
          REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
          AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
          INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
          LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
          OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
          PERFORMANCE OF THIS SOFTWARE.
          ***************************************************************************** */
          /* global Reflect, Promise */

          var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            };
            return extendStatics(d, b);
          };
          function __extends(d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          }
          var __assign = function () {
            __assign = Object.assign || function __assign(t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          function __awaiter(thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }
              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          }
          function __generator(thisArg, body) {
            var _ = {
                label: 0,
                sent: function () {
                  if (t[0] & 1) throw t[1];
                  return t[1];
                },
                trys: [],
                ops: []
              },
              f,
              y,
              t,
              g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;
            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }
            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");
              while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          }
          function __classPrivateFieldGet(receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          }
          function __classPrivateFieldSet(receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          }
          var CloseCode;
          (function (CloseCode) {
            CloseCode[CloseCode["CONSENTED"] = 4000] = "CONSENTED";
            CloseCode[CloseCode["DEVMODE_RESTART"] = 4010] = "DEVMODE_RESTART";
          })(CloseCode || (CloseCode = {}));
          var ServerError = /** @class */function (_super) {
            __extends(ServerError, _super);
            function ServerError(code, message) {
              var _this = _super.call(this, message) || this;
              _this.name = "ServerError";
              _this.code = code;
              return _this;
            }
            return ServerError;
          }(Error);

          /**
           * Copyright (c) 2014 Ion Drive Software Ltd.
           * https://github.com/darrachequesne/notepack/
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in all
           * copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
           * SOFTWARE.
           */
          /**
           * Patch for Colyseus:
           * -------------------
           * notepack.io@3.0.1
           *
           * added `offset` on Decoder constructor, for messages arriving with a code
           * before actual msgpack data
           */
          //
          // DECODER
          //
          function Decoder(buffer, offset) {
            this._offset = offset;
            if (buffer instanceof ArrayBuffer) {
              this._buffer = buffer;
              this._view = new DataView(this._buffer);
            } else if (ArrayBuffer.isView(buffer)) {
              this._buffer = buffer.buffer;
              this._view = new DataView(this._buffer, buffer.byteOffset, buffer.byteLength);
            } else {
              throw new Error('Invalid argument');
            }
          }
          function utf8Read$1(view, offset, length) {
            var string = '',
              chr = 0;
            for (var i = offset, end = offset + length; i < end; i++) {
              var byte = view.getUint8(i);
              if ((byte & 0x80) === 0x00) {
                string += String.fromCharCode(byte);
                continue;
              }
              if ((byte & 0xe0) === 0xc0) {
                string += String.fromCharCode((byte & 0x1f) << 6 | view.getUint8(++i) & 0x3f);
                continue;
              }
              if ((byte & 0xf0) === 0xe0) {
                string += String.fromCharCode((byte & 0x0f) << 12 | (view.getUint8(++i) & 0x3f) << 6 | (view.getUint8(++i) & 0x3f) << 0);
                continue;
              }
              if ((byte & 0xf8) === 0xf0) {
                chr = (byte & 0x07) << 18 | (view.getUint8(++i) & 0x3f) << 12 | (view.getUint8(++i) & 0x3f) << 6 | (view.getUint8(++i) & 0x3f) << 0;
                if (chr >= 0x010000) {
                  // surrogate pair
                  chr -= 0x010000;
                  string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);
                } else {
                  string += String.fromCharCode(chr);
                }
                continue;
              }
              throw new Error('Invalid byte ' + byte.toString(16));
            }
            return string;
          }
          Decoder.prototype._array = function (length) {
            var value = new Array(length);
            for (var i = 0; i < length; i++) {
              value[i] = this._parse();
            }
            return value;
          };
          Decoder.prototype._map = function (length) {
            var key = '',
              value = {};
            for (var i = 0; i < length; i++) {
              key = this._parse();
              value[key] = this._parse();
            }
            return value;
          };
          Decoder.prototype._str = function (length) {
            var value = utf8Read$1(this._view, this._offset, length);
            this._offset += length;
            return value;
          };
          Decoder.prototype._bin = function (length) {
            var value = this._buffer.slice(this._offset, this._offset + length);
            this._offset += length;
            return value;
          };
          Decoder.prototype._parse = function () {
            var prefix = this._view.getUint8(this._offset++);
            var value,
              length = 0,
              type = 0,
              hi = 0,
              lo = 0;
            if (prefix < 0xc0) {
              // positive fixint
              if (prefix < 0x80) {
                return prefix;
              }
              // fixmap
              if (prefix < 0x90) {
                return this._map(prefix & 0x0f);
              }
              // fixarray
              if (prefix < 0xa0) {
                return this._array(prefix & 0x0f);
              }
              // fixstr
              return this._str(prefix & 0x1f);
            }
            // negative fixint
            if (prefix > 0xdf) {
              return (0xff - prefix + 1) * -1;
            }
            switch (prefix) {
              // nil
              case 0xc0:
                return null;
              // false
              case 0xc2:
                return false;
              // true
              case 0xc3:
                return true;
              // bin
              case 0xc4:
                length = this._view.getUint8(this._offset);
                this._offset += 1;
                return this._bin(length);
              case 0xc5:
                length = this._view.getUint16(this._offset);
                this._offset += 2;
                return this._bin(length);
              case 0xc6:
                length = this._view.getUint32(this._offset);
                this._offset += 4;
                return this._bin(length);
              // ext
              case 0xc7:
                length = this._view.getUint8(this._offset);
                type = this._view.getInt8(this._offset + 1);
                this._offset += 2;
                if (type === -1) {
                  // timestamp 96
                  var ns = this._view.getUint32(this._offset);
                  hi = this._view.getInt32(this._offset + 4);
                  lo = this._view.getUint32(this._offset + 8);
                  this._offset += 12;
                  return new Date((hi * 0x100000000 + lo) * 1e3 + ns / 1e6);
                }
                return [type, this._bin(length)];
              case 0xc8:
                length = this._view.getUint16(this._offset);
                type = this._view.getInt8(this._offset + 2);
                this._offset += 3;
                return [type, this._bin(length)];
              case 0xc9:
                length = this._view.getUint32(this._offset);
                type = this._view.getInt8(this._offset + 4);
                this._offset += 5;
                return [type, this._bin(length)];
              // float
              case 0xca:
                value = this._view.getFloat32(this._offset);
                this._offset += 4;
                return value;
              case 0xcb:
                value = this._view.getFloat64(this._offset);
                this._offset += 8;
                return value;
              // uint
              case 0xcc:
                value = this._view.getUint8(this._offset);
                this._offset += 1;
                return value;
              case 0xcd:
                value = this._view.getUint16(this._offset);
                this._offset += 2;
                return value;
              case 0xce:
                value = this._view.getUint32(this._offset);
                this._offset += 4;
                return value;
              case 0xcf:
                hi = this._view.getUint32(this._offset) * Math.pow(2, 32);
                lo = this._view.getUint32(this._offset + 4);
                this._offset += 8;
                return hi + lo;
              // int
              case 0xd0:
                value = this._view.getInt8(this._offset);
                this._offset += 1;
                return value;
              case 0xd1:
                value = this._view.getInt16(this._offset);
                this._offset += 2;
                return value;
              case 0xd2:
                value = this._view.getInt32(this._offset);
                this._offset += 4;
                return value;
              case 0xd3:
                hi = this._view.getInt32(this._offset) * Math.pow(2, 32);
                lo = this._view.getUint32(this._offset + 4);
                this._offset += 8;
                return hi + lo;
              // fixext
              case 0xd4:
                type = this._view.getInt8(this._offset);
                this._offset += 1;
                if (type === 0x00) {
                  // custom encoding for 'undefined' (kept for backward-compatibility)
                  this._offset += 1;
                  return void 0;
                }
                return [type, this._bin(1)];
              case 0xd5:
                type = this._view.getInt8(this._offset);
                this._offset += 1;
                return [type, this._bin(2)];
              case 0xd6:
                type = this._view.getInt8(this._offset);
                this._offset += 1;
                if (type === -1) {
                  // timestamp 32
                  value = this._view.getUint32(this._offset);
                  this._offset += 4;
                  return new Date(value * 1e3);
                }
                return [type, this._bin(4)];
              case 0xd7:
                type = this._view.getInt8(this._offset);
                this._offset += 1;
                if (type === 0x00) {
                  // custom date encoding (kept for backward-compatibility)
                  hi = this._view.getInt32(this._offset) * Math.pow(2, 32);
                  lo = this._view.getUint32(this._offset + 4);
                  this._offset += 8;
                  return new Date(hi + lo);
                }
                if (type === -1) {
                  // timestamp 64
                  hi = this._view.getUint32(this._offset);
                  lo = this._view.getUint32(this._offset + 4);
                  this._offset += 8;
                  var s = (hi & 0x3) * 0x100000000 + lo;
                  return new Date(s * 1e3 + (hi >>> 2) / 1e6);
                }
                return [type, this._bin(8)];
              case 0xd8:
                type = this._view.getInt8(this._offset);
                this._offset += 1;
                return [type, this._bin(16)];
              // str
              case 0xd9:
                length = this._view.getUint8(this._offset);
                this._offset += 1;
                return this._str(length);
              case 0xda:
                length = this._view.getUint16(this._offset);
                this._offset += 2;
                return this._str(length);
              case 0xdb:
                length = this._view.getUint32(this._offset);
                this._offset += 4;
                return this._str(length);
              // array
              case 0xdc:
                length = this._view.getUint16(this._offset);
                this._offset += 2;
                return this._array(length);
              case 0xdd:
                length = this._view.getUint32(this._offset);
                this._offset += 4;
                return this._array(length);
              // map
              case 0xde:
                length = this._view.getUint16(this._offset);
                this._offset += 2;
                return this._map(length);
              case 0xdf:
                length = this._view.getUint32(this._offset);
                this._offset += 4;
                return this._map(length);
            }
            throw new Error('Could not parse');
          };
          function decode(buffer, offset) {
            if (offset === void 0) {
              offset = 0;
            }
            var decoder = new Decoder(buffer, offset);
            var value = decoder._parse();
            if (decoder._offset !== buffer.byteLength) {
              throw new Error(buffer.byteLength - decoder._offset + ' trailing bytes');
            }
            return value;
          }
          //
          // ENCODER
          //
          var TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int
          var TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int
          function utf8Write(view, offset, str) {
            var c = 0;
            for (var i = 0, l = str.length; i < l; i++) {
              c = str.charCodeAt(i);
              if (c < 0x80) {
                view.setUint8(offset++, c);
              } else if (c < 0x800) {
                view.setUint8(offset++, 0xc0 | c >> 6);
                view.setUint8(offset++, 0x80 | c & 0x3f);
              } else if (c < 0xd800 || c >= 0xe000) {
                view.setUint8(offset++, 0xe0 | c >> 12);
                view.setUint8(offset++, 0x80 | c >> 6 & 0x3f);
                view.setUint8(offset++, 0x80 | c & 0x3f);
              } else {
                i++;
                c = 0x10000 + ((c & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);
                view.setUint8(offset++, 0xf0 | c >> 18);
                view.setUint8(offset++, 0x80 | c >> 12 & 0x3f);
                view.setUint8(offset++, 0x80 | c >> 6 & 0x3f);
                view.setUint8(offset++, 0x80 | c & 0x3f);
              }
            }
          }
          function utf8Length$1(str) {
            var c = 0,
              length = 0;
            for (var i = 0, l = str.length; i < l; i++) {
              c = str.charCodeAt(i);
              if (c < 0x80) {
                length += 1;
              } else if (c < 0x800) {
                length += 2;
              } else if (c < 0xd800 || c >= 0xe000) {
                length += 3;
              } else {
                i++;
                length += 4;
              }
            }
            return length;
          }
          function _encode(bytes, defers, value) {
            var type = typeof value,
              i = 0,
              l = 0,
              hi = 0,
              lo = 0,
              length = 0,
              size = 0;
            if (type === 'string') {
              length = utf8Length$1(value);
              // fixstr
              if (length < 0x20) {
                bytes.push(length | 0xa0);
                size = 1;
              }
              // str 8
              else if (length < 0x100) {
                bytes.push(0xd9, length);
                size = 2;
              }
              // str 16
              else if (length < 0x10000) {
                bytes.push(0xda, length >> 8, length);
                size = 3;
              }
              // str 32
              else if (length < 0x100000000) {
                bytes.push(0xdb, length >> 24, length >> 16, length >> 8, length);
                size = 5;
              } else {
                throw new Error('String too long');
              }
              defers.push({
                _str: value,
                _length: length,
                _offset: bytes.length
              });
              return size + length;
            }
            if (type === 'number') {
              // TODO: encode to float 32?
              // float 64
              if (Math.floor(value) !== value || !isFinite(value)) {
                bytes.push(0xcb);
                defers.push({
                  _float: value,
                  _length: 8,
                  _offset: bytes.length
                });
                return 9;
              }
              if (value >= 0) {
                // positive fixnum
                if (value < 0x80) {
                  bytes.push(value);
                  return 1;
                }
                // uint 8
                if (value < 0x100) {
                  bytes.push(0xcc, value);
                  return 2;
                }
                // uint 16
                if (value < 0x10000) {
                  bytes.push(0xcd, value >> 8, value);
                  return 3;
                }
                // uint 32
                if (value < 0x100000000) {
                  bytes.push(0xce, value >> 24, value >> 16, value >> 8, value);
                  return 5;
                }
                // uint 64
                hi = value / Math.pow(2, 32) >> 0;
                lo = value >>> 0;
                bytes.push(0xcf, hi >> 24, hi >> 16, hi >> 8, hi, lo >> 24, lo >> 16, lo >> 8, lo);
                return 9;
              } else {
                // negative fixnum
                if (value >= -0x20) {
                  bytes.push(value);
                  return 1;
                }
                // int 8
                if (value >= -0x80) {
                  bytes.push(0xd0, value);
                  return 2;
                }
                // int 16
                if (value >= -0x8000) {
                  bytes.push(0xd1, value >> 8, value);
                  return 3;
                }
                // int 32
                if (value >= -0x80000000) {
                  bytes.push(0xd2, value >> 24, value >> 16, value >> 8, value);
                  return 5;
                }
                // int 64
                hi = Math.floor(value / Math.pow(2, 32));
                lo = value >>> 0;
                bytes.push(0xd3, hi >> 24, hi >> 16, hi >> 8, hi, lo >> 24, lo >> 16, lo >> 8, lo);
                return 9;
              }
            }
            if (type === 'object') {
              // nil
              if (value === null) {
                bytes.push(0xc0);
                return 1;
              }
              if (Array.isArray(value)) {
                length = value.length;
                // fixarray
                if (length < 0x10) {
                  bytes.push(length | 0x90);
                  size = 1;
                }
                // array 16
                else if (length < 0x10000) {
                  bytes.push(0xdc, length >> 8, length);
                  size = 3;
                }
                // array 32
                else if (length < 0x100000000) {
                  bytes.push(0xdd, length >> 24, length >> 16, length >> 8, length);
                  size = 5;
                } else {
                  throw new Error('Array too large');
                }
                for (i = 0; i < length; i++) {
                  size += _encode(bytes, defers, value[i]);
                }
                return size;
              }
              if (value instanceof Date) {
                var ms = value.getTime();
                var s = Math.floor(ms / 1e3);
                var ns = (ms - s * 1e3) * 1e6;
                if (s >= 0 && ns >= 0 && s <= TIMESTAMP64_MAX_SEC) {
                  if (ns === 0 && s <= TIMESTAMP32_MAX_SEC) {
                    // timestamp 32
                    bytes.push(0xd6, 0xff, s >> 24, s >> 16, s >> 8, s);
                    return 6;
                  } else {
                    // timestamp 64
                    hi = s / 0x100000000;
                    lo = s & 0xffffffff;
                    bytes.push(0xd7, 0xff, ns >> 22, ns >> 14, ns >> 6, hi, lo >> 24, lo >> 16, lo >> 8, lo);
                    return 10;
                  }
                } else {
                  // timestamp 96
                  hi = Math.floor(s / 0x100000000);
                  lo = s >>> 0;
                  bytes.push(0xc7, 0x0c, 0xff, ns >> 24, ns >> 16, ns >> 8, ns, hi >> 24, hi >> 16, hi >> 8, hi, lo >> 24, lo >> 16, lo >> 8, lo);
                  return 15;
                }
              }
              if (value instanceof ArrayBuffer) {
                length = value.byteLength;
                // bin 8
                if (length < 0x100) {
                  bytes.push(0xc4, length);
                  size = 2;
                } else
                  // bin 16
                  if (length < 0x10000) {
                    bytes.push(0xc5, length >> 8, length);
                    size = 3;
                  } else
                    // bin 32
                    if (length < 0x100000000) {
                      bytes.push(0xc6, length >> 24, length >> 16, length >> 8, length);
                      size = 5;
                    } else {
                      throw new Error('Buffer too large');
                    }
                defers.push({
                  _bin: value,
                  _length: length,
                  _offset: bytes.length
                });
                return size + length;
              }
              if (typeof value.toJSON === 'function') {
                return _encode(bytes, defers, value.toJSON());
              }
              var keys = [],
                key = '';
              var allKeys = Object.keys(value);
              for (i = 0, l = allKeys.length; i < l; i++) {
                key = allKeys[i];
                if (value[key] !== undefined && typeof value[key] !== 'function') {
                  keys.push(key);
                }
              }
              length = keys.length;
              // fixmap
              if (length < 0x10) {
                bytes.push(length | 0x80);
                size = 1;
              }
              // map 16
              else if (length < 0x10000) {
                bytes.push(0xde, length >> 8, length);
                size = 3;
              }
              // map 32
              else if (length < 0x100000000) {
                bytes.push(0xdf, length >> 24, length >> 16, length >> 8, length);
                size = 5;
              } else {
                throw new Error('Object too large');
              }
              for (i = 0; i < length; i++) {
                key = keys[i];
                size += _encode(bytes, defers, key);
                size += _encode(bytes, defers, value[key]);
              }
              return size;
            }
            // false/true
            if (type === 'boolean') {
              bytes.push(value ? 0xc3 : 0xc2);
              return 1;
            }
            if (type === 'undefined') {
              bytes.push(0xc0);
              return 1;
            }
            // custom types like BigInt (typeof value === 'bigint')
            if (typeof value.toJSON === 'function') {
              return _encode(bytes, defers, value.toJSON());
            }
            throw new Error('Could not encode');
          }
          function encode(value) {
            var bytes = [];
            var defers = [];
            var size = _encode(bytes, defers, value);
            var buf = new ArrayBuffer(size);
            var view = new DataView(buf);
            var deferIndex = 0;
            var deferWritten = 0;
            var nextOffset = -1;
            if (defers.length > 0) {
              nextOffset = defers[0]._offset;
            }
            var defer,
              deferLength = 0,
              offset = 0;
            for (var i = 0, l = bytes.length; i < l; i++) {
              view.setUint8(deferWritten + i, bytes[i]);
              if (i + 1 !== nextOffset) {
                continue;
              }
              defer = defers[deferIndex];
              deferLength = defer._length;
              offset = deferWritten + nextOffset;
              if (defer._bin) {
                var bin = new Uint8Array(defer._bin);
                for (var j = 0; j < deferLength; j++) {
                  view.setUint8(offset + j, bin[j]);
                }
              } else if (defer._str) {
                utf8Write(view, offset, defer._str);
              } else if (defer._float !== undefined) {
                view.setFloat64(offset, defer._float);
              }
              deferIndex++;
              deferWritten += deferLength;
              if (defers[deferIndex]) {
                nextOffset = defers[deferIndex]._offset;
              }
            }
            return buf;
          }
          var browser = function () {
            throw new Error('ws does not work in the browser. Browser clients must use the native ' + 'WebSocket object');
          };
          var WebSocket = globalThis.WebSocket || browser;
          var WebSocketTransport = /** @class */function () {
            function WebSocketTransport(events) {
              this.events = events;
            }
            WebSocketTransport.prototype.send = function (data) {
              if (data instanceof ArrayBuffer) {
                this.ws.send(data);
              } else if (Array.isArray(data)) {
                this.ws.send(new Uint8Array(data).buffer);
              }
            };
            WebSocketTransport.prototype.connect = function (url) {
              this.ws = new WebSocket(url, this.protocols);
              this.ws.binaryType = 'arraybuffer';
              this.ws.onopen = this.events.onopen;
              this.ws.onmessage = this.events.onmessage;
              this.ws.onclose = this.events.onclose;
              this.ws.onerror = this.events.onerror;
            };
            WebSocketTransport.prototype.close = function (code, reason) {
              this.ws.close(code, reason);
            };
            Object.defineProperty(WebSocketTransport.prototype, "isOpen", {
              get: function () {
                return this.ws.readyState === WebSocket.OPEN;
              },
              enumerable: false,
              configurable: true
            });
            return WebSocketTransport;
          }();
          var Connection = /** @class */function () {
            function Connection() {
              this.events = {};
              this.transport = new WebSocketTransport(this.events);
            }
            Connection.prototype.send = function (data) {
              this.transport.send(data);
            };
            Connection.prototype.connect = function (url) {
              this.transport.connect(url);
            };
            Connection.prototype.close = function (code, reason) {
              this.transport.close(code, reason);
            };
            Object.defineProperty(Connection.prototype, "isOpen", {
              get: function () {
                return this.transport.isOpen;
              },
              enumerable: false,
              configurable: true
            });
            return Connection;
          }();

          // Use codes between 0~127 for lesser throughput (1 byte)
          exports.Protocol = void 0;
          (function (Protocol) {
            // Room-related (10~19)
            Protocol[Protocol["HANDSHAKE"] = 9] = "HANDSHAKE";
            Protocol[Protocol["JOIN_ROOM"] = 10] = "JOIN_ROOM";
            Protocol[Protocol["ERROR"] = 11] = "ERROR";
            Protocol[Protocol["LEAVE_ROOM"] = 12] = "LEAVE_ROOM";
            Protocol[Protocol["ROOM_DATA"] = 13] = "ROOM_DATA";
            Protocol[Protocol["ROOM_STATE"] = 14] = "ROOM_STATE";
            Protocol[Protocol["ROOM_STATE_PATCH"] = 15] = "ROOM_STATE_PATCH";
            Protocol[Protocol["ROOM_DATA_SCHEMA"] = 16] = "ROOM_DATA_SCHEMA";
            Protocol[Protocol["ROOM_DATA_BYTES"] = 17] = "ROOM_DATA_BYTES";
          })(exports.Protocol || (exports.Protocol = {}));
          exports.ErrorCode = void 0;
          (function (ErrorCode) {
            ErrorCode[ErrorCode["MATCHMAKE_NO_HANDLER"] = 4210] = "MATCHMAKE_NO_HANDLER";
            ErrorCode[ErrorCode["MATCHMAKE_INVALID_CRITERIA"] = 4211] = "MATCHMAKE_INVALID_CRITERIA";
            ErrorCode[ErrorCode["MATCHMAKE_INVALID_ROOM_ID"] = 4212] = "MATCHMAKE_INVALID_ROOM_ID";
            ErrorCode[ErrorCode["MATCHMAKE_UNHANDLED"] = 4213] = "MATCHMAKE_UNHANDLED";
            ErrorCode[ErrorCode["MATCHMAKE_EXPIRED"] = 4214] = "MATCHMAKE_EXPIRED";
            ErrorCode[ErrorCode["AUTH_FAILED"] = 4215] = "AUTH_FAILED";
            ErrorCode[ErrorCode["APPLICATION_ERROR"] = 4216] = "APPLICATION_ERROR";
          })(exports.ErrorCode || (exports.ErrorCode = {}));
          function utf8Read(view, offset) {
            var length = view[offset++];
            var string = '',
              chr = 0;
            for (var i = offset, end = offset + length; i < end; i++) {
              var byte = view[i];
              if ((byte & 0x80) === 0x00) {
                string += String.fromCharCode(byte);
                continue;
              }
              if ((byte & 0xe0) === 0xc0) {
                string += String.fromCharCode((byte & 0x1f) << 6 | view[++i] & 0x3f);
                continue;
              }
              if ((byte & 0xf0) === 0xe0) {
                string += String.fromCharCode((byte & 0x0f) << 12 | (view[++i] & 0x3f) << 6 | (view[++i] & 0x3f) << 0);
                continue;
              }
              if ((byte & 0xf8) === 0xf0) {
                chr = (byte & 0x07) << 18 | (view[++i] & 0x3f) << 12 | (view[++i] & 0x3f) << 6 | (view[++i] & 0x3f) << 0;
                if (chr >= 0x010000) {
                  // surrogate pair
                  chr -= 0x010000;
                  string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);
                } else {
                  string += String.fromCharCode(chr);
                }
                continue;
              }
              throw new Error('Invalid byte ' + byte.toString(16));
            }
            return string;
          }
          // Faster for short strings than Buffer.byteLength
          function utf8Length(str) {
            if (str === void 0) {
              str = '';
            }
            var c = 0;
            var length = 0;
            for (var i = 0, l = str.length; i < l; i++) {
              c = str.charCodeAt(i);
              if (c < 0x80) {
                length += 1;
              } else if (c < 0x800) {
                length += 2;
              } else if (c < 0xd800 || c >= 0xe000) {
                length += 3;
              } else {
                i++;
                length += 4;
              }
            }
            return length + 1;
          }
          var serializers = {};
          function registerSerializer(id, serializer) {
            serializers[id] = serializer;
          }
          function getSerializer(id) {
            var serializer = serializers[id];
            if (!serializer) {
              throw new Error("missing serializer: " + id);
            }
            return serializer;
          }

          /**
           * The MIT License (MIT)
           *
           * Copyright 2016 Andrey Sitnik <andrey@sitnik.ru>
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy of
           * this software and associated documentation files (the "Software"), to deal in
           * the Software without restriction, including without limitation the rights to
           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
           * the Software, and to permit persons to whom the Software is furnished to do so,
           * subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in all
           * copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
           */
          var createNanoEvents = function () {
            return {
              emit: function (event) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                  args[_i - 1] = arguments[_i];
                }
                var callbacks = this.events[event] || [];
                for (var i = 0, length_1 = callbacks.length; i < length_1; i++) {
                  callbacks[i].apply(callbacks, args);
                }
              },
              events: {},
              on: function (event, cb) {
                var _this = this;
                var _a;
                ((_a = this.events[event]) === null || _a === void 0 ? void 0 : _a.push(cb)) || (this.events[event] = [cb]);
                return function () {
                  var _a;
                  _this.events[event] = (_a = _this.events[event]) === null || _a === void 0 ? void 0 : _a.filter(function (i) {
                    return cb !== i;
                  });
                };
              }
            };
          };
          var EventEmitter = /** @class */function () {
            function EventEmitter() {
              this.handlers = [];
            }
            EventEmitter.prototype.register = function (cb, once) {
              this.handlers.push(cb);
              return this;
            };
            EventEmitter.prototype.invoke = function () {
              var _this = this;
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              this.handlers.forEach(function (handler) {
                return handler.apply(_this, args);
              });
            };
            EventEmitter.prototype.invokeAsync = function () {
              var _this = this;
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return Promise.all(this.handlers.map(function (handler) {
                return handler.apply(_this, args);
              }));
            };
            EventEmitter.prototype.remove = function (cb) {
              var index = this.handlers.indexOf(cb);
              this.handlers[index] = this.handlers[this.handlers.length - 1];
              this.handlers.pop();
            };
            EventEmitter.prototype.clear = function () {
              this.handlers = [];
            };
            return EventEmitter;
          }();
          function createSignal() {
            var emitter = new EventEmitter();
            function register(cb) {
              return emitter.register(cb, this === null);
            }
            register.once = function (cb) {
              var callback = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }
                cb.apply(this, args);
                emitter.remove(callback);
              };
              emitter.register(callback);
            };
            register.remove = function (cb) {
              return emitter.remove(cb);
            };
            register.invoke = function () {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return emitter.invoke.apply(emitter, args);
            };
            register.invokeAsync = function () {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return emitter.invokeAsync.apply(emitter, args);
            };
            register.clear = function () {
              return emitter.clear();
            };
            return register;
          }
          var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
          function createCommonjsModule(fn) {
            var module = {
              exports: {}
            };
            return fn(module, module.exports), module.exports;
          }
          var umd = createCommonjsModule(function (module, exports) {
            (function (global, factory) {
              factory(exports);
            })(commonjsGlobal, function (exports) {
              /******************************************************************************
              Copyright (c) Microsoft Corporation.
                Permission to use, copy, modify, and/or distribute this software for any
              purpose with or without fee is hereby granted.
                THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
              REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
              AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
              INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
              LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
              OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
              PERFORMANCE OF THIS SOFTWARE.
              ***************************************************************************** */
              /* global Reflect, Promise */

              var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf || {
                  __proto__: []
                } instanceof Array && function (d, b) {
                  d.__proto__ = b;
                } || function (d, b) {
                  for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
                return extendStatics(d, b);
              };
              function __extends(d, b) {
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              }
              function __decorate(decorators, target, key, desc) {
                var c = arguments.length,
                  r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                  d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
              }
              function __spreadArray(to, from, pack) {
                if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                  if (ar || !(i in from)) {
                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                  }
                }
                return to.concat(ar || Array.prototype.slice.call(from));
              }

              // export const SWITCH_TO_STRUCTURE = 193; (easily collides with DELETE_AND_ADD + fieldIndex = 2)
              var SWITCH_TO_STRUCTURE = 255; // (decoding collides with DELETE_AND_ADD + fieldIndex = 63)
              var TYPE_ID = 213;
              /**
               * Encoding Schema field operations.
               */
              exports.OPERATION = void 0;
              (function (OPERATION) {
                // add new structure/primitive
                OPERATION[OPERATION["ADD"] = 128] = "ADD";
                // replace structure/primitive
                OPERATION[OPERATION["REPLACE"] = 0] = "REPLACE";
                // delete field
                OPERATION[OPERATION["DELETE"] = 64] = "DELETE";
                // DELETE field, followed by an ADD
                OPERATION[OPERATION["DELETE_AND_ADD"] = 192] = "DELETE_AND_ADD";
                // TOUCH is used to determine hierarchy of nested Schema structures during serialization.
                // touches are NOT encoded.
                OPERATION[OPERATION["TOUCH"] = 1] = "TOUCH";
                // MapSchema Operations
                OPERATION[OPERATION["CLEAR"] = 10] = "CLEAR";
              })(exports.OPERATION || (exports.OPERATION = {}));
              // export enum OPERATION {
              //     // add new structure/primitive
              //     // (128)
              //     ADD = 128, // 10000000,
              //     // replace structure/primitive
              //     REPLACE = 1,// 00000001
              //     // delete field
              //     DELETE = 192, // 11000000
              //     // DELETE field, followed by an ADD
              //     DELETE_AND_ADD = 224, // 11100000
              //     // TOUCH is used to determine hierarchy of nested Schema structures during serialization.
              //     // touches are NOT encoded.
              //     TOUCH = 0, // 00000000
              //     // MapSchema Operations
              //     CLEAR = 10,
              // }

              var ChangeTree = /** @class */function () {
                function ChangeTree(ref, parent, root) {
                  this.changed = false;
                  this.changes = new Map();
                  this.allChanges = new Set();
                  // cached indexes for filtering
                  this.caches = {};
                  this.currentCustomOperation = 0;
                  this.ref = ref;
                  this.setParent(parent, root);
                }
                ChangeTree.prototype.setParent = function (parent, root, parentIndex) {
                  var _this = this;
                  if (!this.indexes) {
                    this.indexes = this.ref instanceof Schema ? this.ref['_definition'].indexes : {};
                  }
                  this.parent = parent;
                  this.parentIndex = parentIndex;
                  // avoid setting parents with empty `root`
                  if (!root) {
                    return;
                  }
                  this.root = root;
                  //
                  // assign same parent on child structures
                  //
                  if (this.ref instanceof Schema) {
                    var definition = this.ref['_definition'];
                    for (var field in definition.schema) {
                      var value = this.ref[field];
                      if (value && value['$changes']) {
                        var parentIndex_1 = definition.indexes[field];
                        value['$changes'].setParent(this.ref, root, parentIndex_1);
                      }
                    }
                  } else if (typeof this.ref === "object") {
                    this.ref.forEach(function (value, key) {
                      if (value instanceof Schema) {
                        var changeTreee = value['$changes'];
                        var parentIndex_2 = _this.ref['$changes'].indexes[key];
                        changeTreee.setParent(_this.ref, _this.root, parentIndex_2);
                      }
                    });
                  }
                };
                ChangeTree.prototype.operation = function (op) {
                  this.changes.set(--this.currentCustomOperation, op);
                };
                ChangeTree.prototype.change = function (fieldName, operation) {
                  if (operation === void 0) {
                    operation = exports.OPERATION.ADD;
                  }
                  var index = typeof fieldName === "number" ? fieldName : this.indexes[fieldName];
                  this.assertValidIndex(index, fieldName);
                  var previousChange = this.changes.get(index);
                  if (!previousChange || previousChange.op === exports.OPERATION.DELETE || previousChange.op === exports.OPERATION.TOUCH // (mazmorra.io's BattleAction issue)
                  ) {
                    this.changes.set(index, {
                      op: !previousChange ? operation : previousChange.op === exports.OPERATION.DELETE ? exports.OPERATION.DELETE_AND_ADD : operation,
                      // : OPERATION.REPLACE,
                      index: index
                    });
                  }
                  this.allChanges.add(index);
                  this.changed = true;
                  this.touchParents();
                };
                ChangeTree.prototype.touch = function (fieldName) {
                  var index = typeof fieldName === "number" ? fieldName : this.indexes[fieldName];
                  this.assertValidIndex(index, fieldName);
                  if (!this.changes.has(index)) {
                    this.changes.set(index, {
                      op: exports.OPERATION.TOUCH,
                      index: index
                    });
                  }
                  this.allChanges.add(index);
                  // ensure touch is placed until the $root is found.
                  this.touchParents();
                };
                ChangeTree.prototype.touchParents = function () {
                  if (this.parent) {
                    this.parent['$changes'].touch(this.parentIndex);
                  }
                };
                ChangeTree.prototype.getType = function (index) {
                  if (this.ref['_definition']) {
                    var definition = this.ref['_definition'];
                    return definition.schema[definition.fieldsByIndex[index]];
                  } else {
                    var definition = this.parent['_definition'];
                    var parentType = definition.schema[definition.fieldsByIndex[this.parentIndex]];
                    //
                    // Get the child type from parent structure.
                    // - ["string"] => "string"
                    // - { map: "string" } => "string"
                    // - { set: "string" } => "string"
                    //
                    return Object.values(parentType)[0];
                  }
                };
                ChangeTree.prototype.getChildrenFilter = function () {
                  var childFilters = this.parent['_definition'].childFilters;
                  return childFilters && childFilters[this.parentIndex];
                };
                //
                // used during `.encode()`
                //
                ChangeTree.prototype.getValue = function (index) {
                  return this.ref['getByIndex'](index);
                };
                ChangeTree.prototype.delete = function (fieldName) {
                  var index = typeof fieldName === "number" ? fieldName : this.indexes[fieldName];
                  if (index === undefined) {
                    console.warn("@colyseus/schema ".concat(this.ref.constructor.name, ": trying to delete non-existing index: ").concat(fieldName, " (").concat(index, ")"));
                    return;
                  }
                  var previousValue = this.getValue(index);
                  // console.log("$changes.delete =>", { fieldName, index, previousValue });
                  this.changes.set(index, {
                    op: exports.OPERATION.DELETE,
                    index: index
                  });
                  this.allChanges.delete(index);
                  // delete cache
                  delete this.caches[index];
                  // remove `root` reference
                  if (previousValue && previousValue['$changes']) {
                    previousValue['$changes'].parent = undefined;
                  }
                  this.changed = true;
                  this.touchParents();
                };
                ChangeTree.prototype.discard = function (changed, discardAll) {
                  var _this = this;
                  if (changed === void 0) {
                    changed = false;
                  }
                  if (discardAll === void 0) {
                    discardAll = false;
                  }
                  //
                  // Map, Array, etc:
                  // Remove cached key to ensure ADD operations is unsed instead of
                  // REPLACE in case same key is used on next patches.
                  //
                  // TODO: refactor this. this is not relevant for Collection and Set.
                  //
                  if (!(this.ref instanceof Schema)) {
                    this.changes.forEach(function (change) {
                      if (change.op === exports.OPERATION.DELETE) {
                        var index = _this.ref['getIndex'](change.index);
                        delete _this.indexes[index];
                      }
                    });
                  }
                  this.changes.clear();
                  this.changed = changed;
                  if (discardAll) {
                    this.allChanges.clear();
                  }
                  // re-set `currentCustomOperation`
                  this.currentCustomOperation = 0;
                };
                /**
                 * Recursively discard all changes from this, and child structures.
                 */
                ChangeTree.prototype.discardAll = function () {
                  var _this = this;
                  this.changes.forEach(function (change) {
                    var value = _this.getValue(change.index);
                    if (value && value['$changes']) {
                      value['$changes'].discardAll();
                    }
                  });
                  this.discard();
                };
                // cache(field: number, beginIndex: number, endIndex: number) {
                ChangeTree.prototype.cache = function (field, cachedBytes) {
                  this.caches[field] = cachedBytes;
                };
                ChangeTree.prototype.clone = function () {
                  return new ChangeTree(this.ref, this.parent, this.root);
                };
                ChangeTree.prototype.ensureRefId = function () {
                  // skip if refId is already set.
                  if (this.refId !== undefined) {
                    return;
                  }
                  this.refId = this.root.getNextUniqueId();
                };
                ChangeTree.prototype.assertValidIndex = function (index, fieldName) {
                  if (index === undefined) {
                    throw new Error("ChangeTree: missing index for field \"".concat(fieldName, "\""));
                  }
                };
                return ChangeTree;
              }();
              function addCallback($callbacks, op, callback, existing) {
                // initialize list of callbacks
                if (!$callbacks[op]) {
                  $callbacks[op] = [];
                }
                $callbacks[op].push(callback);
                //
                // Trigger callback for existing elements
                // - OPERATION.ADD
                // - OPERATION.REPLACE
                //
                existing === null || existing === void 0 ? void 0 : existing.forEach(function (item, key) {
                  return callback(item, key);
                });
                return function () {
                  return spliceOne($callbacks[op], $callbacks[op].indexOf(callback));
                };
              }
              function removeChildRefs(changes) {
                var _this = this;
                var needRemoveRef = typeof this.$changes.getType() !== "string";
                this.$items.forEach(function (item, key) {
                  changes.push({
                    refId: _this.$changes.refId,
                    op: exports.OPERATION.DELETE,
                    field: key,
                    value: undefined,
                    previousValue: item
                  });
                  if (needRemoveRef) {
                    _this.$changes.root.removeRef(item['$changes'].refId);
                  }
                });
              }
              function spliceOne(arr, index) {
                // manually splice an array
                if (index === -1 || index >= arr.length) {
                  return false;
                }
                var len = arr.length - 1;
                for (var i = index; i < len; i++) {
                  arr[i] = arr[i + 1];
                }
                arr.length = len;
                return true;
              }
              var DEFAULT_SORT = function (a, b) {
                var A = a.toString();
                var B = b.toString();
                if (A < B) return -1;else if (A > B) return 1;else return 0;
              };
              function getArrayProxy(value) {
                value['$proxy'] = true;
                //
                // compatibility with @colyseus/schema 0.5.x
                // - allow `map["key"]`
                // - allow `map["key"] = "xxx"`
                // - allow `delete map["key"]`
                //
                value = new Proxy(value, {
                  get: function (obj, prop) {
                    if (typeof prop !== "symbol" && !isNaN(prop) // https://stackoverflow.com/a/175787/892698
                    ) {
                      return obj.at(prop);
                    } else {
                      return obj[prop];
                    }
                  },
                  set: function (obj, prop, setValue) {
                    if (typeof prop !== "symbol" && !isNaN(prop)) {
                      var indexes = Array.from(obj['$items'].keys());
                      var key = parseInt(indexes[prop] || prop);
                      if (setValue === undefined || setValue === null) {
                        obj.deleteAt(key);
                      } else {
                        obj.setAt(key, setValue);
                      }
                    } else {
                      obj[prop] = setValue;
                    }
                    return true;
                  },
                  deleteProperty: function (obj, prop) {
                    if (typeof prop === "number") {
                      obj.deleteAt(prop);
                    } else {
                      delete obj[prop];
                    }
                    return true;
                  }
                });
                return value;
              }
              var ArraySchema = /** @class */function () {
                function ArraySchema() {
                  var items = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    items[_i] = arguments[_i];
                  }
                  this.$changes = new ChangeTree(this);
                  this.$items = new Map();
                  this.$indexes = new Map();
                  this.$refId = 0;
                  this.push.apply(this, items);
                }
                ArraySchema.prototype.onAdd = function (callback, triggerAll) {
                  if (triggerAll === void 0) {
                    triggerAll = true;
                  }
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.ADD, callback, triggerAll ? this.$items : undefined);
                };
                ArraySchema.prototype.onRemove = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.DELETE, callback);
                };
                ArraySchema.prototype.onChange = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.REPLACE, callback);
                };
                ArraySchema.is = function (type) {
                  return (
                    // type format: ["string"]
                    Array.isArray(type) ||
                    // type format: { array: "string" }
                    type['array'] !== undefined
                  );
                };
                Object.defineProperty(ArraySchema.prototype, "length", {
                  get: function () {
                    return this.$items.size;
                  },
                  set: function (value) {
                    if (value === 0) {
                      this.clear();
                    } else {
                      this.splice(value, this.length - value);
                    }
                  },
                  enumerable: false,
                  configurable: true
                });
                ArraySchema.prototype.push = function () {
                  var _this = this;
                  var values = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    values[_i] = arguments[_i];
                  }
                  var lastIndex;
                  values.forEach(function (value) {
                    // set "index" for reference.
                    lastIndex = _this.$refId++;
                    _this.setAt(lastIndex, value);
                  });
                  return lastIndex;
                };
                /**
                 * Removes the last element from an array and returns it.
                 */
                ArraySchema.prototype.pop = function () {
                  var key = Array.from(this.$indexes.values()).pop();
                  if (key === undefined) {
                    return undefined;
                  }
                  this.$changes.delete(key);
                  this.$indexes.delete(key);
                  var value = this.$items.get(key);
                  this.$items.delete(key);
                  return value;
                };
                ArraySchema.prototype.at = function (index) {
                  //
                  // FIXME: this should be O(1)
                  //
                  var key = Array.from(this.$items.keys())[index];
                  return this.$items.get(key);
                };
                ArraySchema.prototype.setAt = function (index, value) {
                  var _a, _b;
                  if (value['$changes'] !== undefined) {
                    value['$changes'].setParent(this, this.$changes.root, index);
                  }
                  var operation = (_b = (_a = this.$changes.indexes[index]) === null || _a === void 0 ? void 0 : _a.op) !== null && _b !== void 0 ? _b : exports.OPERATION.ADD;
                  this.$changes.indexes[index] = index;
                  this.$indexes.set(index, index);
                  this.$items.set(index, value);
                  this.$changes.change(index, operation);
                };
                ArraySchema.prototype.deleteAt = function (index) {
                  var key = Array.from(this.$items.keys())[index];
                  if (key === undefined) {
                    return false;
                  }
                  return this.$deleteAt(key);
                };
                ArraySchema.prototype.$deleteAt = function (index) {
                  // delete at internal index
                  this.$changes.delete(index);
                  this.$indexes.delete(index);
                  return this.$items.delete(index);
                };
                ArraySchema.prototype.clear = function (changes) {
                  // discard previous operations.
                  this.$changes.discard(true, true);
                  this.$changes.indexes = {};
                  // clear previous indexes
                  this.$indexes.clear();
                  //
                  // When decoding:
                  // - enqueue items for DELETE callback.
                  // - flag child items for garbage collection.
                  //
                  if (changes) {
                    removeChildRefs.call(this, changes);
                  }
                  // clear items
                  this.$items.clear();
                  this.$changes.operation({
                    index: 0,
                    op: exports.OPERATION.CLEAR
                  });
                  // touch all structures until reach root
                  this.$changes.touchParents();
                };
                /**
                 * Combines two or more arrays.
                 * @param items Additional items to add to the end of array1.
                 */
                // @ts-ignore
                ArraySchema.prototype.concat = function () {
                  var _a;
                  var items = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    items[_i] = arguments[_i];
                  }
                  return new (ArraySchema.bind.apply(ArraySchema, __spreadArray([void 0], (_a = Array.from(this.$items.values())).concat.apply(_a, items), false)))();
                };
                /**
                 * Adds all the elements of an array separated by the specified separator string.
                 * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
                 */
                ArraySchema.prototype.join = function (separator) {
                  return Array.from(this.$items.values()).join(separator);
                };
                /**
                 * Reverses the elements in an Array.
                 */
                // @ts-ignore
                ArraySchema.prototype.reverse = function () {
                  var _this = this;
                  var indexes = Array.from(this.$items.keys());
                  var reversedItems = Array.from(this.$items.values()).reverse();
                  reversedItems.forEach(function (item, i) {
                    _this.setAt(indexes[i], item);
                  });
                  return this;
                };
                /**
                 * Removes the first element from an array and returns it.
                 */
                ArraySchema.prototype.shift = function () {
                  var indexes = Array.from(this.$items.keys());
                  var shiftAt = indexes.shift();
                  if (shiftAt === undefined) {
                    return undefined;
                  }
                  var value = this.$items.get(shiftAt);
                  this.$deleteAt(shiftAt);
                  return value;
                };
                /**
                 * Returns a section of an array.
                 * @param start The beginning of the specified portion of the array.
                 * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
                 */
                ArraySchema.prototype.slice = function (start, end) {
                  var sliced = new ArraySchema();
                  sliced.push.apply(sliced, Array.from(this.$items.values()).slice(start, end));
                  return sliced;
                };
                /**
                 * Sorts an array.
                 * @param compareFn Function used to determine the order of the elements. It is expected to return
                 * a negative value if first argument is less than second argument, zero if they're equal and a positive
                 * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.
                 * ```ts
                 * [11,2,22,1].sort((a, b) => a - b)
                 * ```
                 */
                ArraySchema.prototype.sort = function (compareFn) {
                  var _this = this;
                  if (compareFn === void 0) {
                    compareFn = DEFAULT_SORT;
                  }
                  var indexes = Array.from(this.$items.keys());
                  var sortedItems = Array.from(this.$items.values()).sort(compareFn);
                  sortedItems.forEach(function (item, i) {
                    _this.setAt(indexes[i], item);
                  });
                  return this;
                };
                /**
                 * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
                 * @param start The zero-based location in the array from which to start removing elements.
                 * @param deleteCount The number of elements to remove.
                 * @param items Elements to insert into the array in place of the deleted elements.
                 */
                ArraySchema.prototype.splice = function (start, deleteCount) {
                  if (deleteCount === void 0) {
                    deleteCount = this.length - start;
                  }
                  var indexes = Array.from(this.$items.keys());
                  var removedItems = [];
                  for (var i = start; i < start + deleteCount; i++) {
                    removedItems.push(this.$items.get(indexes[i]));
                    this.$deleteAt(indexes[i]);
                  }
                  return removedItems;
                };
                /**
                 * Inserts new elements at the start of an array.
                 * @param items  Elements to insert at the start of the Array.
                 */
                ArraySchema.prototype.unshift = function () {
                  var _this = this;
                  var items = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    items[_i] = arguments[_i];
                  }
                  var length = this.length;
                  var addedLength = items.length;
                  // const indexes = Array.from(this.$items.keys());
                  var previousValues = Array.from(this.$items.values());
                  items.forEach(function (item, i) {
                    _this.setAt(i, item);
                  });
                  previousValues.forEach(function (previousValue, i) {
                    _this.setAt(addedLength + i, previousValue);
                  });
                  return length + addedLength;
                };
                /**
                 * Returns the index of the first occurrence of a value in an array.
                 * @param searchElement The value to locate in the array.
                 * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
                 */
                ArraySchema.prototype.indexOf = function (searchElement, fromIndex) {
                  return Array.from(this.$items.values()).indexOf(searchElement, fromIndex);
                };
                /**
                 * Returns the index of the last occurrence of a specified value in an array.
                 * @param searchElement The value to locate in the array.
                 * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
                 */
                ArraySchema.prototype.lastIndexOf = function (searchElement, fromIndex) {
                  if (fromIndex === void 0) {
                    fromIndex = this.length - 1;
                  }
                  return Array.from(this.$items.values()).lastIndexOf(searchElement, fromIndex);
                };
                /**
                 * Determines whether all the members of an array satisfy the specified test.
                 * @param callbackfn A function that accepts up to three arguments. The every method calls
                 * the callbackfn function for each element in the array until the callbackfn returns a value
                 * which is coercible to the Boolean value false, or until the end of the array.
                 * @param thisArg An object to which the this keyword can refer in the callbackfn function.
                 * If thisArg is omitted, undefined is used as the this value.
                 */
                ArraySchema.prototype.every = function (callbackfn, thisArg) {
                  return Array.from(this.$items.values()).every(callbackfn, thisArg);
                };
                /**
                 * Determines whether the specified callback function returns true for any element of an array.
                 * @param callbackfn A function that accepts up to three arguments. The some method calls
                 * the callbackfn function for each element in the array until the callbackfn returns a value
                 * which is coercible to the Boolean value true, or until the end of the array.
                 * @param thisArg An object to which the this keyword can refer in the callbackfn function.
                 * If thisArg is omitted, undefined is used as the this value.
                 */
                ArraySchema.prototype.some = function (callbackfn, thisArg) {
                  return Array.from(this.$items.values()).some(callbackfn, thisArg);
                };
                /**
                 * Performs the specified action for each element in an array.
                 * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
                 * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
                 */
                ArraySchema.prototype.forEach = function (callbackfn, thisArg) {
                  Array.from(this.$items.values()).forEach(callbackfn, thisArg);
                };
                /**
                 * Calls a defined callback function on each element of an array, and returns an array that contains the results.
                 * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
                 * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
                 */
                ArraySchema.prototype.map = function (callbackfn, thisArg) {
                  return Array.from(this.$items.values()).map(callbackfn, thisArg);
                };
                ArraySchema.prototype.filter = function (callbackfn, thisArg) {
                  return Array.from(this.$items.values()).filter(callbackfn, thisArg);
                };
                /**
                 * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
                 * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
                 * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
                 */
                ArraySchema.prototype.reduce = function (callbackfn, initialValue) {
                  return Array.prototype.reduce.apply(Array.from(this.$items.values()), arguments);
                };
                /**
                 * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
                 * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
                 * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
                 */
                ArraySchema.prototype.reduceRight = function (callbackfn, initialValue) {
                  return Array.prototype.reduceRight.apply(Array.from(this.$items.values()), arguments);
                };
                /**
                 * Returns the value of the first element in the array where predicate is true, and undefined
                 * otherwise.
                 * @param predicate find calls predicate once for each element of the array, in ascending
                 * order, until it finds one where predicate returns true. If such an element is found, find
                 * immediately returns that element value. Otherwise, find returns undefined.
                 * @param thisArg If provided, it will be used as the this value for each invocation of
                 * predicate. If it is not provided, undefined is used instead.
                 */
                ArraySchema.prototype.find = function (predicate, thisArg) {
                  return Array.from(this.$items.values()).find(predicate, thisArg);
                };
                /**
                 * Returns the index of the first element in the array where predicate is true, and -1
                 * otherwise.
                 * @param predicate find calls predicate once for each element of the array, in ascending
                 * order, until it finds one where predicate returns true. If such an element is found,
                 * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
                 * @param thisArg If provided, it will be used as the this value for each invocation of
                 * predicate. If it is not provided, undefined is used instead.
                 */
                ArraySchema.prototype.findIndex = function (predicate, thisArg) {
                  return Array.from(this.$items.values()).findIndex(predicate, thisArg);
                };
                /**
                 * Returns the this object after filling the section identified by start and end with value
                 * @param value value to fill array section with
                 * @param start index to start filling the array at. If start is negative, it is treated as
                 * length+start where length is the length of the array.
                 * @param end index to stop filling the array at. If end is negative, it is treated as
                 * length+end.
                 */
                ArraySchema.prototype.fill = function (value, start, end) {
                  //
                  // TODO
                  //
                  throw new Error("ArraySchema#fill() not implemented");
                };
                /**
                 * Returns the this object after copying a section of the array identified by start and end
                 * to the same array starting at position target
                 * @param target If target is negative, it is treated as length+target where length is the
                 * length of the array.
                 * @param start If start is negative, it is treated as length+start. If end is negative, it
                 * is treated as length+end.
                 * @param end If not specified, length of the this object is used as its default value.
                 */
                ArraySchema.prototype.copyWithin = function (target, start, end) {
                  //
                  // TODO
                  //
                  throw new Error("ArraySchema#copyWithin() not implemented");
                };
                /**
                 * Returns a string representation of an array.
                 */
                ArraySchema.prototype.toString = function () {
                  return this.$items.toString();
                };
                /**
                 * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.
                 */
                ArraySchema.prototype.toLocaleString = function () {
                  return this.$items.toLocaleString();
                };
                /** Iterator */
                ArraySchema.prototype[Symbol.iterator] = function () {
                  return Array.from(this.$items.values())[Symbol.iterator]();
                };
                /**
                 * Returns an iterable of key, value pairs for every entry in the array
                 */
                ArraySchema.prototype.entries = function () {
                  return this.$items.entries();
                };
                /**
                 * Returns an iterable of keys in the array
                 */
                ArraySchema.prototype.keys = function () {
                  return this.$items.keys();
                };
                /**
                 * Returns an iterable of values in the array
                 */
                ArraySchema.prototype.values = function () {
                  return this.$items.values();
                };
                /**
                 * Determines whether an array includes a certain element, returning true or false as appropriate.
                 * @param searchElement The element to search for.
                 * @param fromIndex The position in this array at which to begin searching for searchElement.
                 */
                ArraySchema.prototype.includes = function (searchElement, fromIndex) {
                  return Array.from(this.$items.values()).includes(searchElement, fromIndex);
                };
                /**
                 * Calls a defined callback function on each element of an array. Then, flattens the result into
                 * a new array.
                 * This is identical to a map followed by flat with depth 1.
                 *
                 * @param callback A function that accepts up to three arguments. The flatMap method calls the
                 * callback function one time for each element in the array.
                 * @param thisArg An object to which the this keyword can refer in the callback function. If
                 * thisArg is omitted, undefined is used as the this value.
                 */
                // @ts-ignore
                ArraySchema.prototype.flatMap = function (callback, thisArg) {
                  // @ts-ignore
                  throw new Error("ArraySchema#flatMap() is not supported.");
                };
                /**
                 * Returns a new array with all sub-array elements concatenated into it recursively up to the
                 * specified depth.
                 *
                 * @param depth The maximum recursion depth
                 */
                // @ts-ignore
                ArraySchema.prototype.flat = function (depth) {
                  throw new Error("ArraySchema#flat() is not supported.");
                };
                ArraySchema.prototype.findLast = function () {
                  var arr = Array.from(this.$items.values());
                  // @ts-ignore
                  return arr.findLast.apply(arr, arguments);
                };
                ArraySchema.prototype.findLastIndex = function () {
                  var arr = Array.from(this.$items.values());
                  // @ts-ignore
                  return arr.findLastIndex.apply(arr, arguments);
                };
                // get size () {
                //     return this.$items.size;
                // }
                ArraySchema.prototype.setIndex = function (index, key) {
                  this.$indexes.set(index, key);
                };
                ArraySchema.prototype.getIndex = function (index) {
                  return this.$indexes.get(index);
                };
                ArraySchema.prototype.getByIndex = function (index) {
                  return this.$items.get(this.$indexes.get(index));
                };
                ArraySchema.prototype.deleteByIndex = function (index) {
                  var key = this.$indexes.get(index);
                  this.$items.delete(key);
                  this.$indexes.delete(index);
                };
                ArraySchema.prototype.toArray = function () {
                  return Array.from(this.$items.values());
                };
                ArraySchema.prototype.toJSON = function () {
                  return this.toArray().map(function (value) {
                    return typeof value['toJSON'] === "function" ? value['toJSON']() : value;
                  });
                };
                //
                // Decoding utilities
                //
                ArraySchema.prototype.clone = function (isDecoding) {
                  var cloned;
                  if (isDecoding) {
                    cloned = new (ArraySchema.bind.apply(ArraySchema, __spreadArray([void 0], Array.from(this.$items.values()), false)))();
                  } else {
                    cloned = new (ArraySchema.bind.apply(ArraySchema, __spreadArray([void 0], this.map(function (item) {
                      return item['$changes'] ? item.clone() : item;
                    }), false)))();
                  }
                  return cloned;
                };
                return ArraySchema;
              }();
              function getMapProxy(value) {
                value['$proxy'] = true;
                value = new Proxy(value, {
                  get: function (obj, prop) {
                    if (typeof prop !== "symbol" &&
                    // accessing properties
                    typeof obj[prop] === "undefined") {
                      return obj.get(prop);
                    } else {
                      return obj[prop];
                    }
                  },
                  set: function (obj, prop, setValue) {
                    if (typeof prop !== "symbol" && prop.indexOf("$") === -1 && prop !== "onAdd" && prop !== "onRemove" && prop !== "onChange") {
                      obj.set(prop, setValue);
                    } else {
                      obj[prop] = setValue;
                    }
                    return true;
                  },
                  deleteProperty: function (obj, prop) {
                    obj.delete(prop);
                    return true;
                  }
                });
                return value;
              }
              var MapSchema = /** @class */function () {
                function MapSchema(initialValues) {
                  var _this = this;
                  this.$changes = new ChangeTree(this);
                  this.$items = new Map();
                  this.$indexes = new Map();
                  this.$refId = 0;
                  if (initialValues) {
                    if (initialValues instanceof Map || initialValues instanceof MapSchema) {
                      initialValues.forEach(function (v, k) {
                        return _this.set(k, v);
                      });
                    } else {
                      for (var k in initialValues) {
                        this.set(k, initialValues[k]);
                      }
                    }
                  }
                }
                MapSchema.prototype.onAdd = function (callback, triggerAll) {
                  if (triggerAll === void 0) {
                    triggerAll = true;
                  }
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.ADD, callback, triggerAll ? this.$items : undefined);
                };
                MapSchema.prototype.onRemove = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.DELETE, callback);
                };
                MapSchema.prototype.onChange = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.REPLACE, callback);
                };
                MapSchema.is = function (type) {
                  return type['map'] !== undefined;
                };
                /** Iterator */
                MapSchema.prototype[Symbol.iterator] = function () {
                  return this.$items[Symbol.iterator]();
                };
                Object.defineProperty(MapSchema.prototype, Symbol.toStringTag, {
                  get: function () {
                    return this.$items[Symbol.toStringTag];
                  },
                  enumerable: false,
                  configurable: true
                });
                MapSchema.prototype.set = function (key, value) {
                  if (value === undefined || value === null) {
                    throw new Error("MapSchema#set('".concat(key, "', ").concat(value, "): trying to set ").concat(value, " value on '").concat(key, "'."));
                  }
                  // get "index" for this value.
                  var hasIndex = typeof this.$changes.indexes[key] !== "undefined";
                  var index = hasIndex ? this.$changes.indexes[key] : this.$refId++;
                  var operation = hasIndex ? exports.OPERATION.REPLACE : exports.OPERATION.ADD;
                  var isRef = value['$changes'] !== undefined;
                  if (isRef) {
                    value['$changes'].setParent(this, this.$changes.root, index);
                  }
                  //
                  // (encoding)
                  // set a unique id to relate directly with this key/value.
                  //
                  if (!hasIndex) {
                    this.$changes.indexes[key] = index;
                    this.$indexes.set(index, key);
                  } else if (isRef &&
                  // if is schema, force ADD operation if value differ from previous one.
                  this.$items.get(key) !== value) {
                    operation = exports.OPERATION.ADD;
                  }
                  this.$items.set(key, value);
                  this.$changes.change(key, operation);
                  return this;
                };
                MapSchema.prototype.get = function (key) {
                  return this.$items.get(key);
                };
                MapSchema.prototype.delete = function (key) {
                  //
                  // TODO: add a "purge" method after .encode() runs, to cleanup removed `$indexes`
                  //
                  // We don't remove $indexes to allow setting the same key in the same patch
                  // (See "should allow to remove and set an item in the same place" test)
                  //
                  // // const index = this.$changes.indexes[key];
                  // // this.$indexes.delete(index);
                  this.$changes.delete(key);
                  return this.$items.delete(key);
                };
                MapSchema.prototype.clear = function (changes) {
                  // discard previous operations.
                  this.$changes.discard(true, true);
                  this.$changes.indexes = {};
                  // clear previous indexes
                  this.$indexes.clear();
                  //
                  // When decoding:
                  // - enqueue items for DELETE callback.
                  // - flag child items for garbage collection.
                  //
                  if (changes) {
                    removeChildRefs.call(this, changes);
                  }
                  // clear items
                  this.$items.clear();
                  this.$changes.operation({
                    index: 0,
                    op: exports.OPERATION.CLEAR
                  });
                  // touch all structures until reach root
                  this.$changes.touchParents();
                };
                MapSchema.prototype.has = function (key) {
                  return this.$items.has(key);
                };
                MapSchema.prototype.forEach = function (callbackfn) {
                  this.$items.forEach(callbackfn);
                };
                MapSchema.prototype.entries = function () {
                  return this.$items.entries();
                };
                MapSchema.prototype.keys = function () {
                  return this.$items.keys();
                };
                MapSchema.prototype.values = function () {
                  return this.$items.values();
                };
                Object.defineProperty(MapSchema.prototype, "size", {
                  get: function () {
                    return this.$items.size;
                  },
                  enumerable: false,
                  configurable: true
                });
                MapSchema.prototype.setIndex = function (index, key) {
                  this.$indexes.set(index, key);
                };
                MapSchema.prototype.getIndex = function (index) {
                  return this.$indexes.get(index);
                };
                MapSchema.prototype.getByIndex = function (index) {
                  return this.$items.get(this.$indexes.get(index));
                };
                MapSchema.prototype.deleteByIndex = function (index) {
                  var key = this.$indexes.get(index);
                  this.$items.delete(key);
                  this.$indexes.delete(index);
                };
                MapSchema.prototype.toJSON = function () {
                  var map = {};
                  this.forEach(function (value, key) {
                    map[key] = typeof value['toJSON'] === "function" ? value['toJSON']() : value;
                  });
                  return map;
                };
                //
                // Decoding utilities
                //
                MapSchema.prototype.clone = function (isDecoding) {
                  var cloned;
                  if (isDecoding) {
                    // client-side
                    cloned = Object.assign(new MapSchema(), this);
                  } else {
                    // server-side
                    cloned = new MapSchema();
                    this.forEach(function (value, key) {
                      if (value['$changes']) {
                        cloned.set(key, value['clone']());
                      } else {
                        cloned.set(key, value);
                      }
                    });
                  }
                  return cloned;
                };
                return MapSchema;
              }();
              var registeredTypes = {};
              function registerType(identifier, definition) {
                registeredTypes[identifier] = definition;
              }
              function getType(identifier) {
                return registeredTypes[identifier];
              }
              var SchemaDefinition = /** @class */function () {
                function SchemaDefinition() {
                  //
                  // TODO: use a "field" structure combining all these properties per-field.
                  //
                  this.indexes = {};
                  this.fieldsByIndex = {};
                  this.deprecated = {};
                  this.descriptors = {};
                }
                SchemaDefinition.create = function (parent) {
                  var definition = new SchemaDefinition();
                  // support inheritance
                  definition.schema = Object.assign({}, parent && parent.schema || {});
                  definition.indexes = Object.assign({}, parent && parent.indexes || {});
                  definition.fieldsByIndex = Object.assign({}, parent && parent.fieldsByIndex || {});
                  definition.descriptors = Object.assign({}, parent && parent.descriptors || {});
                  definition.deprecated = Object.assign({}, parent && parent.deprecated || {});
                  return definition;
                };
                SchemaDefinition.prototype.addField = function (field, type) {
                  var index = this.getNextFieldIndex();
                  this.fieldsByIndex[index] = field;
                  this.indexes[field] = index;
                  this.schema[field] = Array.isArray(type) ? {
                    array: type[0]
                  } : type;
                };
                SchemaDefinition.prototype.hasField = function (field) {
                  return this.indexes[field] !== undefined;
                };
                SchemaDefinition.prototype.addFilter = function (field, cb) {
                  if (!this.filters) {
                    this.filters = {};
                    this.indexesWithFilters = [];
                  }
                  this.filters[this.indexes[field]] = cb;
                  this.indexesWithFilters.push(this.indexes[field]);
                  return true;
                };
                SchemaDefinition.prototype.addChildrenFilter = function (field, cb) {
                  var index = this.indexes[field];
                  var type = this.schema[field];
                  if (getType(Object.keys(type)[0])) {
                    if (!this.childFilters) {
                      this.childFilters = {};
                    }
                    this.childFilters[index] = cb;
                    return true;
                  } else {
                    console.warn("@filterChildren: field '".concat(field, "' can't have children. Ignoring filter."));
                  }
                };
                SchemaDefinition.prototype.getChildrenFilter = function (field) {
                  return this.childFilters && this.childFilters[this.indexes[field]];
                };
                SchemaDefinition.prototype.getNextFieldIndex = function () {
                  return Object.keys(this.schema || {}).length;
                };
                return SchemaDefinition;
              }();
              function hasFilter(klass) {
                return klass._context && klass._context.useFilters;
              }
              var Context = /** @class */function () {
                function Context() {
                  this.types = {};
                  this.schemas = new Map();
                  this.useFilters = false;
                }
                Context.prototype.has = function (schema) {
                  return this.schemas.has(schema);
                };
                Context.prototype.get = function (typeid) {
                  return this.types[typeid];
                };
                Context.prototype.add = function (schema, typeid) {
                  if (typeid === void 0) {
                    typeid = this.schemas.size;
                  }
                  // FIXME: move this to somewhere else?
                  // support inheritance
                  schema._definition = SchemaDefinition.create(schema._definition);
                  schema._typeid = typeid;
                  this.types[typeid] = schema;
                  this.schemas.set(schema, typeid);
                };
                Context.create = function (options) {
                  if (options === void 0) {
                    options = {};
                  }
                  return function (definition) {
                    if (!options.context) {
                      options.context = new Context();
                    }
                    return type(definition, options);
                  };
                };
                return Context;
              }();
              var globalContext = new Context();
              /**
               * [See documentation](https://docs.colyseus.io/state/schema/)
               *
               * Annotate a Schema property to be serializeable.
               * \@type()'d fields are automatically flagged as "dirty" for the next patch.
               *
               * @example Standard usage, with automatic change tracking.
               * ```
               * \@type("string") propertyName: string;
               * ```
               *
               * @example You can provide the "manual" option if you'd like to manually control your patches via .setDirty().
               * ```
               * \@type("string", { manual: true })
               * ```
               */
              function type(type, options) {
                if (options === void 0) {
                  options = {};
                }
                return function (target, field) {
                  var context = options.context || globalContext;
                  var constructor = target.constructor;
                  constructor._context = context;
                  if (!type) {
                    throw new Error("".concat(constructor.name, ": @type() reference provided for \"").concat(field, "\" is undefined. Make sure you don't have any circular dependencies."));
                  }
                  /*
                   * static schema
                   */
                  if (!context.has(constructor)) {
                    context.add(constructor);
                  }
                  var definition = constructor._definition;
                  definition.addField(field, type);
                  /**
                   * skip if descriptor already exists for this field (`@deprecated()`)
                   */
                  if (definition.descriptors[field]) {
                    if (definition.deprecated[field]) {
                      // do not create accessors for deprecated properties.
                      return;
                    } else {
                      // trying to define same property multiple times across inheritance.
                      // https://github.com/colyseus/colyseus-unity3d/issues/131#issuecomment-814308572
                      try {
                        throw new Error("@colyseus/schema: Duplicate '".concat(field, "' definition on '").concat(constructor.name, "'.\nCheck @type() annotation"));
                      } catch (e) {
                        var definitionAtLine = e.stack.split("\n")[4].trim();
                        throw new Error("".concat(e.message, " ").concat(definitionAtLine));
                      }
                    }
                  }
                  var isArray = ArraySchema.is(type);
                  var isMap = !isArray && MapSchema.is(type);
                  // TODO: refactor me.
                  // Allow abstract intermediary classes with no fields to be serialized
                  // (See "should support an inheritance with a Schema type without fields" test)
                  if (typeof type !== "string" && !Schema.is(type)) {
                    var childType = Object.values(type)[0];
                    if (typeof childType !== "string" && !context.has(childType)) {
                      context.add(childType);
                    }
                  }
                  if (options.manual) {
                    // do not declare getter/setter descriptor
                    definition.descriptors[field] = {
                      enumerable: true,
                      configurable: true,
                      writable: true
                    };
                    return;
                  }
                  var fieldCached = "_".concat(field);
                  definition.descriptors[fieldCached] = {
                    enumerable: false,
                    configurable: false,
                    writable: true
                  };
                  definition.descriptors[field] = {
                    get: function () {
                      return this[fieldCached];
                    },
                    set: function (value) {
                      /**
                       * Create Proxy for array or map items
                       */
                      // skip if value is the same as cached.
                      if (value === this[fieldCached]) {
                        return;
                      }
                      if (value !== undefined && value !== null) {
                        // automaticallty transform Array into ArraySchema
                        if (isArray && !(value instanceof ArraySchema)) {
                          value = new (ArraySchema.bind.apply(ArraySchema, __spreadArray([void 0], value, false)))();
                        }
                        // automaticallty transform Map into MapSchema
                        if (isMap && !(value instanceof MapSchema)) {
                          value = new MapSchema(value);
                        }
                        // try to turn provided structure into a Proxy
                        if (value['$proxy'] === undefined) {
                          if (isMap) {
                            value = getMapProxy(value);
                          } else if (isArray) {
                            value = getArrayProxy(value);
                          }
                        }
                        // flag the change for encoding.
                        this.$changes.change(field);
                        //
                        // call setParent() recursively for this and its child
                        // structures.
                        //
                        if (value['$changes']) {
                          value['$changes'].setParent(this, this.$changes.root, this._definition.indexes[field]);
                        }
                      } else if (this[fieldCached]) {
                        //
                        // Setting a field to `null` or `undefined` will delete it.
                        //
                        this.$changes.delete(field);
                      }
                      this[fieldCached] = value;
                    },
                    enumerable: true,
                    configurable: true
                  };
                };
              }
              /**
               * `@filter()` decorator for defining data filters per client
               */
              function filter(cb) {
                return function (target, field) {
                  var constructor = target.constructor;
                  var definition = constructor._definition;
                  if (definition.addFilter(field, cb)) {
                    constructor._context.useFilters = true;
                  }
                };
              }
              function filterChildren(cb) {
                return function (target, field) {
                  var constructor = target.constructor;
                  var definition = constructor._definition;
                  if (definition.addChildrenFilter(field, cb)) {
                    constructor._context.useFilters = true;
                  }
                };
              }
              /**
               * `@deprecated()` flag a field as deprecated.
               * The previous `@type()` annotation should remain along with this one.
               */
              function deprecated(throws) {
                if (throws === void 0) {
                  throws = true;
                }
                return function (target, field) {
                  var constructor = target.constructor;
                  var definition = constructor._definition;
                  definition.deprecated[field] = true;
                  if (throws) {
                    definition.descriptors[field] = {
                      get: function () {
                        throw new Error("".concat(field, " is deprecated."));
                      },
                      set: function (value) {},
                      enumerable: false,
                      configurable: true
                    };
                  }
                };
              }
              function defineTypes(target, fields, options) {
                if (options === void 0) {
                  options = {};
                }
                if (!options.context) {
                  options.context = target._context || options.context || globalContext;
                }
                for (var field in fields) {
                  type(fields[field], options)(target.prototype, field);
                }
                return target;
              }

              /**
               * Copyright (c) 2018 Endel Dreyer
               * Copyright (c) 2014 Ion Drive Software Ltd.
               *
               * Permission is hereby granted, free of charge, to any person obtaining a copy
               * of this software and associated documentation files (the "Software"), to deal
               * in the Software without restriction, including without limitation the rights
               * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
               * copies of the Software, and to permit persons to whom the Software is
               * furnished to do so, subject to the following conditions:
               *
               * The above copyright notice and this permission notice shall be included in all
               * copies or substantial portions of the Software.
               *
               * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
               * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
               * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
               * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
               * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
               * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
               * SOFTWARE
               */
              /**
               * msgpack implementation highly based on notepack.io
               * https://github.com/darrachequesne/notepack
               */
              function utf8Length(str) {
                var c = 0,
                  length = 0;
                for (var i = 0, l = str.length; i < l; i++) {
                  c = str.charCodeAt(i);
                  if (c < 0x80) {
                    length += 1;
                  } else if (c < 0x800) {
                    length += 2;
                  } else if (c < 0xd800 || c >= 0xe000) {
                    length += 3;
                  } else {
                    i++;
                    length += 4;
                  }
                }
                return length;
              }
              function utf8Write(view, offset, str) {
                var c = 0;
                for (var i = 0, l = str.length; i < l; i++) {
                  c = str.charCodeAt(i);
                  if (c < 0x80) {
                    view[offset++] = c;
                  } else if (c < 0x800) {
                    view[offset++] = 0xc0 | c >> 6;
                    view[offset++] = 0x80 | c & 0x3f;
                  } else if (c < 0xd800 || c >= 0xe000) {
                    view[offset++] = 0xe0 | c >> 12;
                    view[offset++] = 0x80 | c >> 6 & 0x3f;
                    view[offset++] = 0x80 | c & 0x3f;
                  } else {
                    i++;
                    c = 0x10000 + ((c & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);
                    view[offset++] = 0xf0 | c >> 18;
                    view[offset++] = 0x80 | c >> 12 & 0x3f;
                    view[offset++] = 0x80 | c >> 6 & 0x3f;
                    view[offset++] = 0x80 | c & 0x3f;
                  }
                }
              }
              function int8$1(bytes, value) {
                bytes.push(value & 255);
              }
              function uint8$1(bytes, value) {
                bytes.push(value & 255);
              }
              function int16$1(bytes, value) {
                bytes.push(value & 255);
                bytes.push(value >> 8 & 255);
              }
              function uint16$1(bytes, value) {
                bytes.push(value & 255);
                bytes.push(value >> 8 & 255);
              }
              function int32$1(bytes, value) {
                bytes.push(value & 255);
                bytes.push(value >> 8 & 255);
                bytes.push(value >> 16 & 255);
                bytes.push(value >> 24 & 255);
              }
              function uint32$1(bytes, value) {
                var b4 = value >> 24;
                var b3 = value >> 16;
                var b2 = value >> 8;
                var b1 = value;
                bytes.push(b1 & 255);
                bytes.push(b2 & 255);
                bytes.push(b3 & 255);
                bytes.push(b4 & 255);
              }
              function int64$1(bytes, value) {
                var high = Math.floor(value / Math.pow(2, 32));
                var low = value >>> 0;
                uint32$1(bytes, low);
                uint32$1(bytes, high);
              }
              function uint64$1(bytes, value) {
                var high = value / Math.pow(2, 32) >> 0;
                var low = value >>> 0;
                uint32$1(bytes, low);
                uint32$1(bytes, high);
              }
              function float32$1(bytes, value) {
                writeFloat32(bytes, value);
              }
              function float64$1(bytes, value) {
                writeFloat64(bytes, value);
              }
              var _int32$1 = new Int32Array(2);
              var _float32$1 = new Float32Array(_int32$1.buffer);
              var _float64$1 = new Float64Array(_int32$1.buffer);
              function writeFloat32(bytes, value) {
                _float32$1[0] = value;
                int32$1(bytes, _int32$1[0]);
              }
              function writeFloat64(bytes, value) {
                _float64$1[0] = value;
                int32$1(bytes, _int32$1[0]);
                int32$1(bytes, _int32$1[1]);
              }
              function boolean$1(bytes, value) {
                return uint8$1(bytes, value ? 1 : 0);
              }
              function string$1(bytes, value) {
                // encode `null` strings as empty.
                if (!value) {
                  value = "";
                }
                var length = utf8Length(value);
                var size = 0;
                // fixstr
                if (length < 0x20) {
                  bytes.push(length | 0xa0);
                  size = 1;
                }
                // str 8
                else if (length < 0x100) {
                  bytes.push(0xd9);
                  uint8$1(bytes, length);
                  size = 2;
                }
                // str 16
                else if (length < 0x10000) {
                  bytes.push(0xda);
                  uint16$1(bytes, length);
                  size = 3;
                }
                // str 32
                else if (length < 0x100000000) {
                  bytes.push(0xdb);
                  uint32$1(bytes, length);
                  size = 5;
                } else {
                  throw new Error('String too long');
                }
                utf8Write(bytes, bytes.length, value);
                return size + length;
              }
              function number$1(bytes, value) {
                if (isNaN(value)) {
                  return number$1(bytes, 0);
                } else if (!isFinite(value)) {
                  return number$1(bytes, value > 0 ? Number.MAX_SAFE_INTEGER : -Number.MAX_SAFE_INTEGER);
                } else if (value !== (value | 0)) {
                  bytes.push(0xcb);
                  writeFloat64(bytes, value);
                  return 9;
                  // TODO: encode float 32?
                  // is it possible to differentiate between float32 / float64 here?
                  // // float 32
                  // bytes.push(0xca);
                  // writeFloat32(bytes, value);
                  // return 5;
                }

                if (value >= 0) {
                  // positive fixnum
                  if (value < 0x80) {
                    uint8$1(bytes, value);
                    return 1;
                  }
                  // uint 8
                  if (value < 0x100) {
                    bytes.push(0xcc);
                    uint8$1(bytes, value);
                    return 2;
                  }
                  // uint 16
                  if (value < 0x10000) {
                    bytes.push(0xcd);
                    uint16$1(bytes, value);
                    return 3;
                  }
                  // uint 32
                  if (value < 0x100000000) {
                    bytes.push(0xce);
                    uint32$1(bytes, value);
                    return 5;
                  }
                  // uint 64
                  bytes.push(0xcf);
                  uint64$1(bytes, value);
                  return 9;
                } else {
                  // negative fixnum
                  if (value >= -0x20) {
                    bytes.push(0xe0 | value + 0x20);
                    return 1;
                  }
                  // int 8
                  if (value >= -0x80) {
                    bytes.push(0xd0);
                    int8$1(bytes, value);
                    return 2;
                  }
                  // int 16
                  if (value >= -0x8000) {
                    bytes.push(0xd1);
                    int16$1(bytes, value);
                    return 3;
                  }
                  // int 32
                  if (value >= -0x80000000) {
                    bytes.push(0xd2);
                    int32$1(bytes, value);
                    return 5;
                  }
                  // int 64
                  bytes.push(0xd3);
                  int64$1(bytes, value);
                  return 9;
                }
              }
              var encode = /*#__PURE__*/Object.freeze({
                __proto__: null,
                utf8Write: utf8Write,
                int8: int8$1,
                uint8: uint8$1,
                int16: int16$1,
                uint16: uint16$1,
                int32: int32$1,
                uint32: uint32$1,
                int64: int64$1,
                uint64: uint64$1,
                float32: float32$1,
                float64: float64$1,
                writeFloat32: writeFloat32,
                writeFloat64: writeFloat64,
                boolean: boolean$1,
                string: string$1,
                number: number$1
              });

              /**
               * Copyright (c) 2018 Endel Dreyer
               * Copyright (c) 2014 Ion Drive Software Ltd.
               *
               * Permission is hereby granted, free of charge, to any person obtaining a copy
               * of this software and associated documentation files (the "Software"), to deal
               * in the Software without restriction, including without limitation the rights
               * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
               * copies of the Software, and to permit persons to whom the Software is
               * furnished to do so, subject to the following conditions:
               *
               * The above copyright notice and this permission notice shall be included in all
               * copies or substantial portions of the Software.
               *
               * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
               * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
               * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
               * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
               * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
               * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
               * SOFTWARE
               */
              function utf8Read(bytes, offset, length) {
                var string = '',
                  chr = 0;
                for (var i = offset, end = offset + length; i < end; i++) {
                  var byte = bytes[i];
                  if ((byte & 0x80) === 0x00) {
                    string += String.fromCharCode(byte);
                    continue;
                  }
                  if ((byte & 0xe0) === 0xc0) {
                    string += String.fromCharCode((byte & 0x1f) << 6 | bytes[++i] & 0x3f);
                    continue;
                  }
                  if ((byte & 0xf0) === 0xe0) {
                    string += String.fromCharCode((byte & 0x0f) << 12 | (bytes[++i] & 0x3f) << 6 | (bytes[++i] & 0x3f) << 0);
                    continue;
                  }
                  if ((byte & 0xf8) === 0xf0) {
                    chr = (byte & 0x07) << 18 | (bytes[++i] & 0x3f) << 12 | (bytes[++i] & 0x3f) << 6 | (bytes[++i] & 0x3f) << 0;
                    if (chr >= 0x010000) {
                      // surrogate pair
                      chr -= 0x010000;
                      string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);
                    } else {
                      string += String.fromCharCode(chr);
                    }
                    continue;
                  }
                  console.error('Invalid byte ' + byte.toString(16));
                  // (do not throw error to avoid server/client from crashing due to hack attemps)
                  // throw new Error('Invalid byte ' + byte.toString(16));
                }

                return string;
              }
              function int8(bytes, it) {
                return uint8(bytes, it) << 24 >> 24;
              }
              function uint8(bytes, it) {
                return bytes[it.offset++];
              }
              function int16(bytes, it) {
                return uint16(bytes, it) << 16 >> 16;
              }
              function uint16(bytes, it) {
                return bytes[it.offset++] | bytes[it.offset++] << 8;
              }
              function int32(bytes, it) {
                return bytes[it.offset++] | bytes[it.offset++] << 8 | bytes[it.offset++] << 16 | bytes[it.offset++] << 24;
              }
              function uint32(bytes, it) {
                return int32(bytes, it) >>> 0;
              }
              function float32(bytes, it) {
                return readFloat32(bytes, it);
              }
              function float64(bytes, it) {
                return readFloat64(bytes, it);
              }
              function int64(bytes, it) {
                var low = uint32(bytes, it);
                var high = int32(bytes, it) * Math.pow(2, 32);
                return high + low;
              }
              function uint64(bytes, it) {
                var low = uint32(bytes, it);
                var high = uint32(bytes, it) * Math.pow(2, 32);
                return high + low;
              }
              var _int32 = new Int32Array(2);
              var _float32 = new Float32Array(_int32.buffer);
              var _float64 = new Float64Array(_int32.buffer);
              function readFloat32(bytes, it) {
                _int32[0] = int32(bytes, it);
                return _float32[0];
              }
              function readFloat64(bytes, it) {
                _int32[0] = int32(bytes, it);
                _int32[1] = int32(bytes, it);
                return _float64[0];
              }
              function boolean(bytes, it) {
                return uint8(bytes, it) > 0;
              }
              function string(bytes, it) {
                var prefix = bytes[it.offset++];
                var length;
                if (prefix < 0xc0) {
                  // fixstr
                  length = prefix & 0x1f;
                } else if (prefix === 0xd9) {
                  length = uint8(bytes, it);
                } else if (prefix === 0xda) {
                  length = uint16(bytes, it);
                } else if (prefix === 0xdb) {
                  length = uint32(bytes, it);
                }
                var value = utf8Read(bytes, it.offset, length);
                it.offset += length;
                return value;
              }
              function stringCheck(bytes, it) {
                var prefix = bytes[it.offset];
                return (
                  // fixstr
                  prefix < 0xc0 && prefix > 0xa0 ||
                  // str 8
                  prefix === 0xd9 ||
                  // str 16
                  prefix === 0xda ||
                  // str 32
                  prefix === 0xdb
                );
              }
              function number(bytes, it) {
                var prefix = bytes[it.offset++];
                if (prefix < 0x80) {
                  // positive fixint
                  return prefix;
                } else if (prefix === 0xca) {
                  // float 32
                  return readFloat32(bytes, it);
                } else if (prefix === 0xcb) {
                  // float 64
                  return readFloat64(bytes, it);
                } else if (prefix === 0xcc) {
                  // uint 8
                  return uint8(bytes, it);
                } else if (prefix === 0xcd) {
                  // uint 16
                  return uint16(bytes, it);
                } else if (prefix === 0xce) {
                  // uint 32
                  return uint32(bytes, it);
                } else if (prefix === 0xcf) {
                  // uint 64
                  return uint64(bytes, it);
                } else if (prefix === 0xd0) {
                  // int 8
                  return int8(bytes, it);
                } else if (prefix === 0xd1) {
                  // int 16
                  return int16(bytes, it);
                } else if (prefix === 0xd2) {
                  // int 32
                  return int32(bytes, it);
                } else if (prefix === 0xd3) {
                  // int 64
                  return int64(bytes, it);
                } else if (prefix > 0xdf) {
                  // negative fixint
                  return (0xff - prefix + 1) * -1;
                }
              }
              function numberCheck(bytes, it) {
                var prefix = bytes[it.offset];
                // positive fixint - 0x00 - 0x7f
                // float 32        - 0xca
                // float 64        - 0xcb
                // uint 8          - 0xcc
                // uint 16         - 0xcd
                // uint 32         - 0xce
                // uint 64         - 0xcf
                // int 8           - 0xd0
                // int 16          - 0xd1
                // int 32          - 0xd2
                // int 64          - 0xd3
                return prefix < 0x80 || prefix >= 0xca && prefix <= 0xd3;
              }
              function arrayCheck(bytes, it) {
                return bytes[it.offset] < 0xa0;
                // const prefix = bytes[it.offset] ;
                // if (prefix < 0xa0) {
                //   return prefix;
                // // array
                // } else if (prefix === 0xdc) {
                //   it.offset += 2;
                // } else if (0xdd) {
                //   it.offset += 4;
                // }
                // return prefix;
              }

              function switchStructureCheck(bytes, it) {
                return (
                  // previous byte should be `SWITCH_TO_STRUCTURE`
                  bytes[it.offset - 1] === SWITCH_TO_STRUCTURE && (
                  // next byte should be a number
                  bytes[it.offset] < 0x80 || bytes[it.offset] >= 0xca && bytes[it.offset] <= 0xd3)
                );
              }
              var decode = /*#__PURE__*/Object.freeze({
                __proto__: null,
                int8: int8,
                uint8: uint8,
                int16: int16,
                uint16: uint16,
                int32: int32,
                uint32: uint32,
                float32: float32,
                float64: float64,
                int64: int64,
                uint64: uint64,
                readFloat32: readFloat32,
                readFloat64: readFloat64,
                boolean: boolean,
                string: string,
                stringCheck: stringCheck,
                number: number,
                numberCheck: numberCheck,
                arrayCheck: arrayCheck,
                switchStructureCheck: switchStructureCheck
              });
              var CollectionSchema = /** @class */function () {
                function CollectionSchema(initialValues) {
                  var _this = this;
                  this.$changes = new ChangeTree(this);
                  this.$items = new Map();
                  this.$indexes = new Map();
                  this.$refId = 0;
                  if (initialValues) {
                    initialValues.forEach(function (v) {
                      return _this.add(v);
                    });
                  }
                }
                CollectionSchema.prototype.onAdd = function (callback, triggerAll) {
                  if (triggerAll === void 0) {
                    triggerAll = true;
                  }
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.ADD, callback, triggerAll ? this.$items : undefined);
                };
                CollectionSchema.prototype.onRemove = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.DELETE, callback);
                };
                CollectionSchema.prototype.onChange = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.REPLACE, callback);
                };
                CollectionSchema.is = function (type) {
                  return type['collection'] !== undefined;
                };
                CollectionSchema.prototype.add = function (value) {
                  // set "index" for reference.
                  var index = this.$refId++;
                  var isRef = value['$changes'] !== undefined;
                  if (isRef) {
                    value['$changes'].setParent(this, this.$changes.root, index);
                  }
                  this.$changes.indexes[index] = index;
                  this.$indexes.set(index, index);
                  this.$items.set(index, value);
                  this.$changes.change(index);
                  return index;
                };
                CollectionSchema.prototype.at = function (index) {
                  var key = Array.from(this.$items.keys())[index];
                  return this.$items.get(key);
                };
                CollectionSchema.prototype.entries = function () {
                  return this.$items.entries();
                };
                CollectionSchema.prototype.delete = function (item) {
                  var entries = this.$items.entries();
                  var index;
                  var entry;
                  while (entry = entries.next()) {
                    if (entry.done) {
                      break;
                    }
                    if (item === entry.value[1]) {
                      index = entry.value[0];
                      break;
                    }
                  }
                  if (index === undefined) {
                    return false;
                  }
                  this.$changes.delete(index);
                  this.$indexes.delete(index);
                  return this.$items.delete(index);
                };
                CollectionSchema.prototype.clear = function (changes) {
                  // discard previous operations.
                  this.$changes.discard(true, true);
                  this.$changes.indexes = {};
                  // clear previous indexes
                  this.$indexes.clear();
                  //
                  // When decoding:
                  // - enqueue items for DELETE callback.
                  // - flag child items for garbage collection.
                  //
                  if (changes) {
                    removeChildRefs.call(this, changes);
                  }
                  // clear items
                  this.$items.clear();
                  this.$changes.operation({
                    index: 0,
                    op: exports.OPERATION.CLEAR
                  });
                  // touch all structures until reach root
                  this.$changes.touchParents();
                };
                CollectionSchema.prototype.has = function (value) {
                  return Array.from(this.$items.values()).some(function (v) {
                    return v === value;
                  });
                };
                CollectionSchema.prototype.forEach = function (callbackfn) {
                  var _this = this;
                  this.$items.forEach(function (value, key, _) {
                    return callbackfn(value, key, _this);
                  });
                };
                CollectionSchema.prototype.values = function () {
                  return this.$items.values();
                };
                Object.defineProperty(CollectionSchema.prototype, "size", {
                  get: function () {
                    return this.$items.size;
                  },
                  enumerable: false,
                  configurable: true
                });
                CollectionSchema.prototype.setIndex = function (index, key) {
                  this.$indexes.set(index, key);
                };
                CollectionSchema.prototype.getIndex = function (index) {
                  return this.$indexes.get(index);
                };
                CollectionSchema.prototype.getByIndex = function (index) {
                  return this.$items.get(this.$indexes.get(index));
                };
                CollectionSchema.prototype.deleteByIndex = function (index) {
                  var key = this.$indexes.get(index);
                  this.$items.delete(key);
                  this.$indexes.delete(index);
                };
                CollectionSchema.prototype.toArray = function () {
                  return Array.from(this.$items.values());
                };
                CollectionSchema.prototype.toJSON = function () {
                  var values = [];
                  this.forEach(function (value, key) {
                    values.push(typeof value['toJSON'] === "function" ? value['toJSON']() : value);
                  });
                  return values;
                };
                //
                // Decoding utilities
                //
                CollectionSchema.prototype.clone = function (isDecoding) {
                  var cloned;
                  if (isDecoding) {
                    // client-side
                    cloned = Object.assign(new CollectionSchema(), this);
                  } else {
                    // server-side
                    cloned = new CollectionSchema();
                    this.forEach(function (value) {
                      if (value['$changes']) {
                        cloned.add(value['clone']());
                      } else {
                        cloned.add(value);
                      }
                    });
                  }
                  return cloned;
                };
                return CollectionSchema;
              }();
              var SetSchema = /** @class */function () {
                function SetSchema(initialValues) {
                  var _this = this;
                  this.$changes = new ChangeTree(this);
                  this.$items = new Map();
                  this.$indexes = new Map();
                  this.$refId = 0;
                  if (initialValues) {
                    initialValues.forEach(function (v) {
                      return _this.add(v);
                    });
                  }
                }
                SetSchema.prototype.onAdd = function (callback, triggerAll) {
                  if (triggerAll === void 0) {
                    triggerAll = true;
                  }
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.ADD, callback, triggerAll ? this.$items : undefined);
                };
                SetSchema.prototype.onRemove = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.DELETE, callback);
                };
                SetSchema.prototype.onChange = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.REPLACE, callback);
                };
                SetSchema.is = function (type) {
                  return type['set'] !== undefined;
                };
                SetSchema.prototype.add = function (value) {
                  var _a, _b;
                  // immediatelly return false if value already added.
                  if (this.has(value)) {
                    return false;
                  }
                  // set "index" for reference.
                  var index = this.$refId++;
                  if (value['$changes'] !== undefined) {
                    value['$changes'].setParent(this, this.$changes.root, index);
                  }
                  var operation = (_b = (_a = this.$changes.indexes[index]) === null || _a === void 0 ? void 0 : _a.op) !== null && _b !== void 0 ? _b : exports.OPERATION.ADD;
                  this.$changes.indexes[index] = index;
                  this.$indexes.set(index, index);
                  this.$items.set(index, value);
                  this.$changes.change(index, operation);
                  return index;
                };
                SetSchema.prototype.entries = function () {
                  return this.$items.entries();
                };
                SetSchema.prototype.delete = function (item) {
                  var entries = this.$items.entries();
                  var index;
                  var entry;
                  while (entry = entries.next()) {
                    if (entry.done) {
                      break;
                    }
                    if (item === entry.value[1]) {
                      index = entry.value[0];
                      break;
                    }
                  }
                  if (index === undefined) {
                    return false;
                  }
                  this.$changes.delete(index);
                  this.$indexes.delete(index);
                  return this.$items.delete(index);
                };
                SetSchema.prototype.clear = function (changes) {
                  // discard previous operations.
                  this.$changes.discard(true, true);
                  this.$changes.indexes = {};
                  // clear previous indexes
                  this.$indexes.clear();
                  //
                  // When decoding:
                  // - enqueue items for DELETE callback.
                  // - flag child items for garbage collection.
                  //
                  if (changes) {
                    removeChildRefs.call(this, changes);
                  }
                  // clear items
                  this.$items.clear();
                  this.$changes.operation({
                    index: 0,
                    op: exports.OPERATION.CLEAR
                  });
                  // touch all structures until reach root
                  this.$changes.touchParents();
                };
                SetSchema.prototype.has = function (value) {
                  var values = this.$items.values();
                  var has = false;
                  var entry;
                  while (entry = values.next()) {
                    if (entry.done) {
                      break;
                    }
                    if (value === entry.value) {
                      has = true;
                      break;
                    }
                  }
                  return has;
                };
                SetSchema.prototype.forEach = function (callbackfn) {
                  var _this = this;
                  this.$items.forEach(function (value, key, _) {
                    return callbackfn(value, key, _this);
                  });
                };
                SetSchema.prototype.values = function () {
                  return this.$items.values();
                };
                Object.defineProperty(SetSchema.prototype, "size", {
                  get: function () {
                    return this.$items.size;
                  },
                  enumerable: false,
                  configurable: true
                });
                SetSchema.prototype.setIndex = function (index, key) {
                  this.$indexes.set(index, key);
                };
                SetSchema.prototype.getIndex = function (index) {
                  return this.$indexes.get(index);
                };
                SetSchema.prototype.getByIndex = function (index) {
                  return this.$items.get(this.$indexes.get(index));
                };
                SetSchema.prototype.deleteByIndex = function (index) {
                  var key = this.$indexes.get(index);
                  this.$items.delete(key);
                  this.$indexes.delete(index);
                };
                SetSchema.prototype.toArray = function () {
                  return Array.from(this.$items.values());
                };
                SetSchema.prototype.toJSON = function () {
                  var values = [];
                  this.forEach(function (value, key) {
                    values.push(typeof value['toJSON'] === "function" ? value['toJSON']() : value);
                  });
                  return values;
                };
                //
                // Decoding utilities
                //
                SetSchema.prototype.clone = function (isDecoding) {
                  var cloned;
                  if (isDecoding) {
                    // client-side
                    cloned = Object.assign(new SetSchema(), this);
                  } else {
                    // server-side
                    cloned = new SetSchema();
                    this.forEach(function (value) {
                      if (value['$changes']) {
                        cloned.add(value['clone']());
                      } else {
                        cloned.add(value);
                      }
                    });
                  }
                  return cloned;
                };
                return SetSchema;
              }();
              var ClientState = /** @class */function () {
                function ClientState() {
                  this.refIds = new WeakSet();
                  this.containerIndexes = new WeakMap();
                }
                // containerIndexes = new Map<ChangeTree, Set<number>>();
                ClientState.prototype.addRefId = function (changeTree) {
                  if (!this.refIds.has(changeTree)) {
                    this.refIds.add(changeTree);
                    this.containerIndexes.set(changeTree, new Set());
                  }
                };
                ClientState.get = function (client) {
                  if (client.$filterState === undefined) {
                    client.$filterState = new ClientState();
                  }
                  return client.$filterState;
                };
                return ClientState;
              }();
              var ReferenceTracker = /** @class */function () {
                function ReferenceTracker() {
                  //
                  // Relation of refId => Schema structure
                  // For direct access of structures during decoding time.
                  //
                  this.refs = new Map();
                  this.refCounts = {};
                  this.deletedRefs = new Set();
                  this.nextUniqueId = 0;
                }
                ReferenceTracker.prototype.getNextUniqueId = function () {
                  return this.nextUniqueId++;
                };
                // for decoding
                ReferenceTracker.prototype.addRef = function (refId, ref, incrementCount) {
                  if (incrementCount === void 0) {
                    incrementCount = true;
                  }
                  this.refs.set(refId, ref);
                  if (incrementCount) {
                    this.refCounts[refId] = (this.refCounts[refId] || 0) + 1;
                  }
                };
                // for decoding
                ReferenceTracker.prototype.removeRef = function (refId) {
                  this.refCounts[refId] = this.refCounts[refId] - 1;
                  this.deletedRefs.add(refId);
                };
                ReferenceTracker.prototype.clearRefs = function () {
                  this.refs.clear();
                  this.deletedRefs.clear();
                  this.refCounts = {};
                };
                // for decoding
                ReferenceTracker.prototype.garbageCollectDeletedRefs = function () {
                  var _this = this;
                  this.deletedRefs.forEach(function (refId) {
                    //
                    // Skip active references.
                    //
                    if (_this.refCounts[refId] > 0) {
                      return;
                    }
                    var ref = _this.refs.get(refId);
                    //
                    // Ensure child schema instances have their references removed as well.
                    //
                    if (ref instanceof Schema) {
                      for (var fieldName in ref['_definition'].schema) {
                        if (typeof ref['_definition'].schema[fieldName] !== "string" && ref[fieldName] && ref[fieldName]['$changes']) {
                          _this.removeRef(ref[fieldName]['$changes'].refId);
                        }
                      }
                    } else {
                      var definition = ref['$changes'].parent._definition;
                      var type = definition.schema[definition.fieldsByIndex[ref['$changes'].parentIndex]];
                      if (typeof Object.values(type)[0] === "function") {
                        Array.from(ref.values()).forEach(function (child) {
                          return _this.removeRef(child['$changes'].refId);
                        });
                      }
                    }
                    _this.refs.delete(refId);
                    delete _this.refCounts[refId];
                  });
                  // clear deleted refs.
                  this.deletedRefs.clear();
                };
                return ReferenceTracker;
              }();
              var EncodeSchemaError = /** @class */function (_super) {
                __extends(EncodeSchemaError, _super);
                function EncodeSchemaError() {
                  return _super !== null && _super.apply(this, arguments) || this;
                }
                return EncodeSchemaError;
              }(Error);
              function assertType(value, type, klass, field) {
                var typeofTarget;
                var allowNull = false;
                switch (type) {
                  case "number":
                  case "int8":
                  case "uint8":
                  case "int16":
                  case "uint16":
                  case "int32":
                  case "uint32":
                  case "int64":
                  case "uint64":
                  case "float32":
                  case "float64":
                    typeofTarget = "number";
                    if (isNaN(value)) {
                      console.log("trying to encode \"NaN\" in ".concat(klass.constructor.name, "#").concat(field));
                    }
                    break;
                  case "string":
                    typeofTarget = "string";
                    allowNull = true;
                    break;
                  case "boolean":
                    // boolean is always encoded as true/false based on truthiness
                    return;
                }
                if (typeof value !== typeofTarget && (!allowNull || allowNull && value !== null)) {
                  var foundValue = "'".concat(JSON.stringify(value), "'").concat(value && value.constructor && " (".concat(value.constructor.name, ")") || '');
                  throw new EncodeSchemaError("a '".concat(typeofTarget, "' was expected, but ").concat(foundValue, " was provided in ").concat(klass.constructor.name, "#").concat(field));
                }
              }
              function assertInstanceType(value, type, klass, field) {
                if (!(value instanceof type)) {
                  throw new EncodeSchemaError("a '".concat(type.name, "' was expected, but '").concat(value.constructor.name, "' was provided in ").concat(klass.constructor.name, "#").concat(field));
                }
              }
              function encodePrimitiveType(type, bytes, value, klass, field) {
                assertType(value, type, klass, field);
                var encodeFunc = encode[type];
                if (encodeFunc) {
                  encodeFunc(bytes, value);
                } else {
                  throw new EncodeSchemaError("a '".concat(type, "' was expected, but ").concat(value, " was provided in ").concat(klass.constructor.name, "#").concat(field));
                }
              }
              function decodePrimitiveType(type, bytes, it) {
                return decode[type](bytes, it);
              }
              /**
               * Schema encoder / decoder
               */
              var Schema = /** @class */function () {
                // allow inherited classes to have a constructor
                function Schema() {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                  }
                  // fix enumerability of fields for end-user
                  Object.defineProperties(this, {
                    $changes: {
                      value: new ChangeTree(this, undefined, new ReferenceTracker()),
                      enumerable: false,
                      writable: true
                    },
                    // $listeners: {
                    //     value: undefined,
                    //     enumerable: false,
                    //     writable: true
                    // },
                    $callbacks: {
                      value: undefined,
                      enumerable: false,
                      writable: true
                    }
                  });
                  var descriptors = this._definition.descriptors;
                  if (descriptors) {
                    Object.defineProperties(this, descriptors);
                  }
                  //
                  // Assign initial values
                  //
                  if (args[0]) {
                    this.assign(args[0]);
                  }
                }
                Schema.onError = function (e) {
                  console.error(e);
                };
                Schema.is = function (type) {
                  return type['_definition'] && type['_definition'].schema !== undefined;
                };
                Schema.prototype.onChange = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.REPLACE, callback);
                };
                Schema.prototype.onRemove = function (callback) {
                  return addCallback(this.$callbacks || (this.$callbacks = []), exports.OPERATION.DELETE, callback);
                };
                Schema.prototype.assign = function (props) {
                  Object.assign(this, props);
                  return this;
                };
                Object.defineProperty(Schema.prototype, "_definition", {
                  get: function () {
                    return this.constructor._definition;
                  },
                  enumerable: false,
                  configurable: true
                });
                /**
                 * (Server-side): Flag a property to be encoded for the next patch.
                 * @param instance Schema instance
                 * @param property string representing the property name, or number representing the index of the property.
                 * @param operation OPERATION to perform (detected automatically)
                 */
                Schema.prototype.setDirty = function (property, operation) {
                  this.$changes.change(property, operation);
                };
                /**
                 * Client-side: listen for changes on property.
                 * @param prop the property name
                 * @param callback callback to be triggered on property change
                 * @param immediate trigger immediatelly if property has been already set.
                 */
                Schema.prototype.listen = function (prop, callback, immediate) {
                  var _this = this;
                  if (immediate === void 0) {
                    immediate = true;
                  }
                  if (!this.$callbacks) {
                    this.$callbacks = {};
                  }
                  if (!this.$callbacks[prop]) {
                    this.$callbacks[prop] = [];
                  }
                  this.$callbacks[prop].push(callback);
                  if (immediate && this[prop] !== undefined) {
                    callback(this[prop], undefined);
                  }
                  // return un-register callback.
                  return function () {
                    return spliceOne(_this.$callbacks[prop], _this.$callbacks[prop].indexOf(callback));
                  };
                };
                Schema.prototype.decode = function (bytes, it, ref) {
                  var _a;
                  if (it === void 0) {
                    it = {
                      offset: 0
                    };
                  }
                  if (ref === void 0) {
                    ref = this;
                  }
                  var allChanges = [];
                  var $root = this.$changes.root;
                  var totalBytes = bytes.length;
                  var refId = 0;
                  $root.refs.set(refId, this);
                  while (it.offset < totalBytes) {
                    var byte = bytes[it.offset++];
                    if (byte == SWITCH_TO_STRUCTURE) {
                      refId = number(bytes, it);
                      var nextRef = $root.refs.get(refId);
                      //
                      // Trying to access a reference that haven't been decoded yet.
                      //
                      if (!nextRef) {
                        throw new Error("\"refId\" not found: ".concat(refId));
                      }
                      ref = nextRef;
                      continue;
                    }
                    var changeTree = ref['$changes'];
                    var isSchema = ref['_definition'] !== undefined;
                    var operation = isSchema ? byte >> 6 << 6 // "compressed" index + operation
                    : byte; // "uncompressed" index + operation (array/map items)
                    if (operation === exports.OPERATION.CLEAR) {
                      //
                      // TODO: refactor me!
                      // The `.clear()` method is calling `$root.removeRef(refId)` for
                      // each item inside this collection
                      //
                      ref.clear(allChanges);
                      continue;
                    }
                    var fieldIndex = isSchema ? byte % (operation || 255) // if "REPLACE" operation (0), use 255
                    : number(bytes, it);
                    var fieldName = isSchema ? ref['_definition'].fieldsByIndex[fieldIndex] : "";
                    var type = changeTree.getType(fieldIndex);
                    var value = void 0;
                    var previousValue = void 0;
                    var dynamicIndex = void 0;
                    if (!isSchema) {
                      previousValue = ref['getByIndex'](fieldIndex);
                      if ((operation & exports.OPERATION.ADD) === exports.OPERATION.ADD) {
                        // ADD or DELETE_AND_ADD
                        dynamicIndex = ref instanceof MapSchema ? string(bytes, it) : fieldIndex;
                        ref['setIndex'](fieldIndex, dynamicIndex);
                      } else {
                        // here
                        dynamicIndex = ref['getIndex'](fieldIndex);
                      }
                    } else {
                      previousValue = ref["_".concat(fieldName)];
                    }
                    //
                    // Delete operations
                    //
                    if ((operation & exports.OPERATION.DELETE) === exports.OPERATION.DELETE) {
                      if (operation !== exports.OPERATION.DELETE_AND_ADD) {
                        ref['deleteByIndex'](fieldIndex);
                      }
                      // Flag `refId` for garbage collection.
                      if (previousValue && previousValue['$changes']) {
                        $root.removeRef(previousValue['$changes'].refId);
                      }
                      value = null;
                    }
                    if (fieldName === undefined) {
                      console.warn("@colyseus/schema: definition mismatch");
                      //
                      // keep skipping next bytes until reaches a known structure
                      // by local decoder.
                      //
                      var nextIterator = {
                        offset: it.offset
                      };
                      while (it.offset < totalBytes) {
                        if (switchStructureCheck(bytes, it)) {
                          nextIterator.offset = it.offset + 1;
                          if ($root.refs.has(number(bytes, nextIterator))) {
                            break;
                          }
                        }
                        it.offset++;
                      }
                      continue;
                    } else if (operation === exports.OPERATION.DELETE) ;else if (Schema.is(type)) {
                      var refId_1 = number(bytes, it);
                      value = $root.refs.get(refId_1);
                      if (operation !== exports.OPERATION.REPLACE) {
                        var childType = this.getSchemaType(bytes, it, type);
                        if (!value) {
                          value = this.createTypeInstance(childType);
                          value.$changes.refId = refId_1;
                          if (previousValue) {
                            value.$callbacks = previousValue.$callbacks;
                            // value.$listeners = previousValue.$listeners;
                            if (previousValue['$changes'].refId && refId_1 !== previousValue['$changes'].refId) {
                              $root.removeRef(previousValue['$changes'].refId);
                            }
                          }
                        }
                        $root.addRef(refId_1, value, value !== previousValue);
                      }
                    } else if (typeof type === "string") {
                      //
                      // primitive value (number, string, boolean, etc)
                      //
                      value = decodePrimitiveType(type, bytes, it);
                    } else {
                      var typeDef = getType(Object.keys(type)[0]);
                      var refId_2 = number(bytes, it);
                      var valueRef = $root.refs.has(refId_2) ? previousValue || $root.refs.get(refId_2) : new typeDef.constructor();
                      value = valueRef.clone(true);
                      value.$changes.refId = refId_2;
                      // preserve schema callbacks
                      if (previousValue) {
                        value['$callbacks'] = previousValue['$callbacks'];
                        if (previousValue['$changes'].refId && refId_2 !== previousValue['$changes'].refId) {
                          $root.removeRef(previousValue['$changes'].refId);
                          //
                          // Trigger onRemove if structure has been replaced.
                          //
                          var entries = previousValue.entries();
                          var iter = void 0;
                          while ((iter = entries.next()) && !iter.done) {
                            var key = (_a = iter.value, _a[0]),
                              value_1 = _a[1];
                            allChanges.push({
                              refId: refId_2,
                              op: exports.OPERATION.DELETE,
                              field: key,
                              value: undefined,
                              previousValue: value_1
                            });
                          }
                        }
                      }
                      $root.addRef(refId_2, value, valueRef !== previousValue);
                    }
                    if (value !== null && value !== undefined) {
                      if (value['$changes']) {
                        value['$changes'].setParent(changeTree.ref, changeTree.root, fieldIndex);
                      }
                      if (ref instanceof Schema) {
                        ref[fieldName] = value;
                        // ref[`_${fieldName}`] = value;
                      } else if (ref instanceof MapSchema) {
                        // const key = ref['$indexes'].get(field);
                        var key = dynamicIndex;
                        // ref.set(key, value);
                        ref['$items'].set(key, value);
                        ref['$changes'].allChanges.add(fieldIndex);
                      } else if (ref instanceof ArraySchema) {
                        // const key = ref['$indexes'][field];
                        // console.log("SETTING FOR ArraySchema =>", { field, key, value });
                        // ref[key] = value;
                        ref.setAt(fieldIndex, value);
                      } else if (ref instanceof CollectionSchema) {
                        var index = ref.add(value);
                        ref['setIndex'](fieldIndex, index);
                      } else if (ref instanceof SetSchema) {
                        var index = ref.add(value);
                        if (index !== false) {
                          ref['setIndex'](fieldIndex, index);
                        }
                      }
                    }
                    if (previousValue !== value) {
                      allChanges.push({
                        refId: refId,
                        op: operation,
                        field: fieldName,
                        dynamicIndex: dynamicIndex,
                        value: value,
                        previousValue: previousValue
                      });
                    }
                  }
                  this._triggerChanges(allChanges);
                  // drop references of unused schemas
                  $root.garbageCollectDeletedRefs();
                  return allChanges;
                };
                Schema.prototype.encode = function (encodeAll, bytes, useFilters) {
                  if (encodeAll === void 0) {
                    encodeAll = false;
                  }
                  if (bytes === void 0) {
                    bytes = [];
                  }
                  if (useFilters === void 0) {
                    useFilters = false;
                  }
                  var rootChangeTree = this.$changes;
                  var refIdsVisited = new WeakSet();
                  var changeTrees = [rootChangeTree];
                  var numChangeTrees = 1;
                  for (var i = 0; i < numChangeTrees; i++) {
                    var changeTree = changeTrees[i];
                    var ref = changeTree.ref;
                    var isSchema = ref instanceof Schema;
                    // Generate unique refId for the ChangeTree.
                    changeTree.ensureRefId();
                    // mark this ChangeTree as visited.
                    refIdsVisited.add(changeTree);
                    // root `refId` is skipped.
                    if (changeTree !== rootChangeTree && (changeTree.changed || encodeAll)) {
                      uint8$1(bytes, SWITCH_TO_STRUCTURE);
                      number$1(bytes, changeTree.refId);
                    }
                    var changes = encodeAll ? Array.from(changeTree.allChanges) : Array.from(changeTree.changes.values());
                    for (var j = 0, cl = changes.length; j < cl; j++) {
                      var operation = encodeAll ? {
                        op: exports.OPERATION.ADD,
                        index: changes[j]
                      } : changes[j];
                      var fieldIndex = operation.index;
                      var field = isSchema ? ref['_definition'].fieldsByIndex && ref['_definition'].fieldsByIndex[fieldIndex] : fieldIndex;
                      // cache begin index if `useFilters`
                      var beginIndex = bytes.length;
                      // encode field index + operation
                      if (operation.op !== exports.OPERATION.TOUCH) {
                        if (isSchema) {
                          //
                          // Compress `fieldIndex` + `operation` into a single byte.
                          // This adds a limitaion of 64 fields per Schema structure
                          //
                          uint8$1(bytes, fieldIndex | operation.op);
                        } else {
                          uint8$1(bytes, operation.op);
                          // custom operations
                          if (operation.op === exports.OPERATION.CLEAR) {
                            continue;
                          }
                          // indexed operations
                          number$1(bytes, fieldIndex);
                        }
                      }
                      //
                      // encode "alias" for dynamic fields (maps)
                      //
                      if (!isSchema && (operation.op & exports.OPERATION.ADD) == exports.OPERATION.ADD // ADD or DELETE_AND_ADD
                      ) {
                        if (ref instanceof MapSchema) {
                          //
                          // MapSchema dynamic key
                          //
                          var dynamicIndex = changeTree.ref['$indexes'].get(fieldIndex);
                          string$1(bytes, dynamicIndex);
                        }
                      }
                      if (operation.op === exports.OPERATION.DELETE) {
                        //
                        // TODO: delete from filter cache data.
                        //
                        // if (useFilters) {
                        //     delete changeTree.caches[fieldIndex];
                        // }
                        continue;
                      }
                      // const type = changeTree.childType || ref._schema[field];
                      var type = changeTree.getType(fieldIndex);
                      // const type = changeTree.getType(fieldIndex);
                      var value = changeTree.getValue(fieldIndex);
                      // Enqueue ChangeTree to be visited
                      if (value && value['$changes'] && !refIdsVisited.has(value['$changes'])) {
                        changeTrees.push(value['$changes']);
                        value['$changes'].ensureRefId();
                        numChangeTrees++;
                      }
                      if (operation.op === exports.OPERATION.TOUCH) {
                        continue;
                      }
                      if (Schema.is(type)) {
                        assertInstanceType(value, type, ref, field);
                        //
                        // Encode refId for this instance.
                        // The actual instance is going to be encoded on next `changeTree` iteration.
                        //
                        number$1(bytes, value.$changes.refId);
                        // Try to encode inherited TYPE_ID if it's an ADD operation.
                        if ((operation.op & exports.OPERATION.ADD) === exports.OPERATION.ADD) {
                          this.tryEncodeTypeId(bytes, type, value.constructor);
                        }
                      } else if (typeof type === "string") {
                        //
                        // Primitive values
                        //
                        encodePrimitiveType(type, bytes, value, ref, field);
                      } else {
                        //
                        // Custom type (MapSchema, ArraySchema, etc)
                        //
                        var definition = getType(Object.keys(type)[0]);
                        //
                        // ensure a ArraySchema has been provided
                        //
                        assertInstanceType(ref["_".concat(field)], definition.constructor, ref, field);
                        //
                        // Encode refId for this instance.
                        // The actual instance is going to be encoded on next `changeTree` iteration.
                        //
                        number$1(bytes, value.$changes.refId);
                      }
                      if (useFilters) {
                        // cache begin / end index
                        changeTree.cache(fieldIndex, bytes.slice(beginIndex));
                      }
                    }
                    if (!encodeAll && !useFilters) {
                      changeTree.discard();
                    }
                  }
                  return bytes;
                };
                Schema.prototype.encodeAll = function (useFilters) {
                  return this.encode(true, [], useFilters);
                };
                Schema.prototype.applyFilters = function (client, encodeAll) {
                  var _a, _b;
                  if (encodeAll === void 0) {
                    encodeAll = false;
                  }
                  var root = this;
                  var refIdsDissallowed = new Set();
                  var $filterState = ClientState.get(client);
                  var changeTrees = [this.$changes];
                  var numChangeTrees = 1;
                  var filteredBytes = [];
                  var _loop_1 = function (i) {
                    var changeTree = changeTrees[i];
                    if (refIdsDissallowed.has(changeTree.refId)) {
                      return "continue";
                    }
                    var ref = changeTree.ref;
                    var isSchema = ref instanceof Schema;
                    uint8$1(filteredBytes, SWITCH_TO_STRUCTURE);
                    number$1(filteredBytes, changeTree.refId);
                    var clientHasRefId = $filterState.refIds.has(changeTree);
                    var isEncodeAll = encodeAll || !clientHasRefId;
                    // console.log("REF:", ref.constructor.name);
                    // console.log("Encode all?", isEncodeAll);
                    //
                    // include `changeTree` on list of known refIds by this client.
                    //
                    $filterState.addRefId(changeTree);
                    var containerIndexes = $filterState.containerIndexes.get(changeTree);
                    var changes = isEncodeAll ? Array.from(changeTree.allChanges) : Array.from(changeTree.changes.values());
                    //
                    // WORKAROUND: tries to re-evaluate previously not included @filter() attributes
                    // - see "DELETE a field of Schema" test case.
                    //
                    if (!encodeAll && isSchema && ref._definition.indexesWithFilters) {
                      var indexesWithFilters = ref._definition.indexesWithFilters;
                      indexesWithFilters.forEach(function (indexWithFilter) {
                        if (!containerIndexes.has(indexWithFilter) && changeTree.allChanges.has(indexWithFilter)) {
                          if (isEncodeAll) {
                            changes.push(indexWithFilter);
                          } else {
                            changes.push({
                              op: exports.OPERATION.ADD,
                              index: indexWithFilter
                            });
                          }
                        }
                      });
                    }
                    for (var j = 0, cl = changes.length; j < cl; j++) {
                      var change = isEncodeAll ? {
                        op: exports.OPERATION.ADD,
                        index: changes[j]
                      } : changes[j];
                      // custom operations
                      if (change.op === exports.OPERATION.CLEAR) {
                        uint8$1(filteredBytes, change.op);
                        continue;
                      }
                      var fieldIndex = change.index;
                      //
                      // Deleting fields: encode the operation + field index
                      //
                      if (change.op === exports.OPERATION.DELETE) {
                        //
                        // DELETE operations also need to go through filtering.
                        //
                        // TODO: cache the previous value so we can access the value (primitive or `refId`)
                        // (check against `$filterState.refIds`)
                        //
                        if (isSchema) {
                          uint8$1(filteredBytes, change.op | fieldIndex);
                        } else {
                          uint8$1(filteredBytes, change.op);
                          number$1(filteredBytes, fieldIndex);
                        }
                        continue;
                      }
                      // indexed operation
                      var value = changeTree.getValue(fieldIndex);
                      var type = changeTree.getType(fieldIndex);
                      if (isSchema) {
                        // Is a Schema!
                        var filter = ref._definition.filters && ref._definition.filters[fieldIndex];
                        if (filter && !filter.call(ref, client, value, root)) {
                          if (value && value['$changes']) {
                            refIdsDissallowed.add(value['$changes'].refId);
                          }
                          continue;
                        }
                      } else {
                        // Is a collection! (map, array, etc.)
                        var parent = changeTree.parent;
                        var filter = changeTree.getChildrenFilter();
                        if (filter && !filter.call(parent, client, ref['$indexes'].get(fieldIndex), value, root)) {
                          if (value && value['$changes']) {
                            refIdsDissallowed.add(value['$changes'].refId);
                          }
                          continue;
                        }
                      }
                      // visit child ChangeTree on further iteration.
                      if (value['$changes']) {
                        changeTrees.push(value['$changes']);
                        numChangeTrees++;
                      }
                      //
                      // Copy cached bytes
                      //
                      if (change.op !== exports.OPERATION.TOUCH) {
                        //
                        // TODO: refactor me!
                        //
                        if (change.op === exports.OPERATION.ADD || isSchema) {
                          //
                          // use cached bytes directly if is from Schema type.
                          //
                          filteredBytes.push.apply(filteredBytes, (_a = changeTree.caches[fieldIndex]) !== null && _a !== void 0 ? _a : []);
                          containerIndexes.add(fieldIndex);
                        } else {
                          if (containerIndexes.has(fieldIndex)) {
                            //
                            // use cached bytes if already has the field
                            //
                            filteredBytes.push.apply(filteredBytes, (_b = changeTree.caches[fieldIndex]) !== null && _b !== void 0 ? _b : []);
                          } else {
                            //
                            // force ADD operation if field is not known by this client.
                            //
                            containerIndexes.add(fieldIndex);
                            uint8$1(filteredBytes, exports.OPERATION.ADD);
                            number$1(filteredBytes, fieldIndex);
                            if (ref instanceof MapSchema) {
                              //
                              // MapSchema dynamic key
                              //
                              var dynamicIndex = changeTree.ref['$indexes'].get(fieldIndex);
                              string$1(filteredBytes, dynamicIndex);
                            }
                            if (value['$changes']) {
                              number$1(filteredBytes, value['$changes'].refId);
                            } else {
                              // "encodePrimitiveType" without type checking.
                              // the type checking has been done on the first .encode() call.
                              encode[type](filteredBytes, value);
                            }
                          }
                        }
                      } else if (value['$changes'] && !isSchema) {
                        //
                        // TODO:
                        // - track ADD/REPLACE/DELETE instances on `$filterState`
                        // - do NOT always encode dynamicIndex for MapSchema.
                        //   (If client already has that key, only the first index is necessary.)
                        //
                        uint8$1(filteredBytes, exports.OPERATION.ADD);
                        number$1(filteredBytes, fieldIndex);
                        if (ref instanceof MapSchema) {
                          //
                          // MapSchema dynamic key
                          //
                          var dynamicIndex = changeTree.ref['$indexes'].get(fieldIndex);
                          string$1(filteredBytes, dynamicIndex);
                        }
                        number$1(filteredBytes, value['$changes'].refId);
                      }
                    }
                  };
                  for (var i = 0; i < numChangeTrees; i++) {
                    _loop_1(i);
                  }
                  return filteredBytes;
                };
                Schema.prototype.clone = function () {
                  var _a;
                  var cloned = new this.constructor();
                  var schema = this._definition.schema;
                  for (var field in schema) {
                    if (typeof this[field] === "object" && typeof ((_a = this[field]) === null || _a === void 0 ? void 0 : _a.clone) === "function") {
                      // deep clone
                      cloned[field] = this[field].clone();
                    } else {
                      // primitive values
                      cloned[field] = this[field];
                    }
                  }
                  return cloned;
                };
                Schema.prototype.toJSON = function () {
                  var schema = this._definition.schema;
                  var deprecated = this._definition.deprecated;
                  var obj = {};
                  for (var field in schema) {
                    if (!deprecated[field] && this[field] !== null && typeof this[field] !== "undefined") {
                      obj[field] = typeof this[field]['toJSON'] === "function" ? this[field]['toJSON']() : this["_".concat(field)];
                    }
                  }
                  return obj;
                };
                Schema.prototype.discardAllChanges = function () {
                  this.$changes.discardAll();
                };
                Schema.prototype.getByIndex = function (index) {
                  return this[this._definition.fieldsByIndex[index]];
                };
                Schema.prototype.deleteByIndex = function (index) {
                  this[this._definition.fieldsByIndex[index]] = undefined;
                };
                Schema.prototype.tryEncodeTypeId = function (bytes, type, targetType) {
                  if (type._typeid !== targetType._typeid) {
                    uint8$1(bytes, TYPE_ID);
                    number$1(bytes, targetType._typeid);
                  }
                };
                Schema.prototype.getSchemaType = function (bytes, it, defaultType) {
                  var type;
                  if (bytes[it.offset] === TYPE_ID) {
                    it.offset++;
                    type = this.constructor._context.get(number(bytes, it));
                  }
                  return type || defaultType;
                };
                Schema.prototype.createTypeInstance = function (type) {
                  var instance = new type();
                  // assign root on $changes
                  instance.$changes.root = this.$changes.root;
                  return instance;
                };
                Schema.prototype._triggerChanges = function (changes) {
                  var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                  var uniqueRefIds = new Set();
                  var $refs = this.$changes.root.refs;
                  var _loop_2 = function (i) {
                    var change = changes[i];
                    var refId = change.refId;
                    var ref = $refs.get(refId);
                    var $callbacks = ref['$callbacks'];
                    //
                    // trigger onRemove on child structure.
                    //
                    if ((change.op & exports.OPERATION.DELETE) === exports.OPERATION.DELETE && change.previousValue instanceof Schema) {
                      (_b = (_a = change.previousValue['$callbacks']) === null || _a === void 0 ? void 0 : _a[exports.OPERATION.DELETE]) === null || _b === void 0 ? void 0 : _b.forEach(function (callback) {
                        return callback();
                      });
                    }
                    // no callbacks defined, skip this structure!
                    if (!$callbacks) {
                      return "continue";
                    }
                    if (ref instanceof Schema) {
                      if (!uniqueRefIds.has(refId)) {
                        try {
                          // trigger onChange
                          (_c = $callbacks === null || $callbacks === void 0 ? void 0 : $callbacks[exports.OPERATION.REPLACE]) === null || _c === void 0 ? void 0 : _c.forEach(function (callback) {
                            return callback(changes);
                          });
                        } catch (e) {
                          Schema.onError(e);
                        }
                      }
                      try {
                        if ($callbacks.hasOwnProperty(change.field)) {
                          (_d = $callbacks[change.field]) === null || _d === void 0 ? void 0 : _d.forEach(function (callback) {
                            return callback(change.value, change.previousValue);
                          });
                        }
                      } catch (e) {
                        Schema.onError(e);
                      }
                    } else {
                      // is a collection of items
                      if (change.op === exports.OPERATION.ADD && change.previousValue === undefined) {
                        // triger onAdd
                        (_e = $callbacks[exports.OPERATION.ADD]) === null || _e === void 0 ? void 0 : _e.forEach(function (callback) {
                          var _a;
                          return callback(change.value, (_a = change.dynamicIndex) !== null && _a !== void 0 ? _a : change.field);
                        });
                      } else if (change.op === exports.OPERATION.DELETE) {
                        //
                        // FIXME: `previousValue` should always be available.
                        // ADD + DELETE operations are still encoding DELETE operation.
                        //
                        if (change.previousValue !== undefined) {
                          // triger onRemove
                          (_f = $callbacks[exports.OPERATION.DELETE]) === null || _f === void 0 ? void 0 : _f.forEach(function (callback) {
                            var _a;
                            return callback(change.previousValue, (_a = change.dynamicIndex) !== null && _a !== void 0 ? _a : change.field);
                          });
                        }
                      } else if (change.op === exports.OPERATION.DELETE_AND_ADD) {
                        // triger onRemove
                        if (change.previousValue !== undefined) {
                          (_g = $callbacks[exports.OPERATION.DELETE]) === null || _g === void 0 ? void 0 : _g.forEach(function (callback) {
                            var _a;
                            return callback(change.previousValue, (_a = change.dynamicIndex) !== null && _a !== void 0 ? _a : change.field);
                          });
                        }
                        // triger onAdd
                        (_h = $callbacks[exports.OPERATION.ADD]) === null || _h === void 0 ? void 0 : _h.forEach(function (callback) {
                          var _a;
                          return callback(change.value, (_a = change.dynamicIndex) !== null && _a !== void 0 ? _a : change.field);
                        });
                      }
                      // trigger onChange
                      if (change.value !== change.previousValue) {
                        (_j = $callbacks[exports.OPERATION.REPLACE]) === null || _j === void 0 ? void 0 : _j.forEach(function (callback) {
                          var _a;
                          return callback(change.value, (_a = change.dynamicIndex) !== null && _a !== void 0 ? _a : change.field);
                        });
                      }
                    }
                    uniqueRefIds.add(refId);
                  };
                  for (var i = 0; i < changes.length; i++) {
                    _loop_2(i);
                  }
                };
                Schema._definition = SchemaDefinition.create();
                return Schema;
              }();
              function dumpChanges(schema) {
                var changeTrees = [schema['$changes']];
                var numChangeTrees = 1;
                var dump = {};
                var currentStructure = dump;
                var _loop_1 = function (i) {
                  var changeTree = changeTrees[i];
                  changeTree.changes.forEach(function (change) {
                    var ref = changeTree.ref;
                    var fieldIndex = change.index;
                    var field = ref['_definition'] ? ref['_definition'].fieldsByIndex[fieldIndex] : ref['$indexes'].get(fieldIndex);
                    currentStructure[field] = changeTree.getValue(fieldIndex);
                  });
                };
                for (var i = 0; i < numChangeTrees; i++) {
                  _loop_1(i);
                }
                return dump;
              }
              var reflectionContext = {
                context: new Context()
              };
              /**
               * Reflection
               */
              var ReflectionField = /** @class */function (_super) {
                __extends(ReflectionField, _super);
                function ReflectionField() {
                  return _super !== null && _super.apply(this, arguments) || this;
                }
                __decorate([type("string", reflectionContext)], ReflectionField.prototype, "name", void 0);
                __decorate([type("string", reflectionContext)], ReflectionField.prototype, "type", void 0);
                __decorate([type("number", reflectionContext)], ReflectionField.prototype, "referencedType", void 0);
                return ReflectionField;
              }(Schema);
              var ReflectionType = /** @class */function (_super) {
                __extends(ReflectionType, _super);
                function ReflectionType() {
                  var _this = _super !== null && _super.apply(this, arguments) || this;
                  _this.fields = new ArraySchema();
                  return _this;
                }
                __decorate([type("number", reflectionContext)], ReflectionType.prototype, "id", void 0);
                __decorate([type([ReflectionField], reflectionContext)], ReflectionType.prototype, "fields", void 0);
                return ReflectionType;
              }(Schema);
              var Reflection = /** @class */function (_super) {
                __extends(Reflection, _super);
                function Reflection() {
                  var _this = _super !== null && _super.apply(this, arguments) || this;
                  _this.types = new ArraySchema();
                  return _this;
                }
                Reflection.encode = function (instance) {
                  var rootSchemaType = instance.constructor;
                  var reflection = new Reflection();
                  reflection.rootType = rootSchemaType._typeid;
                  var buildType = function (currentType, schema) {
                    for (var fieldName in schema) {
                      var field = new ReflectionField();
                      field.name = fieldName;
                      var fieldType = void 0;
                      if (typeof schema[fieldName] === "string") {
                        fieldType = schema[fieldName];
                      } else {
                        var type_1 = schema[fieldName];
                        var childTypeSchema = void 0;
                        //
                        // TODO: refactor below.
                        //
                        if (Schema.is(type_1)) {
                          fieldType = "ref";
                          childTypeSchema = schema[fieldName];
                        } else {
                          fieldType = Object.keys(type_1)[0];
                          if (typeof type_1[fieldType] === "string") {
                            fieldType += ":" + type_1[fieldType]; // array:string
                          } else {
                            childTypeSchema = type_1[fieldType];
                          }
                        }
                        field.referencedType = childTypeSchema ? childTypeSchema._typeid : -1;
                      }
                      field.type = fieldType;
                      currentType.fields.push(field);
                    }
                    reflection.types.push(currentType);
                  };
                  var types = rootSchemaType._context.types;
                  for (var typeid in types) {
                    var type_2 = new ReflectionType();
                    type_2.id = Number(typeid);
                    buildType(type_2, types[typeid]._definition.schema);
                  }
                  return reflection.encodeAll();
                };
                Reflection.decode = function (bytes, it) {
                  var context = new Context();
                  var reflection = new Reflection();
                  reflection.decode(bytes, it);
                  var schemaTypes = reflection.types.reduce(function (types, reflectionType) {
                    var schema = /** @class */function (_super) {
                      __extends(_, _super);
                      function _() {
                        return _super !== null && _super.apply(this, arguments) || this;
                      }
                      return _;
                    }(Schema);
                    var typeid = reflectionType.id;
                    types[typeid] = schema;
                    context.add(schema, typeid);
                    return types;
                  }, {});
                  reflection.types.forEach(function (reflectionType) {
                    var schemaType = schemaTypes[reflectionType.id];
                    reflectionType.fields.forEach(function (field) {
                      var _a;
                      if (field.referencedType !== undefined) {
                        var fieldType = field.type;
                        var refType = schemaTypes[field.referencedType];
                        // map or array of primitive type (-1)
                        if (!refType) {
                          var typeInfo = field.type.split(":");
                          fieldType = typeInfo[0];
                          refType = typeInfo[1];
                        }
                        if (fieldType === "ref") {
                          type(refType, {
                            context: context
                          })(schemaType.prototype, field.name);
                        } else {
                          type((_a = {}, _a[fieldType] = refType, _a), {
                            context: context
                          })(schemaType.prototype, field.name);
                        }
                      } else {
                        type(field.type, {
                          context: context
                        })(schemaType.prototype, field.name);
                      }
                    });
                  });
                  var rootType = schemaTypes[reflection.rootType];
                  var rootInstance = new rootType();
                  /**
                   * auto-initialize referenced types on root type
                   * to allow registering listeners immediatelly on client-side
                   */
                  for (var fieldName in rootType._definition.schema) {
                    var fieldType = rootType._definition.schema[fieldName];
                    if (typeof fieldType !== "string") {
                      rootInstance[fieldName] = typeof fieldType === "function" ? new fieldType() // is a schema reference
                      : new (getType(Object.keys(fieldType)[0]).constructor)(); // is a "collection"
                    }
                  }

                  return rootInstance;
                };
                __decorate([type([ReflectionType], reflectionContext)], Reflection.prototype, "types", void 0);
                __decorate([type("number", reflectionContext)], Reflection.prototype, "rootType", void 0);
                return Reflection;
              }(Schema);
              registerType("map", {
                constructor: MapSchema
              });
              registerType("array", {
                constructor: ArraySchema
              });
              registerType("set", {
                constructor: SetSchema
              });
              registerType("collection", {
                constructor: CollectionSchema
              });
              exports.ArraySchema = ArraySchema;
              exports.CollectionSchema = CollectionSchema;
              exports.Context = Context;
              exports.MapSchema = MapSchema;
              exports.Reflection = Reflection;
              exports.ReflectionField = ReflectionField;
              exports.ReflectionType = ReflectionType;
              exports.Schema = Schema;
              exports.SchemaDefinition = SchemaDefinition;
              exports.SetSchema = SetSchema;
              exports.decode = decode;
              exports.defineTypes = defineTypes;
              exports.deprecated = deprecated;
              exports.dumpChanges = dumpChanges;
              exports.encode = encode;
              exports.filter = filter;
              exports.filterChildren = filterChildren;
              exports.hasFilter = hasFilter;
              exports.registerType = registerType;
              exports.type = type;
              Object.defineProperty(exports, '__esModule', {
                value: true
              });
            });
          });
          var Room = /** @class */function () {
            function Room(name, rootSchema) {
              var _this = this;
              // Public signals
              this.onStateChange = createSignal();
              this.onError = createSignal();
              this.onLeave = createSignal();
              this.onJoin = createSignal();
              this.hasJoined = false;
              this.onMessageHandlers = createNanoEvents();
              this.roomId = null;
              this.name = name;
              if (rootSchema) {
                this.serializer = new (getSerializer("schema"))();
                this.rootSchema = rootSchema;
                this.serializer.state = new rootSchema();
              }
              this.onError(function (code, message) {
                var _a;
                return (_a = console.warn) === null || _a === void 0 ? void 0 : _a.call(console, "colyseus.js - onError => (".concat(code, ") ").concat(message));
              });
              this.onLeave(function () {
                return _this.removeAllListeners();
              });
            }
            Object.defineProperty(Room.prototype, "id", {
              // TODO: deprecate me on version 1.0
              get: function () {
                return this.roomId;
              },
              enumerable: false,
              configurable: true
            });
            Room.prototype.connect = function (endpoint, devModeCloseCallback, room // when reconnecting on devMode, re-use previous room intance for handling events.
            ) {
              if (room === void 0) {
                room = this;
              }
              var connection = new Connection();
              room.connection = connection;
              connection.events.onmessage = Room.prototype.onMessageCallback.bind(room);
              connection.events.onclose = function (e) {
                var _a;
                if (!room.hasJoined) {
                  (_a = console.warn) === null || _a === void 0 ? void 0 : _a.call(console, "Room connection was closed unexpectedly (".concat(e.code, "): ").concat(e.reason));
                  room.onError.invoke(e.code, e.reason);
                  return;
                }
                if (e.code === CloseCode.DEVMODE_RESTART && devModeCloseCallback) {
                  devModeCloseCallback();
                } else {
                  room.onLeave.invoke(e.code);
                  room.destroy();
                }
              };
              connection.events.onerror = function (e) {
                var _a;
                (_a = console.warn) === null || _a === void 0 ? void 0 : _a.call(console, "Room, onError (".concat(e.code, "): ").concat(e.reason));
                room.onError.invoke(e.code, e.reason);
              };
              connection.connect(endpoint);
            };
            Room.prototype.leave = function (consented) {
              var _this = this;
              if (consented === void 0) {
                consented = true;
              }
              return new Promise(function (resolve) {
                _this.onLeave(function (code) {
                  return resolve(code);
                });
                if (_this.connection) {
                  if (consented) {
                    _this.connection.send([exports.Protocol.LEAVE_ROOM]);
                  } else {
                    _this.connection.close();
                  }
                } else {
                  _this.onLeave.invoke(CloseCode.CONSENTED);
                }
              });
            };
            Room.prototype.onMessage = function (type, callback) {
              return this.onMessageHandlers.on(this.getMessageHandlerKey(type), callback);
            };
            Room.prototype.send = function (type, message) {
              var initialBytes = [exports.Protocol.ROOM_DATA];
              if (typeof type === "string") {
                umd.encode.string(initialBytes, type);
              } else {
                umd.encode.number(initialBytes, type);
              }
              var arr;
              if (message !== undefined) {
                var encoded = encode(message);
                arr = new Uint8Array(initialBytes.length + encoded.byteLength);
                arr.set(new Uint8Array(initialBytes), 0);
                arr.set(new Uint8Array(encoded), initialBytes.length);
              } else {
                arr = new Uint8Array(initialBytes);
              }
              this.connection.send(arr.buffer);
            };
            Room.prototype.sendBytes = function (type, bytes) {
              var initialBytes = [exports.Protocol.ROOM_DATA_BYTES];
              if (typeof type === "string") {
                umd.encode.string(initialBytes, type);
              } else {
                umd.encode.number(initialBytes, type);
              }
              var arr;
              arr = new Uint8Array(initialBytes.length + (bytes.byteLength || bytes.length));
              arr.set(new Uint8Array(initialBytes), 0);
              arr.set(new Uint8Array(bytes), initialBytes.length);
              this.connection.send(arr.buffer);
            };
            Object.defineProperty(Room.prototype, "state", {
              get: function () {
                return this.serializer.getState();
              },
              enumerable: false,
              configurable: true
            });
            Room.prototype.removeAllListeners = function () {
              this.onJoin.clear();
              this.onStateChange.clear();
              this.onError.clear();
              this.onLeave.clear();
              this.onMessageHandlers.events = {};
            };
            Room.prototype.onMessageCallback = function (event) {
              var bytes = Array.from(new Uint8Array(event.data));
              var code = bytes[0];
              if (code === exports.Protocol.JOIN_ROOM) {
                var offset = 1;
                var reconnectionToken = utf8Read(bytes, offset);
                offset += utf8Length(reconnectionToken);
                this.serializerId = utf8Read(bytes, offset);
                offset += utf8Length(this.serializerId);
                // Instantiate serializer if not locally available.
                if (!this.serializer) {
                  var serializer = getSerializer(this.serializerId);
                  this.serializer = new serializer();
                }
                if (bytes.length > offset && this.serializer.handshake) {
                  this.serializer.handshake(bytes, {
                    offset: offset
                  });
                }
                this.reconnectionToken = "".concat(this.roomId, ":").concat(reconnectionToken);
                this.hasJoined = true;
                this.onJoin.invoke();
                // acknowledge successfull JOIN_ROOM
                this.connection.send([exports.Protocol.JOIN_ROOM]);
              } else if (code === exports.Protocol.ERROR) {
                var it_1 = {
                  offset: 1
                };
                var code_1 = umd.decode.number(bytes, it_1);
                var message = umd.decode.string(bytes, it_1);
                this.onError.invoke(code_1, message);
              } else if (code === exports.Protocol.LEAVE_ROOM) {
                this.leave();
              } else if (code === exports.Protocol.ROOM_DATA_SCHEMA) {
                var it_2 = {
                  offset: 1
                };
                var context_1 = this.serializer.getState().constructor._context;
                var type = context_1.get(umd.decode.number(bytes, it_2));
                var message = new type();
                message.decode(bytes, it_2);
                this.dispatchMessage(type, message);
              } else if (code === exports.Protocol.ROOM_STATE) {
                bytes.shift(); // drop `code` byte
                this.setState(bytes);
              } else if (code === exports.Protocol.ROOM_STATE_PATCH) {
                bytes.shift(); // drop `code` byte
                this.patch(bytes);
              } else if (code === exports.Protocol.ROOM_DATA) {
                var it_3 = {
                  offset: 1
                };
                var type = umd.decode.stringCheck(bytes, it_3) ? umd.decode.string(bytes, it_3) : umd.decode.number(bytes, it_3);
                var message = bytes.length > it_3.offset ? decode(event.data, it_3.offset) : undefined;
                this.dispatchMessage(type, message);
              } else if (code === exports.Protocol.ROOM_DATA_BYTES) {
                var it_4 = {
                  offset: 1
                };
                var type = umd.decode.stringCheck(bytes, it_4) ? umd.decode.string(bytes, it_4) : umd.decode.number(bytes, it_4);
                this.dispatchMessage(type, new Uint8Array(bytes.slice(it_4.offset)));
              }
            };
            Room.prototype.setState = function (encodedState) {
              this.serializer.setState(encodedState);
              this.onStateChange.invoke(this.serializer.getState());
            };
            Room.prototype.patch = function (binaryPatch) {
              this.serializer.patch(binaryPatch);
              this.onStateChange.invoke(this.serializer.getState());
            };
            Room.prototype.dispatchMessage = function (type, message) {
              var _a;
              var messageType = this.getMessageHandlerKey(type);
              if (this.onMessageHandlers.events[messageType]) {
                this.onMessageHandlers.emit(messageType, message);
              } else if (this.onMessageHandlers.events['*']) {
                this.onMessageHandlers.emit('*', type, message);
              } else {
                (_a = console.warn) === null || _a === void 0 ? void 0 : _a.call(console, "colyseus.js: onMessage() not registered for type '".concat(type, "'."));
              }
            };
            Room.prototype.destroy = function () {
              if (this.serializer) {
                this.serializer.teardown();
              }
            };
            Room.prototype.getMessageHandlerKey = function (type) {
              switch (typeof type) {
                // typeof Schema
                case "function":
                  return "$".concat(type._typeid);
                // string
                case "string":
                  return type;
                // number
                case "number":
                  return "i".concat(type);
                default:
                  throw new Error("invalid message type.");
              }
            };
            return Room;
          }();
          function apply(src, tar) {
            tar.headers = src.headers || {};
            tar.statusMessage = src.statusText;
            tar.statusCode = src.status;
            tar.data = src.response;
          }
          function send(method, uri, opts) {
            return new Promise(function (res, rej) {
              opts = opts || {};
              var req = new XMLHttpRequest();
              var k,
                tmp,
                arr,
                str = opts.body;
              var headers = opts.headers || {};

              // IE compatible
              if (opts.timeout) req.timeout = opts.timeout;
              req.ontimeout = req.onerror = function (err) {
                err.timeout = err.type == 'timeout';
                rej(err);
              };
              req.open(method, uri.href || uri);
              req.onload = function () {
                arr = req.getAllResponseHeaders().trim().split(/[\r\n]+/);
                apply(req, req); //=> req.headers

                while (tmp = arr.shift()) {
                  tmp = tmp.split(': ');
                  req.headers[tmp.shift().toLowerCase()] = tmp.join(': ');
                }
                tmp = req.headers['content-type'];
                if (tmp && !!~tmp.indexOf('application/json')) {
                  try {
                    req.data = JSON.parse(req.data, opts.reviver);
                  } catch (err) {
                    apply(req, err);
                    return rej(err);
                  }
                }
                (req.status >= 400 ? rej : res)(req);
              };
              if (typeof FormData < 'u' && str instanceof FormData) ;else if (str && typeof str == 'object') {
                headers['content-type'] = 'application/json';
                str = JSON.stringify(str);
              }
              req.withCredentials = !!opts.withCredentials;
              for (k in headers) {
                req.setRequestHeader(k, headers[k]);
              }
              req.send(str);
            });
          }
          var get = /*#__PURE__*/send.bind(send, 'GET');
          var post = /*#__PURE__*/send.bind(send, 'POST');
          var patch = /*#__PURE__*/send.bind(send, 'PATCH');
          var del = /*#__PURE__*/send.bind(send, 'DELETE');
          var put = /*#__PURE__*/send.bind(send, 'PUT');
          var del_1 = del;
          var get_1 = get;
          var patch_1 = patch;
          var post_1 = post;
          var put_1 = put;
          var send_1 = send;
          var xhr = {
            del: del_1,
            get: get_1,
            patch: patch_1,
            post: post_1,
            put: put_1,
            send: send_1
          };
          var httpie = /*#__PURE__*/_mergeNamespaces({
            __proto__: null,
            'default': xhr,
            del: del_1,
            get: get_1,
            patch: patch_1,
            post: post_1,
            put: put_1,
            send: send_1
          }, [xhr]);
          var HTTP = /** @class */function () {
            function HTTP(client) {
              this.client = client;
            }
            HTTP.prototype.get = function (path, options) {
              if (options === void 0) {
                options = {};
              }
              return this.request("get", path, options);
            };
            HTTP.prototype.post = function (path, options) {
              if (options === void 0) {
                options = {};
              }
              return this.request("post", path, options);
            };
            HTTP.prototype.del = function (path, options) {
              if (options === void 0) {
                options = {};
              }
              return this.request("del", path, options);
            };
            HTTP.prototype.put = function (path, options) {
              if (options === void 0) {
                options = {};
              }
              return this.request("put", path, options);
            };
            HTTP.prototype.request = function (method, path, options) {
              if (options === void 0) {
                options = {};
              }
              return httpie[method](this.client['getHttpEndpoint'](path), this.getOptions(options)).catch(function (e) {
                var _a;
                throw new ServerError(e.statusCode || -1, ((_a = e.data) === null || _a === void 0 ? void 0 : _a.error) || e.statusMessage || e.message || "offline");
              });
            };
            HTTP.prototype.getOptions = function (options) {
              if (this.authToken) {
                if (!options.headers) {
                  options.headers = {};
                }
                options.headers['Authorization'] = "Bearer ".concat(this.authToken);
                options.withCredentials = true;
              }
              return options;
            };
            return HTTP;
          }();

          /// <reference path="../typings/cocos-creator.d.ts" />
          /**
           * We do not assign 'storage' to window.localStorage immediatelly for React
           * Native compatibility. window.localStorage is not present when this module is
           * loaded.
           */
          var storage;
          function getStorage() {
            if (!storage) {
              storage = typeof cc !== 'undefined' && cc.sys && cc.sys.localStorage ? cc.sys.localStorage // compatibility with cocos creator
              : typeof window !== "undefined" && window.localStorage //RN does have window object at this point, but localStorage is not defined
              ? window.localStorage // regular browser environment
              : {
                cache: {},
                setItem: function (key, value) {
                  this.cache[key] = value;
                },
                getItem: function (key) {
                  this.cache[key];
                },
                removeItem: function (key) {
                  delete this.cache[key];
                }
              };
            }
            return storage;
          }
          function setItem(key, value) {
            getStorage().setItem(key, value);
          }
          function removeItem(key) {
            getStorage().removeItem(key);
          }
          function getItem(key, callback) {
            var value = getStorage().getItem(key);
            if (typeof Promise === 'undefined' ||
            // old browsers
            !(value instanceof Promise)) {
              // browser has synchronous return
              callback(value);
            } else {
              // react-native is asynchronous
              value.then(function (id) {
                return callback(id);
              });
            }
          }
          var _Auth__initialized, _Auth__initializationPromise, _Auth__signInWindow, _Auth__events;
          var Auth = /** @class */function () {
            function Auth(http) {
              var _this = this;
              this.http = http;
              this.settings = {
                path: "/auth",
                key: "colyseus-auth-token"
              };
              _Auth__initialized.set(this, false);
              _Auth__initializationPromise.set(this, void 0);
              _Auth__signInWindow.set(this, undefined);
              _Auth__events.set(this, createNanoEvents());
              getItem(this.settings.key, function (token) {
                return _this.token = token;
              });
            }
            Object.defineProperty(Auth.prototype, "token", {
              get: function () {
                return this.http.authToken;
              },
              set: function (token) {
                this.http.authToken = token;
              },
              enumerable: false,
              configurable: true
            });
            Auth.prototype.onChange = function (callback) {
              var _this = this;
              var unbindChange = __classPrivateFieldGet(this, _Auth__events, "f").on("change", callback);
              if (!__classPrivateFieldGet(this, _Auth__initialized, "f")) {
                __classPrivateFieldSet(this, _Auth__initializationPromise, new Promise(function (resolve, reject) {
                  _this.getUserData().then(function (userData) {
                    _this.emitChange(__assign(__assign({}, userData), {
                      token: _this.token
                    }));
                  }).catch(function (e) {
                    // user is not logged in, or service is down
                    _this.emitChange({
                      user: null,
                      token: undefined
                    });
                  }).finally(function () {
                    resolve();
                  });
                }), "f");
              }
              __classPrivateFieldSet(this, _Auth__initialized, true, "f");
              return unbindChange;
            };
            Auth.prototype.getUserData = function () {
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!this.token) return [3 /*break*/, 2];
                      return [4 /*yield*/, this.http.get("".concat(this.settings.path, "/userdata"))];
                    case 1:
                      return [2 /*return*/, _a.sent().data];
                    case 2:
                      throw new Error("missing auth.token");
                  }
                });
              });
            };
            Auth.prototype.registerWithEmailAndPassword = function (email, password, options) {
              return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.http.post("".concat(this.settings.path, "/register"), {
                        body: {
                          email: email,
                          password: password,
                          options: options
                        }
                      })];
                    case 1:
                      data = _a.sent().data;
                      this.emitChange(data);
                      return [2 /*return*/, data];
                  }
                });
              });
            };
            Auth.prototype.signInWithEmailAndPassword = function (email, password) {
              return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.http.post("".concat(this.settings.path, "/login"), {
                        body: {
                          email: email,
                          password: password
                        }
                      })];
                    case 1:
                      data = _a.sent().data;
                      this.emitChange(data);
                      return [2 /*return*/, data];
                  }
                });
              });
            };
            Auth.prototype.signInAnonymously = function (options) {
              return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.http.post("".concat(this.settings.path, "/anonymous"), {
                        body: {
                          options: options
                        }
                      })];
                    case 1:
                      data = _a.sent().data;
                      this.emitChange(data);
                      return [2 /*return*/, data];
                  }
                });
              });
            };
            Auth.prototype.sendPasswordResetEmail = function (email) {
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.http.post("".concat(this.settings.path, "/forgot-password"), {
                        body: {
                          email: email
                        }
                      })];
                    case 1:
                      return [2 /*return*/, _a.sent().data];
                  }
                });
              });
            };
            Auth.prototype.signInWithProvider = function (providerName, settings) {
              if (settings === void 0) {
                settings = {};
              }
              return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                  return [2 /*return*/, new Promise(function (resolve, reject) {
                    var w = settings.width || 480;
                    var h = settings.height || 768;
                    // forward existing token for upgrading
                    var upgradingToken = _this.token ? "?token=".concat(_this.token) : "";
                    // Capitalize first letter of providerName
                    var title = "Login with ".concat(providerName[0].toUpperCase() + providerName.substring(1));
                    var url = _this.http['client']['getHttpEndpoint']("".concat(settings.prefix || "".concat(_this.settings.path, "/provider"), "/").concat(providerName).concat(upgradingToken));
                    var left = screen.width / 2 - w / 2;
                    var top = screen.height / 2 - h / 2;
                    __classPrivateFieldSet(_this, _Auth__signInWindow, window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left), "f");
                    var onMessage = function (event) {
                      // TODO: it is a good idea to check if event.origin can be trusted!
                      // if (event.origin.indexOf(window.location.hostname) === -1) { return; }
                      // require 'user' and 'token' inside received data.
                      if (event.data.user === undefined && event.data.token === undefined) {
                        return;
                      }
                      clearInterval(rejectionChecker);
                      __classPrivateFieldGet(_this, _Auth__signInWindow, "f").close();
                      __classPrivateFieldSet(_this, _Auth__signInWindow, undefined, "f");
                      window.removeEventListener("message", onMessage);
                      if (event.data.error !== undefined) {
                        reject(event.data.error);
                      } else {
                        resolve(event.data);
                        _this.emitChange(event.data);
                      }
                    };
                    var rejectionChecker = setInterval(function () {
                      if (!__classPrivateFieldGet(_this, _Auth__signInWindow, "f") || __classPrivateFieldGet(_this, _Auth__signInWindow, "f").closed) {
                        __classPrivateFieldSet(_this, _Auth__signInWindow, undefined, "f");
                        reject("cancelled");
                        window.removeEventListener("message", onMessage);
                      }
                    }, 200);
                    window.addEventListener("message", onMessage);
                  })];
                });
              });
            };
            Auth.prototype.signOut = function () {
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  this.emitChange({
                    user: null,
                    token: null
                  });
                  return [2 /*return*/];
                });
              });
            };

            Auth.prototype.emitChange = function (authData) {
              if (authData.token !== undefined) {
                this.token = authData.token;
                if (authData.token === null) {
                  removeItem(this.settings.key);
                } else {
                  // store key in localStorage
                  setItem(this.settings.key, authData.token);
                }
              }
              __classPrivateFieldGet(this, _Auth__events, "f").emit("change", authData);
            };
            return Auth;
          }();
          _Auth__initialized = new WeakMap(), _Auth__initializationPromise = new WeakMap(), _Auth__signInWindow = new WeakMap(), _Auth__events = new WeakMap();
          var _a;
          var MatchMakeError = /** @class */function (_super) {
            __extends(MatchMakeError, _super);
            function MatchMakeError(message, code) {
              var _this = _super.call(this, message) || this;
              _this.code = code;
              Object.setPrototypeOf(_this, MatchMakeError.prototype);
              return _this;
            }
            return MatchMakeError;
          }(Error);
          // - React Native does not provide `window.location`
          // - Cocos Creator (Native) does not provide `window.location.hostname`
          var DEFAULT_ENDPOINT = typeof window !== "undefined" && typeof ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.hostname) !== "undefined" ? "".concat(window.location.protocol.replace("http", "ws"), "//").concat(window.location.hostname).concat(window.location.port && ":".concat(window.location.port)) : "ws://127.0.0.1:2567";
          var Client = /** @class */function () {
            function Client(settings) {
              if (settings === void 0) {
                settings = DEFAULT_ENDPOINT;
              }
              if (typeof settings === "string") {
                //
                // endpoint by url
                //
                var url = new URL(settings);
                var secure = url.protocol === "https:" || url.protocol === "wss:";
                var port = Number(url.port || (secure ? 443 : 80));
                this.settings = {
                  hostname: url.hostname,
                  pathname: url.pathname,
                  port: port,
                  secure: secure
                };
              } else {
                //
                // endpoint by settings
                //
                if (settings.port === undefined) {
                  settings.port = settings.secure ? 443 : 80;
                }
                if (settings.pathname === undefined) {
                  settings.pathname = "";
                }
                this.settings = settings;
              }
              // make sure pathname does not end with "/"
              if (this.settings.pathname.endsWith("/")) {
                this.settings.pathname = this.settings.pathname.slice(0, -1);
              }
              this.http = new HTTP(this);
              this.auth = new Auth(this.http);
            }
            Client.prototype.joinOrCreate = function (roomName, options, rootSchema) {
              if (options === void 0) {
                options = {};
              }
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.createMatchMakeRequest('joinOrCreate', roomName, options, rootSchema)];
                    case 1:
                      return [2 /*return*/, _a.sent()];
                  }
                });
              });
            };
            Client.prototype.create = function (roomName, options, rootSchema) {
              if (options === void 0) {
                options = {};
              }
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.createMatchMakeRequest('create', roomName, options, rootSchema)];
                    case 1:
                      return [2 /*return*/, _a.sent()];
                  }
                });
              });
            };
            Client.prototype.join = function (roomName, options, rootSchema) {
              if (options === void 0) {
                options = {};
              }
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.createMatchMakeRequest('join', roomName, options, rootSchema)];
                    case 1:
                      return [2 /*return*/, _a.sent()];
                  }
                });
              });
            };
            Client.prototype.joinById = function (roomId, options, rootSchema) {
              if (options === void 0) {
                options = {};
              }
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.createMatchMakeRequest('joinById', roomId, options, rootSchema)];
                    case 1:
                      return [2 /*return*/, _a.sent()];
                  }
                });
              });
            };
            /**
             * Re-establish connection with a room this client was previously connected to.
             *
             * @param reconnectionToken The `room.reconnectionToken` from previously connected room.
             * @param rootSchema (optional) Concrete root schema definition
             * @returns Promise<Room>
             */
            Client.prototype.reconnect = function (reconnectionToken, rootSchema) {
              return __awaiter(this, void 0, void 0, function () {
                var _a, roomId, token;
                return __generator(this, function (_b) {
                  switch (_b.label) {
                    case 0:
                      if (typeof reconnectionToken === "string" && typeof rootSchema === "string") {
                        throw new Error("DEPRECATED: .reconnect() now only accepts 'reconnectionToken' as argument.\nYou can get this token from previously connected `room.reconnectionToken`");
                      }
                      _a = reconnectionToken.split(":"), roomId = _a[0], token = _a[1];
                      if (!roomId || !token) {
                        throw new Error("Invalid reconnection token format.\nThe format should be roomId:reconnectionToken");
                      }
                      return [4 /*yield*/, this.createMatchMakeRequest('reconnect', roomId, {
                        reconnectionToken: token
                      }, rootSchema)];
                    case 1:
                      return [2 /*return*/, _b.sent()];
                  }
                });
              });
            };
            Client.prototype.getAvailableRooms = function (roomName) {
              if (roomName === void 0) {
                roomName = "";
              }
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.http.get("matchmake/".concat(roomName), {
                        headers: {
                          'Accept': 'application/json'
                        }
                      })];
                    case 1:
                      return [2 /*return*/, _a.sent().data];
                  }
                });
              });
            };
            Client.prototype.consumeSeatReservation = function (response, rootSchema, reuseRoomInstance // used in devMode
            ) {
              return __awaiter(this, void 0, void 0, function () {
                var room, options, targetRoom;
                var _this = this;
                return __generator(this, function (_a) {
                  room = this.createRoom(response.room.name, rootSchema);
                  room.roomId = response.room.roomId;
                  room.sessionId = response.sessionId;
                  options = {
                    sessionId: room.sessionId
                  };
                  // forward "reconnection token" in case of reconnection.
                  if (response.reconnectionToken) {
                    options.reconnectionToken = response.reconnectionToken;
                  }
                  targetRoom = reuseRoomInstance || room;
                  room.connect(this.buildEndpoint(response.room, options), response.devMode && function () {
                    return __awaiter(_this, void 0, void 0, function () {
                      var retryCount, retryMaxRetries, retryReconnection;
                      var _this = this;
                      return __generator(this, function (_a) {
                        console.info("[Colyseus devMode]: ".concat(String.fromCodePoint(0x1F504), " Re-establishing connection with room id '").concat(room.roomId, "'...")); // 🔄
                        retryCount = 0;
                        retryMaxRetries = 8;
                        retryReconnection = function () {
                          return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                              switch (_a.label) {
                                case 0:
                                  retryCount++;
                                  _a.label = 1;
                                case 1:
                                  _a.trys.push([1, 3,, 4]);
                                  return [4 /*yield*/, this.consumeSeatReservation(response, rootSchema, targetRoom)];
                                case 2:
                                  _a.sent();
                                  console.info("[Colyseus devMode]: ".concat(String.fromCodePoint(0x2705), " Successfully re-established connection with room '").concat(room.roomId, "'")); // ✅
                                  return [3 /*break*/, 4];
                                case 3:
                                  _a.sent();
                                  if (retryCount < retryMaxRetries) {
                                    console.info("[Colyseus devMode]: ".concat(String.fromCodePoint(0x1F504), " retrying... (").concat(retryCount, " out of ").concat(retryMaxRetries, ")")); // 🔄
                                    setTimeout(retryReconnection, 2000);
                                  } else {
                                    console.info("[Colyseus devMode]: ".concat(String.fromCodePoint(0x274C), " Failed to reconnect. Is your server running? Please check server logs.")); // ❌
                                  }

                                  return [3 /*break*/, 4];
                                case 4:
                                  return [2 /*return*/];
                              }
                            });
                          });
                        };

                        setTimeout(retryReconnection, 2000);
                        return [2 /*return*/];
                      });
                    });
                  }, targetRoom);
                  return [2 /*return*/, new Promise(function (resolve, reject) {
                    var onError = function (code, message) {
                      return reject(new ServerError(code, message));
                    };
                    targetRoom.onError.once(onError);
                    targetRoom['onJoin'].once(function () {
                      targetRoom.onError.remove(onError);
                      resolve(targetRoom);
                    });
                  })];
                });
              });
            };
            Client.prototype.createMatchMakeRequest = function (method, roomName, options, rootSchema, reuseRoomInstance) {
              if (options === void 0) {
                options = {};
              }
              return __awaiter(this, void 0, void 0, function () {
                var response;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4 /*yield*/, this.http.post("matchmake/".concat(method, "/").concat(roomName), {
                        headers: {
                          'Accept': 'application/json',
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(options)
                      })];
                    case 1:
                      response = _a.sent().data;
                      // FIXME: HTTP class is already handling this as ServerError.
                      if (response.error) {
                        throw new MatchMakeError(response.error, response.code);
                      }
                      // forward reconnection token during "reconnect" methods.
                      if (method === "reconnect") {
                        response.reconnectionToken = options.reconnectionToken;
                      }
                      return [4 /*yield*/, this.consumeSeatReservation(response, rootSchema, reuseRoomInstance)];
                    case 2:
                      return [2 /*return*/, _a.sent()];
                  }
                });
              });
            };
            Client.prototype.createRoom = function (roomName, rootSchema) {
              return new Room(roomName, rootSchema);
            };
            Client.prototype.buildEndpoint = function (room, options) {
              if (options === void 0) {
                options = {};
              }
              var params = [];
              // append provided options
              for (var name_1 in options) {
                if (!options.hasOwnProperty(name_1)) {
                  continue;
                }
                params.push("".concat(name_1, "=").concat(options[name_1]));
              }
              var endpoint = this.settings.secure ? "wss://" : "ws://";
              if (room.publicAddress) {
                endpoint += "".concat(room.publicAddress);
              } else {
                endpoint += "".concat(this.settings.hostname).concat(this.getEndpointPort()).concat(this.settings.pathname);
              }
              return "".concat(endpoint, "/").concat(room.processId, "/").concat(room.roomId, "?").concat(params.join('&'));
            };
            Client.prototype.getHttpEndpoint = function (segments) {
              if (segments === void 0) {
                segments = '';
              }
              var path = segments.startsWith("/") ? segments : "/".concat(segments);
              return "".concat(this.settings.secure ? "https" : "http", "://").concat(this.settings.hostname).concat(this.getEndpointPort()).concat(this.settings.pathname).concat(path);
            };
            Client.prototype.getEndpointPort = function () {
              return this.settings.port !== 80 && this.settings.port !== 443 ? ":".concat(this.settings.port) : "";
            };
            return Client;
          }();
          var SchemaSerializer = /** @class */function () {
            function SchemaSerializer() {}
            SchemaSerializer.prototype.setState = function (rawState) {
              return this.state.decode(rawState);
            };
            SchemaSerializer.prototype.getState = function () {
              return this.state;
            };
            SchemaSerializer.prototype.patch = function (patches) {
              return this.state.decode(patches);
            };
            SchemaSerializer.prototype.teardown = function () {
              var _a, _b;
              (_b = (_a = this.state) === null || _a === void 0 ? void 0 : _a['$changes']) === null || _b === void 0 ? void 0 : _b.root.clearRefs();
            };
            SchemaSerializer.prototype.handshake = function (bytes, it) {
              if (this.state) {
                // TODO: validate client/server definitinos
                var reflection = new umd.Reflection();
                reflection.decode(bytes, it);
              } else {
                // initialize reflected state from server
                this.state = umd.Reflection.decode(bytes, it);
              }
            };
            return SchemaSerializer;
          }();
          var NoneSerializer = /** @class */function () {
            function NoneSerializer() {}
            NoneSerializer.prototype.setState = function (rawState) {};
            NoneSerializer.prototype.getState = function () {
              return null;
            };
            NoneSerializer.prototype.patch = function (patches) {};
            NoneSerializer.prototype.teardown = function () {};
            NoneSerializer.prototype.handshake = function (bytes) {};
            return NoneSerializer;
          }();
          registerSerializer('schema', SchemaSerializer);
          registerSerializer('none', NoneSerializer);
          exports.Auth = Auth;
          exports.Client = Client;
          exports.Room = Room;
          exports.SchemaSerializer = SchemaSerializer;
          exports.registerSerializer = registerSerializer;
          Object.defineProperty(exports, '__esModule', {
            value: true
          });
        });

        // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
        module.exports.Protocol;
        module.exports.ErrorCode;
        module.exports.OPERATION;
        module.exports.ArraySchema;
        module.exports.CollectionSchema;
        module.exports.Context;
        module.exports.MapSchema;
        module.exports.Reflection;
        module.exports.ReflectionField;
        module.exports.ReflectionType;
        module.exports.Schema;
        module.exports.SchemaDefinition;
        module.exports.SetSchema;
        module.exports.decode;
        module.exports.defineTypes;
        module.exports.deprecated;
        module.exports.dumpChanges;
        module.exports.encode;
        module.exports.filter;
        module.exports.filterChildren;
        module.exports.hasFilter;
        module.exports.registerType;
        module.exports.type;
        module.exports.__esModule;
        module.exports.Auth;
        module.exports.Client;
        module.exports.Room;
        module.exports.SchemaSerializer;
        module.exports.registerSerializer;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/colyseus.mjs_cjs=&original=.js", ['./colyseus.js', './cjs-loader.mjs'], function (exports, module) {
  var __cjsMetaURL, loader;
  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      var _setter = {};
      _setter.__cjsMetaURL = module.__cjsMetaURL;
      _setter.default = module.default;
      exports(_setter);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './colyseus.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./colyseus.js', module.meta.url);
      }
      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/EventSystem.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b9d7bkNeKJB7bNv1zgw8xOD", "EventSystem", undefined);
      const EventType = exports('EventType', {});
      class EventSystem {
        constructor() {
          this.subscribers = {};
        }
        publish(event, data) {
          const queue = this.subscribers[event];
          if (!queue) {
            return false;
          }
          for (const cb of queue) {
            cb(data);
          }
          return true;
        }
        subscribe(event, callback) {
          if (!this.subscribers[event]) {
            this.subscribers[event] = [];
          }
          this.subscribers[event].push(callback);

          // Return the callback so we can unsubscribe from it
          // This way we can pass an arrow function
          return callback;
        }
        unsubscribe(event, callback) {
          const subs = this.subscribers[event];
          if (!subs) {
            return;
          }
          if (!callback) {
            this.subscribers[event] = undefined;
          } else {
            this.subscribers[event] = this.subscribers[event].filter(subCb => {
              return subCb !== callback;
            });
          }
        }
      }
      const GlobalEvents = exports('GlobalEvents', new EventSystem());

      /** Usage example */
      // Subscribe
      // const cb = GlobalEvents.subscribe(EventType.INFO_UPDATED, (data) => {
      //  console.log(data); // {data} already inferred as string
      // });

      // Publish
      // GlobalEvents.publish(EventType.INFO_UPDATED, 'February 1st');

      // Unsubscribe
      // GlobalEvents.unsubscribe(EventType.INFO_UPDATED, cb);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoduTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './colyseus.mjs_cjs=&original=.js', './colyseus.js'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "4bf19lkmvVAPLHg8/9SfNjM", "LoduTest", undefined);
      // import { Client, Room } from '../../extensions/Colyseus Multiplayer SDK/runtime/colyseus.js';
      const {
        ccclass,
        property
      } = _decorator;
      let LoduTest = exports('LoduTest', (_dec = ccclass('LoduTest'), _dec(_class = (_class2 = class LoduTest extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "hostname", _descriptor, this);
          _initializerDefineProperty(this, "port", _descriptor2, this);
          _initializerDefineProperty(this, "useSSL", _descriptor3, this);
          this.client = void 0;
          this.room = void 0;
        }
        start() {
          // Instantiate Colyseus Client
          // connects into (ws|wss)://hostname[:port]
          this.client = new _cjsExports.Client(`${this.useSSL ? "wss" : "ws"}://${this.hostname}${[443, 80].includes(this.port) || this.useSSL ? "" : `:${this.port}`}`);
          console.log('client', this.client);
        }
        JoinRoom() {
          // Join or create the "my_room" room
          this.client.joinOrCreate("classic").then(room => {
            console.log("Joined successfully!", room);

            // Listen for server messages
            room.onMessage("playerMoved", message => {
              console.log(`${message.id} moved to (${message.x}, ${message.y})`);
            });

            // Store room reference for later use
            this.room = room;
          }).catch(err => {
            console.error("Join failed:", err);
          });
        }
        update(deltaTime) {}
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "hostname", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return "localhost";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "port", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 2567;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "useSSL", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return false;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LudoConfig.ts", ['cc'], function (exports) {
  var cclegacy, color;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      color = module.color;
    }],
    execute: function () {
      cclegacy._RF.push({}, "48916a5q/hIXpnhDwE+Sj3Y", "LudoConfig", undefined);
      const LudoConfig = exports('LudoConfig', {
        // sv_hostname: "localhost",
        // sv_useSSL: false,
        sv_hostname: "sg-sgp-5b483957.colyseus.cloud",
        sv_useSSL: true,
        sv_port: 2567,
        BotEnable: false,
        finalGoalIndex: 5,
        //5 or 6?
        maxTiles: 52,
        initialPosition: [1, 14, 27, 40],
        protectedPos: [9, 22, 35, 48],
        goalPosition: [51, 12, 25, 38],
        mergeProtectedPos: [
        //Merge initial position and protected Pos
        1, 9, 14, 22, 27, 35, 40, 48],
        colorsPlayer: [color("fa0000"), color("005cff"), color("FF00FF"), color("00a708")],
        playerSkin: ['Red', 'Blue', 'Yellow', 'Green']
      });
      let PawnTeam = exports('PawnTeam', /*#__PURE__*/function (PawnTeam) {
        PawnTeam[PawnTeam["Red"] = 0] = "Red";
        PawnTeam[PawnTeam["Blue"] = 1] = "Blue";
        PawnTeam[PawnTeam["Purple"] = 2] = "Purple";
        PawnTeam[PawnTeam["Green"] = 3] = "Green";
        return PawnTeam;
      }({}));
      let GameEvent = exports('GameEvent', /*#__PURE__*/function (GameEvent) {
        GameEvent[GameEvent["StartGame"] = 0] = "StartGame";
        GameEvent[GameEvent["StartTurn"] = 1] = "StartTurn";
        GameEvent[GameEvent["RoolDice"] = 2] = "RoolDice";
        GameEvent[GameEvent["MovePawn"] = 3] = "MovePawn";
        GameEvent[GameEvent["UseSkill"] = 4] = "UseSkill";
        GameEvent[GameEvent["DiceRolled"] = 20] = "DiceRolled";
        GameEvent[GameEvent["Move"] = 21] = "Move";
        GameEvent[GameEvent["Killed"] = 22] = "Killed";
        GameEvent[GameEvent["SkipTurn"] = 100] = "SkipTurn";
        GameEvent[GameEvent["BotAction"] = 101] = "BotAction";
        GameEvent[GameEvent["GameState"] = 102] = "GameState";
        return GameEvent;
      }({})); //cheat, todo remove
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LudoGameManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LudoPos.ts', './LudoPlayer.ts', './colyseus.mjs_cjs=&original=.js', './LudoConfig.ts', './LudoPawn.ts', './LudoWaitingRoom.ts', './LudoLobby.ts', './UserData.ts', './SoundController.ts', './colyseus.js'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, EditBox, Sprite, SpriteFrame, Animation, _decorator, Component, js, LudoPos, LudoPlayer, LudoConfig, GameEvent, LudoPawn, LudoWaitingRoom, LudoLobby, UserData, SoundController, EnumSound, _cjsExports;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      EditBox = module.EditBox;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Animation = module.Animation;
      _decorator = module._decorator;
      Component = module.Component;
      js = module.js;
    }, function (module) {
      LudoPos = module.LudoPos;
    }, function (module) {
      LudoPlayer = module.LudoPlayer;
    }, null, function (module) {
      LudoConfig = module.LudoConfig;
      GameEvent = module.GameEvent;
    }, function (module) {
      LudoPawn = module.LudoPawn;
    }, function (module) {
      LudoWaitingRoom = module.LudoWaitingRoom;
    }, function (module) {
      LudoLobby = module.LudoLobby;
    }, function (module) {
      UserData = module.UserData;
    }, function (module) {
      SoundController = module.SoundController;
      EnumSound = module.EnumSound;
    }, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;
      cclegacy._RF.push({}, "3bcf254aFdJMpPriWs9FSKS", "LudoGameManager", undefined);
      const {
        ccclass,
        property
      } = _decorator;
      let LudoGameManager = exports('LudoGameManager', (_dec = ccclass('LudoGameManager'), _dec2 = property(LudoLobby), _dec3 = property(LudoWaitingRoom), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(EditBox), _dec11 = property(Sprite), _dec12 = property(SpriteFrame), _dec13 = property(Sprite), _dec14 = property(SpriteFrame), _dec15 = property(Node), _dec16 = property(Animation), _dec17 = property(Animation), _dec(_class = (_class2 = class LudoGameManager extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "ui_Lobby", _descriptor, this);
          _initializerDefineProperty(this, "uiWaitingRoom", _descriptor2, this);
          _initializerDefineProperty(this, "ludoPosHolder_mainboard", _descriptor3, this);
          _initializerDefineProperty(this, "ludoPosHolder_Goal", _descriptor4, this);
          _initializerDefineProperty(this, "ludoPlayersHolder", _descriptor5, this);
          _initializerDefineProperty(this, "ludoPosHolder_Home", _descriptor6, this);
          _initializerDefineProperty(this, "LudoPawnHolder", _descriptor7, this);
          _initializerDefineProperty(this, "boardNode", _descriptor8, this);
          _initializerDefineProperty(this, "diceCheatEditBox", _descriptor9, this);
          _initializerDefineProperty(this, "homeSprites", _descriptor10, this);
          _initializerDefineProperty(this, "homeSpriteFrames", _descriptor11, this);
          _initializerDefineProperty(this, "diceSprite", _descriptor12, this);
          _initializerDefineProperty(this, "diceSpriteFrames", _descriptor13, this);
          _initializerDefineProperty(this, "diceGlow", _descriptor14, this);
          _initializerDefineProperty(this, "diceBtnAnimation", _descriptor15, this);
          _initializerDefineProperty(this, "diceAnim", _descriptor16, this);
          this.ludoPos_mains = [];
          this.ludoPos_Goals = [];
          this.ludoPlayers = [];
          this.ludoPos_Homes = [];
          this.client = void 0;
          this.room = void 0;
          this.gameData = null;
          this.playerId = void 0;
          this.offsetPlayer = 0;
          this.offsetBoard = 0;
          this.lastPawnMove = null;
          this.lastDiceRoll = null;
        }
        start() {
          this.playerId = js.IDGenerator.global.getNewId();
          this.ui_Lobby.show(this);
          for (let i = 0; i < this.ludoPosHolder_mainboard.children.length; i++) {
            this.ludoPos_mains.push(this.ludoPosHolder_mainboard.children[i].getComponent(LudoPos));
          }
          for (let i = 0; i < this.ludoPosHolder_Goal.children.length; i++) {
            let a = [];
            for (let j = 0; j < this.ludoPosHolder_Goal.children[i].children.length; j++) {
              a.push(this.ludoPosHolder_Goal.children[i].children[j].getComponent(LudoPos));
            }
            this.ludoPos_Goals.push(a);
          }
          for (let i = 0; i < this.ludoPosHolder_Home.children.length; i++) {
            let a = [];
            for (let j = 0; j < this.ludoPosHolder_Home.children[i].children.length; j++) {
              a.push(this.ludoPosHolder_Home.children[i].children[j].getComponent(LudoPos));
            }
            this.ludoPos_Homes.push(a);
          }
          for (let i = 0; i < this.ludoPlayersHolder.children.length; i++) {
            this.ludoPlayers.push(this.ludoPlayersHolder.children[i].getComponent(LudoPlayer));
            this.ludoPlayers[i]._Start(this, i);
          }
          this.client = new _cjsExports.Client(`${LudoConfig.sv_useSSL ? "wss" : "ws"}://${LudoConfig.sv_hostname}${443 == LudoConfig.sv_port || 80 == LudoConfig.sv_port || LudoConfig.sv_useSSL ? "" : `:${LudoConfig.sv_port}`}`);
          this.diceAnim.on(Animation.EventType.FINISHED, this.onRollDiceAnimationFinished, this);
          this.diceAnim.getState("animation_rollDice").repeatCount = 2;
        }
        onJoinRoomClick() {
          this.client.joinOrCreate("classic", {
            playerId: this.playerId
          }).then(room => {
            console.log("Joined successfully!", room);

            // Store room reference for later use
            this.room = room;

            // Listen for server messages
            room.onMessage("*", this.onMessage.bind(this));
            room.onLeave(this.onLeaveRoom.bind(this));
          }).catch(err => {
            console.error("Join failed:", err);
          });
        }
        onJoinRoomClick2v2() {
          this.client.joinOrCreate("2vs2", {
            playerId: this.playerId
          }).then(room => {
            console.log("Joined successfully!", room);

            // Store room reference for later use
            this.room = room;

            // Listen for server messages
            room.onMessage("*", this.onMessage.bind(this));
            room.onLeave(this.onLeaveRoom.bind(this));
          }).catch(err => {
            console.error("Join failed:", err);
          });
        }
        onCreateRoomClick() {
          this.client.joinOrCreate("waitingRoom", {
            playerId: this.playerId,
            slotCount: 2,
            gameMode: '2vs2'
          }).then(room => {
            console.log("create room successfully!", room);
            this.uiWaitingRoom.show(this, this.client, room);
          }).catch(err => {
            console.error("Join failed:", err);
          });
        }
        joinGameRoomById(roomId) {
          this.client.joinById(roomId, {
            playerId: this.playerId
          }).then(room => {
            this.uiWaitingRoom.hide();
            console.log("Joined successfully!", room);

            // Store room reference for later use
            this.room = room;

            // Listen for server messages
            room.onMessage("*", this.onMessage.bind(this));
            room.onLeave(this.onLeaveRoom.bind(this));
          }).catch(err => {
            console.error("Join failed:", err);
          });
        }
        onLeaveRoom() {
          console.log("onLeaveRoom");
          this.ui_Lobby.show(this);
        }
        onBacktoLobbyClick() {
          this.ui_Lobby.show(this);
          this.room.leave();
        }
        onMessage(mess, data) {
          console.log('onMessage', mess, data);
          switch (mess) {
            case GameEvent.StartGame:
              {
                this.onStartGame(data);
              }
              break;
            case GameEvent.DiceRolled:
              {
                this.onRollDice(data);
              }
              break;
            case GameEvent.StartTurn:
              {
                this.onStartTurn(data);
              }
              break;
            case GameEvent.Move:
              {
                this.onMovePawn(data);
              }
              break;
            case GameEvent.Killed:
              {
                this.onKill(data);
              }
              break;
          }
        }
        onStartGame(data) {
          this.lastPawnMove = null;
          this.ui_Lobby.hide();
          this.gameData = data;
          this.ludoPlayers.forEach(e => {
            e.Disable();
          });
          if (UserData.userLocalData.staticPosition) {
            this.offsetPlayer = data.players[this.room.sessionId].team;
          } else {
            this.offsetPlayer = 0;
          }
          // this.offsetBoard = this.offsetPlayer * (LudoConfig.maxTiles / 4);
          this.boardNode.angle = this.offsetPlayer * 90;
          console.log("offsetPlayer", this.offsetPlayer);
          for (let i = 0; i < this.homeSprites.length; i++) {
            var index = i + this.offsetPlayer;
            if (index >= this.homeSprites.length) index -= this.homeSprites.length;
            this.homeSprites[i].spriteFrame = this.homeSpriteFrames[index];
          }
          const profiles_keys = Object.keys(data.players);
          profiles_keys.forEach(e => {
            this.getLudoPlayer(data.players[e].team).Init(data.players[e], e);
          });
          this.checkDiceBtn(this.getLudoPlayer(data.playerTurn).isMe);
          this.CheckShielded();
          this.CheckLayoutPawn();
          this.CheckLayerPawn();
        }
        CheckShielded() {
          this.ludoPlayers.forEach(e => {
            if (e.node.active) e.ludoPawns.forEach(f => {
              f.checkShielded();
            });
          });
        }
        CheckLayoutPawn() {
          let m = new Map();
          this.ludoPlayers.forEach(e => {
            if (e.node.active) e.ludoPawns.forEach(f => {
              if (f.pawnData.boardIndex < 0) {
                f.checkLayout(0, 1);
              } else {
                var key = f.pawnData.boardIndex.toString();
                if (f.pawnData.inHome == true) {
                  key += "_" + f.pawnData.inHome.toString() + "_" + f.pawnData.team.toString();
                }
                if (m.has(key)) {
                  m.get(key).push(f);
                } else {
                  var arr = [];
                  arr.push(f);
                  m.set(key, arr);
                }
              }
            });
          });
          m.forEach((value, key) => {
            value.forEach((e, i) => {
              e.checkLayout(i, value.length);
            });
          });
        }
        CheckLayerPawn() {
          this.LudoPawnHolder.children.sort((a, b) => {
            const aPos = a.getWorldPosition();
            const bPos = b.getWorldPosition();
            if (Math.round(aPos.y) > Math.round(bPos.y)) return -1;else if (Math.round(aPos.y) < Math.round(bPos.y)) return 1;
            if (Math.round(aPos.x) > Math.round(bPos.x)) return -1;else if (Math.round(aPos.x) < Math.round(bPos.x)) return 1;
            try {
              return a.getComponent(LudoPawn).layoutIndex - b.getComponent(LudoPawn).layoutIndex;
            } catch (error) {
              return 0;
            }
          });
        }
        RollDice() {
          var n = +this.diceCheatEditBox.string;
          if (n > 0 && n < 7) {
            this.room.send(GameEvent.RoolDice, n);
          } else {
            this.room.send(GameEvent.RoolDice);
          }
        }
        onRollDice(data) {
          this.lastDiceRoll = data;
          this.diceBtnAnimation.node.active = false;
          this.diceGlow.active = false;
          this.diceAnim.stop();
          this.diceAnim.play();
          SoundController.Instance.PlaySound(EnumSound.sfx_roll_dice);
        }
        onRollDiceAnimationFinished(type, state) {
          this.ludoPlayers.forEach(e => {
            if (e.node.active && e.playerId == this.lastDiceRoll.playerId) e.onRollDice(this.lastDiceRoll.diceRoll);
          });
          this.diceSprite.spriteFrame = this.diceSpriteFrames[this.lastDiceRoll.diceRoll];
        }
        BotAction() {
          var n = +this.diceCheatEditBox.string;
          if (n > 0 && n < 7) {
            this.room.send(GameEvent.BotAction, n);
          } else {
            this.room.send(GameEvent.BotAction);
          }
        }
        RequestGameState() {
          this.room.send(GameEvent.GameState);
        }
        SkipTurn() {
          this.room.send(GameEvent.SkipTurn);
        }
        onStartTurn(data) {
          this.ludoPlayers.forEach(e => {
            if (e.node.active) e.onStartTurn(data);
          });
          this.checkDiceBtn(this.getLudoPlayer(data.playerTurn).isMe);
          if (this.lastPawnMove != null && data.bonusType > 0) {
            this.lastPawnMove.isGainBonusTurn = true;
          }
        }
        MovePawn(index) {
          this.room.send(GameEvent.MovePawn, index);
        }
        onMovePawn(data) {
          this.ludoPlayers.forEach(e => {
            if (e.node.active && e.playerId == data.playerId) {
              this.lastPawnMove = e.ludoPawns[data.pawnIndex];
              this.lastPawnMove.onMovePawn(data);
            }
          });
        }
        onKill(data) {
          this.getLudoPlayer(data.target.team).ludoPawns[data.target.index].onMovePawn(data.target, this.lastDiceRoll.diceRoll);
        }
        getLudoPlayer(team) {
          var index = team - this.offsetPlayer;
          if (index < 0) index += 4;
          return this.ludoPlayers[index];
        }
        getBoardIndex(boardIndex) {
          var index = boardIndex - this.offsetBoard;
          if (index < 0) index += LudoConfig.maxTiles;
          return index;
        }
        checkDiceBtn(isMe) {
          if (isMe) {
            this.diceBtnAnimation.node.active = true;
            this.diceGlow.active = true;
            SoundController.Instance.PlaySound(EnumSound.sfx_car_horns);
          } else {
            this.diceBtnAnimation.node.active = false;
            this.diceGlow.active = false;
          }
        }
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ui_Lobby", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "uiWaitingRoom", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ludoPosHolder_mainboard", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ludoPosHolder_Goal", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ludoPlayersHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "ludoPosHolder_Home", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "LudoPawnHolder", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "boardNode", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "diceCheatEditBox", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "homeSprites", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "homeSpriteFrames", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "diceSprite", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "diceSpriteFrames", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "diceGlow", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "diceBtnAnimation", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "diceAnim", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LudoLobby.ts", ['cc', './UiPopupManager.ts'], function (exports) {
  var cclegacy, Component, _decorator, UiPopupManager;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }, function (module) {
      UiPopupManager = module.UiPopupManager;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "32909Lq0F5E4KJAPP69WsZH", "LudoLobby", undefined);
      const {
        ccclass,
        property
      } = _decorator;
      let LudoLobby = exports('LudoLobby', (_dec = ccclass('LudoLobby'), _dec(_class = class LudoLobby extends Component {
        constructor() {
          super(...arguments);
          this.ludoGameManager = void 0;
        }
        show(_ludoGameManager) {
          this.ludoGameManager = _ludoGameManager;
          this.node.active = true;
        }
        hide() {
          this.node.active = false;
        }
        onJoinRoomClick() {
          this.ludoGameManager.onJoinRoomClick();
        }
        onJoinRoomClick2v2() {
          this.ludoGameManager.onJoinRoomClick2v2();
        }
        onCreateRoomClick() {
          this.ludoGameManager.onCreateRoomClick();
        }
        onSettingClick() {
          UiPopupManager.Instance.ShowUiSetting();
        }
      }) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LudoPawn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LudoConfig.ts', './Utility.ts', './SoundController.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Button, Animation, SpriteFrame, Sprite, _decorator, Component, Tween, Vec3, tween, v3, LudoConfig, Utility, SoundController, EnumSound;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Button = module.Button;
      Animation = module.Animation;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      _decorator = module._decorator;
      Component = module.Component;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      LudoConfig = module.LudoConfig;
    }, function (module) {
      Utility = module.Utility;
    }, function (module) {
      SoundController = module.SoundController;
      EnumSound = module.EnumSound;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;
      cclegacy._RF.push({}, "a78c0NWi7tLz4gKUN3nZw4p", "LudoPawn", undefined);
      const {
        ccclass,
        property
      } = _decorator;
      let LudoPawn = exports('LudoPawn', (_dec = ccclass('LudoPawn'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Button), _dec5 = property(Node), _dec6 = property(Animation), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(SpriteFrame), _dec10 = property(SpriteFrame), _dec11 = property(Sprite), _dec12 = property(Sprite), _dec13 = property(Animation), _dec(_class = (_class2 = class LudoPawn extends Component {
        constructor() {
          super(...arguments);
          this.ludoPlayer = void 0;
          _initializerDefineProperty(this, "indicaterNode", _descriptor, this);
          _initializerDefineProperty(this, "indicaterArrow", _descriptor2, this);
          _initializerDefineProperty(this, "btn", _descriptor3, this);
          _initializerDefineProperty(this, "view", _descriptor4, this);
          _initializerDefineProperty(this, "shieldAnimation", _descriptor5, this);
          this._shieldAnimationCurClip = "";
          _initializerDefineProperty(this, "layout", _descriptor6, this);
          _initializerDefineProperty(this, "RotateNode", _descriptor7, this);
          _initializerDefineProperty(this, "carSpriteFrames", _descriptor8, this);
          _initializerDefineProperty(this, "petSpriteFrames", _descriptor9, this);
          _initializerDefineProperty(this, "carSprite", _descriptor10, this);
          _initializerDefineProperty(this, "petSprite", _descriptor11, this);
          _initializerDefineProperty(this, "addTurnAnimation", _descriptor12, this);
          this.index = void 0;
          this.pawnData = null;
          this.jumpAnimTimeMulti = void 0;
          this.jumpDelay = void 0;
          this.animCurPos = null;
          this.jumpAnimTime = 0.1;
          this.jumpHeight = 20;
          this.layoutSize = 65;
          this.isGainBonusTurn = false;
          this.layoutIndex = 0;
        }
        _Start(_ludoPlayer, _index) {
          this.index = _index;
          this.ludoPlayer = _ludoPlayer;
          this.indicaterNode.active = false;
          this.btn.node.active = false;
          this.shieldAnimation.on(Animation.EventType.FINISHED, this.onShieldAnimationFinished, this);
          this.setShieldAnimation(false);
          this.addTurnAnimation.on(Animation.EventType.FINISHED, this.onAddturnAnimFinished, this);
          this.addTurnAnimation.node.active = false;
        }
        Init(data) {
          this.node.active = true;
          this.pawnData = data;
          this.node.setWorldPosition(this.getPosNodeWorldPosition(this.pawnData.boardIndex, this.pawnData.inHome));
          this.petSprite.spriteFrame = this.petSpriteFrames[this.pawnData.team];
          this.rotate();
        }
        ReadyToMove(data) {
          this.indicaterNode.active = data;
          this.btn.node.active = data;
          this.indicaterArrow.active = data;
          if (data == true) {
            this.indicaterArrow.active = this.ludoPlayer.isMe;
          }
        }
        onClick() {
          if (!this.indicaterNode.active) return;
          this.ludoPlayer.ludoGameManager.MovePawn(this.pawnData.index);
        }
        onMovePawn(data, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          this.jumpDelay = delay;
          this.setShieldAnimation(false);
          this.node.setSiblingIndex(this.node.parent.children.length);
          Tween.stopAllByTarget(this.node);
          Tween.stopAllByTarget(this.view);
          Tween.stopAllByTarget(this.layout);
          this.view.setPosition(Vec3.ZERO);
          this.node.setWorldPosition(this.getPosNodeWorldPosition(this.pawnData.boardIndex, this.pawnData.inHome));
          this.animCurPos = {};
          this.animCurPos["boardIndex"] = this.pawnData.boardIndex;
          this.animCurPos["inHome"] = this.pawnData.inHome;
          this.pawnData.boardIndex = data.boardIndex;
          this.pawnData.inHome = data.inHome;
          this._movePawnToPos_anim(true);
        }
        _movePawnToPos_anim(isFirstMove) {
          if (isFirstMove === void 0) {
            isFirstMove = false;
          }
          if (isFirstMove != true) SoundController.Instance.PlaySound(EnumSound.sfx_pawn_move);
          this.animCurPos = this.getNextPos(true, this.animCurPos);
          if (this.animCurPos == null) {
            //done moving
            this.ludoPlayer.ludoGameManager.CheckShielded();
            this.ludoPlayer.ludoGameManager.CheckLayoutPawn();
            this.ludoPlayer.ludoGameManager.CheckLayerPawn();
            this.rotate();
            this.showAddturnAnim();
            return;
          }
          this.rotate();
          const delay = this.jumpDelay * this.jumpAnimTime + this.jumpAnimTime * 0.3;
          if (this.jumpDelay > 0) {
            Utility.AsyncDelay(delay * 1000).then(() => {
              SoundController.Instance.PlaySound(EnumSound.sfx_car_crash);
            });
          }
          tween(this.layout).delay(delay).to(this.jumpAnimTime, {
            position: Vec3.ZERO,
            scale: Vec3.ONE
          }).start();
          tween(this.node).delay(delay).to(this.jumpAnimTime * this.jumpAnimTimeMulti, {
            worldPosition: this.getPosNodeWorldPosition(this.animCurPos.boardIndex, this.animCurPos.inHome)
          }).call(this._movePawnToPos_anim.bind(this)).start();
          let t1 = tween(this.view).to(this.jumpAnimTime * this.jumpAnimTimeMulti / 2, {
            position: v3(0, this.jumpHeight * this.jumpAnimTimeMulti, 0)
          }, {
            easing: "quadOut"
          });
          let t2 = tween(this.view).to(this.jumpAnimTime * this.jumpAnimTimeMulti / 2, {
            position: v3(0, 0, 0)
          }, {
            easing: "quadIn"
          });
          tween(this.view).delay(delay).sequence(t1, t2).start();
        }
        getPosNodeWorldPosition(boardIndex, inHome) {
          if (boardIndex < 0) {
            return this.ludoPlayer.ludoGameManager.ludoPos_Homes[this.ludoPlayer.pawnTeam][Math.abs(boardIndex) - 1].node.getWorldPosition();
          } else {
            if (inHome) {
              return this.ludoPlayer.ludoGameManager.ludoPos_Goals[this.pawnData.team][boardIndex].node.getWorldPosition();
            } else {
              const _b = this.ludoPlayer.ludoGameManager.getBoardIndex(boardIndex);
              return this.ludoPlayer.ludoGameManager.ludoPos_mains[_b].node.getWorldPosition();
            }
          }
        }
        getNextPos(isAnim, animCurPos) {
          if (isAnim) this.jumpAnimTimeMulti = 1;
          if (animCurPos.boardIndex >= LudoConfig.finalGoalIndex && animCurPos.inHome == true) {
            animCurPos = null;
            return animCurPos;
          }
          if (isAnim && animCurPos.boardIndex == this.pawnData.boardIndex && animCurPos.inHome == this.pawnData.inHome) {
            animCurPos = null;
            return animCurPos;
          }
          if (this.pawnData.boardIndex < 0 || animCurPos.boardIndex < 0) {
            animCurPos.boardIndex = this.pawnData.boardIndex;
            animCurPos.inHome = this.pawnData.inHome;
            if (isAnim) {
              this.jumpAnimTimeMulti = 3;
              if (this.pawnData.boardIndex >= 0) {
                SoundController.Instance.PlaySound(EnumSound.sfx_car_move);
              }
            }
            return animCurPos;
          }
          if (animCurPos.inHome == false && animCurPos.boardIndex == LudoConfig.goalPosition[this.pawnData.team]) {
            animCurPos.boardIndex = 0;
            animCurPos.inHome = true;
            return animCurPos;
          }
          animCurPos.boardIndex += 1;
          if (animCurPos.boardIndex >= LudoConfig.maxTiles) animCurPos.boardIndex = 0;
          return animCurPos;
        }
        checkLayout(index, total) {
          Tween.stopAllByTarget(this.layout);
          this.layoutIndex = index;
          var midPoint = total / 2 - 0.5;
          var pos = (midPoint - index) * (this.layoutSize / total);
          var scale = 0.4 + 0.6 / total;
          tween(this.layout).to(this.jumpAnimTime, {
            position: v3(pos, 0, 0),
            scale: v3(scale, scale, scale)
          }).start();
        }
        checkShielded() {
          this.setShieldAnimation(this._checkShielded());
        }
        _checkShielded() {
          if (this.ludoPlayer.playerData.teammate == null || this.ludoPlayer.playerData.teammate == -1) return false;
          if (this.pawnData.inHome) return false;
          if (this.pawnData.boardIndex < 0) return false;
          if (LudoConfig.protectedPos.indexOf(this.pawnData.boardIndex) >= 0) return true;
          if (LudoConfig.initialPosition.indexOf(this.pawnData.boardIndex) >= 0) return true;
          var array = this.ludoPlayer.ludoGameManager.getLudoPlayer(this.ludoPlayer.playerData.teammate).ludoPawns;
          for (let i = 0; i < array.length; i++) {
            const e = array[i];
            if (e.pawnData.boardIndex < 0) continue;
            if (e.pawnData.inHome) {
              if (e.pawnData.boardIndex == 0 && this.pawnData.boardIndex == LudoConfig.goalPosition[e.ludoPlayer.playerData.team]) return true;
              continue;
            }
            if (e.pawnData.boardIndex == this.pawnData.boardIndex) return true;

            //special case
            if (e.pawnData.boardIndex == 0 && this.pawnData.boardIndex == LudoConfig.maxTiles - 1) return true;
            if (e.pawnData.boardIndex == LudoConfig.maxTiles - 1 && this.pawnData.boardIndex == 0) return true;
            if (e.pawnData.boardIndex == this.pawnData.boardIndex - 1) return true;
            if (e.pawnData.boardIndex == this.pawnData.boardIndex + 1) return true;
          }
          return false;
        }
        setShieldAnimation(isActive) {
          if (isActive) {
            if (this._shieldAnimationCurClip == "animation_shield_idle_on") return;
            this._shieldAnimationCurClip = "animation_shield_on";
            if (this == this.ludoPlayer.ludoGameManager.lastPawnMove) SoundController.Instance.PlaySound(EnumSound.sfx_gain_shield);
          } else {
            if (this._shieldAnimationCurClip == "animation_shield_idle_off") return;
            this._shieldAnimationCurClip = "animation_shield_off";
          }
          this.shieldAnimation.stop();
          this.shieldAnimation.play(this._shieldAnimationCurClip);
        }
        onShieldAnimationFinished(type, state) {
          if (this._shieldAnimationCurClip == "animation_shield_on") {
            this._shieldAnimationCurClip = "animation_shield_idle_on";
          } else if (this._shieldAnimationCurClip == "animation_shield_off") {
            this._shieldAnimationCurClip = "animation_shield_idle_off";
          } else {
            return;
          }
          this.shieldAnimation.stop();
          this.shieldAnimation.play(this._shieldAnimationCurClip);
        }
        rotate() {
          const lookLeft = () => {
            this.carSprite.spriteFrame = this.carSpriteFrames[this.pawnData.team];
            this.RotateNode.setScale(Vec3.ONE);
            this.RotateNode.setPosition(Vec3.ZERO);
            this.carSprite.node.parent.setPosition(Vec3.ZERO);
            this.indicaterNode.setRotationFromEuler(Vec3.ZERO);
          };
          const lookRight = () => {
            this.carSprite.spriteFrame = this.carSpriteFrames[this.pawnData.team];
            this.RotateNode.setScale(v3(-1, 1, 1));
            this.RotateNode.setPosition(Vec3.ZERO);
            this.carSprite.node.parent.setPosition(Vec3.ZERO);
            this.indicaterNode.setRotationFromEuler(Vec3.ZERO);
          };
          const lookUp = () => {
            this.carSprite.spriteFrame = this.carSpriteFrames[this.pawnData.team + 8];
            this.RotateNode.setScale(Vec3.ONE);
            this.RotateNode.setPosition(Vec3.ZERO);
            this.carSprite.node.parent.setPosition(v3(-3, 0, 0));
            this.indicaterNode.setRotationFromEuler(v3(0, 0, -90));
          };
          const lookDown = () => {
            this.carSprite.spriteFrame = this.carSpriteFrames[this.pawnData.team + 4];
            this.RotateNode.setScale(Vec3.ONE);
            this.RotateNode.setPosition(v3(-2, 0, 0));
            this.carSprite.node.parent.setPosition(v3(-3, 0, 0));
            this.indicaterNode.setRotationFromEuler(v3(0, 0, 90));
          };
          if (this.pawnData.boardIndex < 0) {
            switch (this.ludoPlayer.pawnTeam) {
              case 0:
                lookRight();
                break;
              case 1:
                lookDown();
                break;
              case 2:
                lookLeft();
                break;
              default:
                lookUp();
                break;
            }
            return;
          }
          var animCurPos = {};
          animCurPos["boardIndex"] = this.pawnData.boardIndex;
          animCurPos["inHome"] = this.pawnData.inHome;
          animCurPos = this.getNextPos(false, animCurPos);
          if (animCurPos == null) {
            switch (this.ludoPlayer.pawnTeam) {
              case 0:
                lookUp();
                break;
              case 1:
                lookRight();
                break;
              case 2:
                lookDown();
                break;
              default:
                lookLeft();
                break;
            }
            return;
          }
          const _nextPos = this.getPosNodeWorldPosition(animCurPos["boardIndex"], animCurPos["inHome"]);
          const _curPos = this.node.getWorldPosition();
          if (Math.round(_nextPos.y) > Math.round(_curPos.y)) {
            lookUp();
          } else if (Math.round(_nextPos.y) < Math.round(_curPos.y)) {
            lookDown();
          } else if (Math.round(_nextPos.x) > Math.round(_curPos.x)) {
            lookRight();
          } else if (Math.round(_nextPos.x) < Math.round(_curPos.x)) {
            lookLeft();
          } else {
            lookLeft();
          }
        }
        showAddturnAnim() {
          if (!this.isGainBonusTurn) return;
          this.isGainBonusTurn = false;
          this.addTurnAnimation.node.active = true;
          this.addTurnAnimation.play();
          SoundController.Instance.PlaySound(EnumSound.sfx_gain_turn);
        }
        onAddturnAnimFinished(type, state) {
          this.addTurnAnimation.stop();
          this.addTurnAnimation.node.active = false;
        }
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "indicaterNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "indicaterArrow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "view", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "shieldAnimation", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "layout", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "RotateNode", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "carSpriteFrames", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "petSpriteFrames", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "carSprite", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "petSprite", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "addTurnAnimation", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LudoPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LudoPawn.ts', './LudoConfig.ts', './SoundController.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, Sprite, SpriteFrame, Label, _decorator, Component, v3, LudoPawn, PawnTeam, LudoConfig, SoundController, EnumSound;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      _decorator = module._decorator;
      Component = module.Component;
      v3 = module.v3;
    }, function (module) {
      LudoPawn = module.LudoPawn;
    }, function (module) {
      PawnTeam = module.PawnTeam;
      LudoConfig = module.LudoConfig;
    }, function (module) {
      SoundController = module.SoundController;
      EnumSound = module.EnumSound;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;
      cclegacy._RF.push({}, "4b515vrZtdJo4QjVZnwWhuk", "LudoPlayer", undefined);
      const {
        ccclass,
        property
      } = _decorator;
      let LudoPlayer = exports('LudoPlayer', (_dec = ccclass('LudoPlayer'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Sprite), _dec6 = property(Sprite), _dec7 = property(SpriteFrame), _dec8 = property(Sprite), _dec9 = property(SpriteFrame), _dec10 = property(Label), _dec(_class = (_class2 = class LudoPlayer extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "yourTurn_glow", _descriptor, this);
          _initializerDefineProperty(this, "yourTurn_flag", _descriptor2, this);
          _initializerDefineProperty(this, "pawnsHolder", _descriptor3, this);
          _initializerDefineProperty(this, "avaSprite", _descriptor4, this);
          _initializerDefineProperty(this, "avaOutlineSprite", _descriptor5, this);
          _initializerDefineProperty(this, "avaOutlineSpriteFrames", _descriptor6, this);
          _initializerDefineProperty(this, "nameOutlineSprite", _descriptor7, this);
          _initializerDefineProperty(this, "nameOutlineSpriteFrame", _descriptor8, this);
          _initializerDefineProperty(this, "nameLabel", _descriptor9, this);
          this.ludoPawns = [];
          this.ludoGameManager = void 0;
          this.pawnTeam = void 0;
          this.isMe = false;
          this.playerId = "";
          this.playerData = null;
        }
        _Start(_ludoGameManager, _pawnTeam) {
          this.ludoGameManager = _ludoGameManager;
          this.pawnTeam = _pawnTeam;
          for (let i = 0; i < this.pawnsHolder.children.length; i++) {
            this.ludoPawns.push(this.pawnsHolder.children[i].getComponent(LudoPawn));
            this.ludoPawns[i]._Start(this, i);
          }
          this.ludoPawns.forEach(element => {
            element.node.setParent(this.ludoGameManager.LudoPawnHolder);
          });
          this.yourTurn_glow.active = false;
          this.yourTurn_flag.active = false;
        }
        Init(data, _playerId) {
          this.node.active = true;
          this.playerId = _playerId;
          this.isMe = _playerId == this.ludoGameManager.room.sessionId;
          this.playerData = data;
          this.nameLabel.string = PawnTeam[this.playerData.team].toUpperCase();
          this.avaOutlineSprite.spriteFrame = this.avaOutlineSpriteFrames[this.playerData.team];
          this.nameOutlineSprite.spriteFrame = this.nameOutlineSpriteFrame[this.playerData.team];
          if (this.isMe) {
            this.avaSprite.node.parent.setScale(v3(1.6, 1.6, 1));
          } else {
            this.avaSprite.node.parent.setScale(v3(1, 1, 1));
          }
          this.onStartTurn(this.ludoGameManager.gameData);
          for (let i = 0; i < data.pawns.length; i++) {
            const e = data.pawns[i];
            this.ludoPawns[e.index].Init(e);
          }
        }
        Disable() {
          this.playerId = "";
          this.node.active = false;
          this.ludoPawns.forEach(element => {
            element.node.active = false;
          });
        }
        onRollDice(data) {
          var totalMoveAblePawn = 0;
          this.ludoPawns.forEach(e => {
            if (e.pawnData.boardIndex < 0) {
              if (data == 6) {
                e.ReadyToMove(true);
                totalMoveAblePawn++;
              } else {
                e.ReadyToMove(false);
              }
            } else {
              if (e.pawnData.inHome) {
                if (e.pawnData.boardIndex + data > LudoConfig.finalGoalIndex) {
                  e.ReadyToMove(false);
                } else {
                  e.ReadyToMove(true);
                  totalMoveAblePawn++;
                }
              } else {
                e.ReadyToMove(true);
                totalMoveAblePawn++;
              }
            }
          });
          if (totalMoveAblePawn == 0) {
            this.ludoGameManager.SkipTurn();
          } else if (this.isMe) {
            SoundController.Instance.PlaySound(EnumSound.sfx_car_start);
          }
        }
        onStartTurn(data) {
          this.yourTurn_glow.active = this == this.ludoGameManager.getLudoPlayer(data.playerTurn);
          this.yourTurn_flag.active = this.yourTurn_glow.active;
          this.ludoPawns.forEach(e => {
            e.ReadyToMove(false);
          });
        }
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "yourTurn_glow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "yourTurn_flag", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pawnsHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "avaSprite", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "avaOutlineSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "avaOutlineSpriteFrames", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "nameOutlineSprite", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nameOutlineSpriteFrame", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "nameLabel", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LudoPos.ts", ['cc'], function (exports) {
  var cclegacy, Component, _decorator;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Component = module.Component;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "b8b5dHFmUBORLOFgcJE5LPt", "LudoPos", undefined);
      const {
        ccclass,
        property
      } = _decorator;
      let LudoPos = exports('LudoPos', (_dec = ccclass('LudoPos'), _dec(_class = class LudoPos extends Component {
        start() {}
        update(deltaTime) {}
      }) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LudoWaitingRoom.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, _decorator, Component, Label;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      Component = module.Component;
      Label = module.Label;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "22af59y49ZK/4WacDt30n5o", "LudoWaitingRoom", undefined);
      const {
        ccclass,
        property
      } = _decorator;
      let LudoWaitingRoom = exports('LudoWaitingRoom', (_dec = ccclass('LudoWaitingRoom'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = class LudoWaitingRoom extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "player1Node", _descriptor, this);
          _initializerDefineProperty(this, "player2Node", _descriptor2, this);
          _initializerDefineProperty(this, "startBtn", _descriptor3, this);
          this.room = null;
          this.client = void 0;
          this.manager = void 0;
        }
        show(manager, client, room) {
          this.manager = manager;
          this.client = client;
          this.room = room;
          room.onMessage("*", this.onMessage.bind(this));
          room.onLeave(this.onLeaveRoom.bind(this));
          this.player1Node.active = false;
          this.player2Node.active = false;
          this.node.active = true;
        }
        hide() {
          this.node.active = false;
        }
        onMessage(mess, data) {
          console.log('onMessage', mess, data);
          switch (mess) {
            case "playerJoined":
              {
                const isRoomMaster = data.roomMaster === this.manager.playerId;
                this.startBtn.active = isRoomMaster;
                const profiles_keys = Object.keys(data.players);
                profiles_keys.forEach(key => {
                  const player = data.players[key];
                  console.log('p', player, key);
                  if (this.manager.playerId == key) {
                    this.player1Node.active = true;
                    this.player1Node.getComponentInChildren(Label).string = key;
                  } else {
                    this.player2Node.active = true;
                    this.player2Node.getComponentInChildren(Label).string = key;
                  }
                });
                console.log(data);
              }
              break;
            case "matchmakingStarted":
              break;
            case "joinGameRoom":
              this.manager.joinGameRoomById(data.roomId);
              break;
          }
        }
        onLeaveRoom() {
          console.log("onLeaveRoom");
          this.hide();
        }
        onLeaveRoomClick() {
          this.room.leave();
        }
        onStartGameClick() {
          this.room.send('start');
        }
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "player1Node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "player2Node", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "startBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./ButtonAnim.ts', './EventSystem.ts', './PopUpBase.ts', './SoundController.ts', './UIFitWidthHelper.ts', './Utility.ts', './AccountManager.ts', './UserData.ts', './LudoConfig.ts', './LudoGameManager.ts', './LudoLobby.ts', './LudoPawn.ts', './LudoPlayer.ts', './LudoPos.ts', './LudoWaitingRoom.ts', './UiPopupManager.ts', './UiSetting.ts', './LoduTest.ts', './colyseus.mjs_cjs=&original=.js'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/PopUpBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Node, UIOpacity, CCInteger, _decorator, Component, tween, v3;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      CCInteger = module.CCInteger;
      _decorator = module._decorator;
      Component = module.Component;
      tween = module.tween;
      v3 = module.v3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "47323uU4LdP+IOU3dOf1HDR", "PopUpBase", undefined);
      // import { EnumSound, SoundController } from '../Gameplay/SoundController';
      const {
        ccclass,
        property
      } = _decorator;

      /**
       * Predefined variables
       * Name = PopUpBase
       * DateTime = Fri Dec 24 2021 07:16:46 GMT+0700 (Indochina Time)
       * Author = acac1581
       * FileBasename = PopUpBase.ts
       * FileBasenameNoExtension = PopUpBase
       * URL = db://assets/Script/utility/PopUpBase.ts
       * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/
       *
       */

      let PopUpBase = exports('PopUpBase', (_dec = ccclass('PopUpBase'), _dec2 = property(Node), _dec3 = property(UIOpacity), _dec4 = property(CCInteger), _dec(_class = (_class2 = class PopUpBase extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "ScaleNode", _descriptor, this);
          _initializerDefineProperty(this, "fadeUIOpacity", _descriptor2, this);
          _initializerDefineProperty(this, "order", _descriptor3, this);
          this.cbHide = null;
        }
        OnShow(cb) {
          if (cb === void 0) {
            cb = null;
          }
          if (this.node.active) {
            if (this.ScaleNode) this.ScaleNode.setScale(1, 1, 1);
            if (this.fadeUIOpacity) this.fadeUIOpacity.opacity = 255;
            this.CallAction(cb);
          } else {
            this.node.active = true;
            if (this.ScaleNode) {
              this.ScaleNode.setScale(0.5, 0.5, 0.5);
              tween(this.ScaleNode).to(0.3, {
                scale: v3(1, 1, 1)
              }, {
                easing: 'backOut'
              }).call(() => {
                this.CallAction(cb);
              }).start();
            }
            if (this.fadeUIOpacity) {
              this.fadeUIOpacity.opacity = 0;
              tween(this.fadeUIOpacity).to(0.2, {
                opacity: 255
              }).call(() => {
                if (!this.ScaleNode) this.CallAction(cb);
              }).start();
            }
            if (!this.ScaleNode && !this.fadeUIOpacity) this.CallAction(cb);
          }
        }
        OnHide(cb, isPlaySound) {
          if (cb === void 0) {
            cb = null;
          }
          if (!this.node.active) return;
          // if (SoundController.Instance && isPlaySound) SoundController.Instance.PlaySound(EnumSound.GameUI_closepopup);
          if (this.ScaleNode) {
            tween(this.ScaleNode).to(0.3, {
              scale: v3(0.5, 0.5, 0.5)
            }, {
              easing: 'circOut'
            }).call(() => {
              this.node.active = false;
              this.CallAction(cb);
            }).start();
          }
          if (this.fadeUIOpacity) {
            tween(this.fadeUIOpacity).to(0.2, {
              opacity: 0
            }).call(() => {
              if (!this.ScaleNode) {
                this.node.active = false;
                this.CallAction(cb);
              }
            }).start();
          }
          if (!this.ScaleNode && !this.fadeUIOpacity) {
            this.node.active = false;
            this.CallAction(cb);
          }
          this.cbHide?.();
          this.cbHide = null;
        }
        CallAction(cb) {
          if (cb) cb();
        }
        SetCallbackHide(cbHide) {
          this.cbHide = cbHide;
        }
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ScaleNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fadeUIOpacity", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "order", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return 0;
        }
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.3/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.3/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.3/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UserData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, AudioSource, AudioClip, _decorator, Component, director, UserData;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      AudioSource = module.AudioSource;
      AudioClip = module.AudioClip;
      _decorator = module._decorator;
      Component = module.Component;
      director = module.director;
    }, function (module) {
      UserData = module.UserData;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;
      cclegacy._RF.push({}, "5998aKcPlxN2aj9JEDzIdxe", "SoundController", undefined);
      const {
        ccclass,
        property
      } = _decorator;

      /**
       * Predefined variables
       * Name = SoundController
       * DateTime = Sat Dec 25 2021 08:46:55 GMT+0700 (Indochina Time)
       * Author = acac1581
       * FileBasename = SoundController.ts
       * FileBasenameNoExtension = SoundController
       * URL = db://assets/Script/Gameplay/SoundController.ts
       * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/
       *
       */

      let EnumSound = exports('EnumSound', /*#__PURE__*/function (EnumSound) {
        EnumSound[EnumSound["BGM_1"] = 0] = "BGM_1";
        EnumSound[EnumSound["GameUI_button_click"] = 1] = "GameUI_button_click";
        EnumSound[EnumSound["sfx_car_crash"] = 2] = "sfx_car_crash";
        EnumSound[EnumSound["sfx_car_start"] = 3] = "sfx_car_start";
        EnumSound[EnumSound["sfx_car_horns"] = 4] = "sfx_car_horns";
        EnumSound[EnumSound["sfx_car_move"] = 5] = "sfx_car_move";
        EnumSound[EnumSound["sfx_gain_turn"] = 6] = "sfx_gain_turn";
        EnumSound[EnumSound["sfx_roll_dice"] = 7] = "sfx_roll_dice";
        EnumSound[EnumSound["sfx_pawn_move"] = 8] = "sfx_pawn_move";
        EnumSound[EnumSound["sfx_gain_shield"] = 9] = "sfx_gain_shield";
        return EnumSound;
      }({}));
      let SoundController = exports('SoundController', (_dec = ccclass('SoundController'), _dec2 = property(AudioSource), _dec3 = property(AudioSource), _dec4 = property(AudioClip), _dec(_class = (_class2 = (_class3 = class SoundController extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "BgMusic", _descriptor, this);
          _initializerDefineProperty(this, "SoundFX", _descriptor2, this);
          _initializerDefineProperty(this, "AudioClips", _descriptor3, this);
        }
        onLoad() {
          if (SoundController.Instance == null) {
            SoundController.Instance = this;
            director.addPersistRootNode(this.node);
          } else {
            this.destroy();
          }
        }
        start() {
          this.UpdateSoundState();
          this.SetBgMusic(EnumSound.BGM_1);
        }
        UpdateSoundState() {
          this.BgMusic.volume = UserData.userLocalData.musicOn ? 0.7 : 0;
        }
        PlaySound(e, volume) {
          if (volume === void 0) {
            volume = 1;
          }
          if (UserData.userLocalData.soundOn) {
            this.SoundFX.loop = false;
            this.SoundFX.playOneShot(this.AudioClips[e], volume);
          }
        }
        PlaySoundLoop(e, volume) {
          if (volume === void 0) {
            volume = 1;
          }
          if (UserData.userLocalData.soundOn) {
            this.SoundFX.volume = volume;
            this.SoundFX.loop = true;
            this.SoundFX.clip = this.AudioClips[e];
            this.SoundFX.play();
          }
        }
        StopSoundLoop() {
          this.SoundFX.stop();
        }
        SetBgMusic(e) {
          this.BgMusic.stop();
          this.BgMusic.loop = true;
          this.BgMusic.clip = this.AudioClips[e];
          this.BgMusic.play();
        }
      }, _class3.Instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "BgMusic", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "SoundFX", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "AudioClips", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIFitWidthHelper.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utility.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, UITransform, CCFloat, _decorator, Component, view, Utility;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      CCFloat = module.CCFloat;
      _decorator = module._decorator;
      Component = module.Component;
      view = module.view;
    }, function (module) {
      Utility = module.Utility;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "dee8cysVPNH9bwuhCz8NzbB", "UIFitWidthHelper", undefined);
      const {
        ccclass,
        property
      } = _decorator;

      /**
       * Predefined variables
       * Name = UIFitWidthHelper
       * DateTime = Fri Jan 28 2022 06:44:58 GMT+0700 (Indochina Time)
       * Author = acac1581
       * FileBasename = UIFitWidthHelper.ts
       * FileBasenameNoExtension = UIFitWidthHelper
       * URL = db://assets/Script/utility/UIFitWidthHelper.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      //Use this for Ui element need Fit Width on a Fit Height project (require Utility script is in project)
      let UIFitWidthHelper = exports('UIFitWidthHelper', (_dec = ccclass('UIFitWidthHelper'), _dec2 = property(UITransform), _dec3 = property(CCFloat), _dec(_class = (_class2 = class UIFitWidthHelper extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "canvasToFit", _descriptor, this);
          this.baseScale = 1;
          this.designWidth = 2001;
          _initializerDefineProperty(this, "HardCodeWidth", _descriptor2, this);
          this.callbacks = [];
          this.frameCount = 0;
        }
        start() {
          this.designWidth = view.getDesignResolutionSize().width;
          if (this.HardCodeWidth == -1) {
            this.HardCodeWidth = this.getComponent(UITransform).width;
          }
          Utility.addResizeCallBack(this.node, function () {
            this.UpdateSize(200);
          }.bind(this));
          this.baseScale = this.node.scale.x;
        }
        onEnable() {
          this.frameCount = 2;
        }
        update(dt) {
          if (this.frameCount <= 0) return;
          this.frameCount--;
          if (this.frameCount <= 0) this._updateSize();
        }
        UpdateSize(delay) {
          Utility.AsyncDelay(delay).then(this._updateSize.bind(this));
        }
        _updateSize() {
          if (this.canvasToFit == null) return;
          if (this.HardCodeWidth > this.canvasToFit.width) {
            let scale = this.baseScale * (this.canvasToFit.width / this.designWidth);
            this.node.setScale(scale, scale, 1);
          } else {
            this.node.setScale(this.baseScale, this.baseScale, 1);
          }
          this.callbacks.forEach(e => {
            e();
          });
        }
        onDestroy() {
          Utility.removeResizeCallBack(this.node);
        }
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "canvasToFit", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "HardCodeWidth", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function () {
          return -1;
        }
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UiPopupManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UserData.ts', './UiSetting.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Component, game, UserData, UiSetting;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      game = module.game;
    }, function (module) {
      UserData = module.UserData;
    }, function (module) {
      UiSetting = module.UiSetting;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;
      cclegacy._RF.push({}, "5894dkFqjRL5Iz3AsRrU/Ng", "UiPopupManager", undefined);
      const {
        ccclass,
        property
      } = _decorator;
      let UiPopupManager = exports('UiPopupManager', (_dec = ccclass('UiPopupManager'), _dec2 = property(UiSetting), _dec(_class = (_class2 = (_class3 = class UiPopupManager extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "uiSetting", _descriptor, this);
        }
        onLoad() {
          if (UiPopupManager.Instance == null) {
            UiPopupManager.Instance = this;
            game.addPersistRootNode(this.node);
          } else {
            this.destroy();
          }
          UserData.LoadUserLocalData();
        }
        ShowUiSetting() {
          this.uiSetting.Show();
        }
      }, _class3.Instance = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "uiSetting", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UiSetting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './UserData.ts', './AccountManager.ts', './SoundController.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, Toggle, _decorator, Component, UserData, AccountManager, SoundController;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Toggle = module.Toggle;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      UserData = module.UserData;
    }, function (module) {
      AccountManager = module.AccountManager;
    }, function (module) {
      SoundController = module.SoundController;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "f3656volKBBM5qUmJy1RRGI", "UiSetting", undefined);
      const {
        ccclass,
        property
      } = _decorator;
      let UiSetting = exports('UiSetting', (_dec = ccclass('UiSetting'), _dec2 = property(Toggle), _dec3 = property(Toggle), _dec4 = property(Toggle), _dec(_class = (_class2 = class UiSetting extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "staticPositionToggle", _descriptor, this);
          _initializerDefineProperty(this, "musicToggle", _descriptor2, this);
          _initializerDefineProperty(this, "soundToggle", _descriptor3, this);
        }
        Show() {
          this.node.active = true;
          this.staticPositionToggle.isChecked = UserData.userLocalData.staticPosition;
          this.musicToggle.isChecked = UserData.userLocalData.musicOn;
          this.soundToggle.isChecked = UserData.userLocalData.soundOn;
        }
        Hide() {
          UserData.userLocalData.musicOn = this.musicToggle.isChecked;
          UserData.userLocalData.soundOn = this.soundToggle.isChecked;
          UserData.userLocalData.staticPosition = this.staticPositionToggle.isChecked;
          UserData.SaveUserLocalData();
          SoundController.Instance.UpdateSoundState();
          this.node.active = false;
        }
        Login() {
          AccountManager.Instance.LoginTele();
        }
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "staticPositionToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "musicToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "soundToggle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UserData.ts", ['cc'], function (exports) {
  var cclegacy, sys;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bd2a932kNVGDoVlQiE5K5LL", "UserData", undefined);
      class UserData {
        static LoadUserLocalData() {
          let data = sys.localStorage.getItem("userLocalData");
          if (data !== 'undefined' && data != '' && data != null) {
            this.userLocalData = JSON.parse(data);
          }
        }
        static SaveUserLocalData() {
          sys.localStorage.setItem("userLocalData", JSON.stringify(this.userLocalData));
        }
      }
      exports('UserData', UserData);
      UserData.userLocalData = {
        musicOn: true,
        soundOn: true,
        change_log_version: "",
        staticPosition: true
      };
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Utility.ts", ['cc'], function (exports) {
  var cclegacy, view, tween, ParticleSystem, Animation;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      view = module.view;
      tween = module.tween;
      ParticleSystem = module.ParticleSystem;
      Animation = module.Animation;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e73f879pn1EOpwpVVSeMUdM", "Utility", undefined);
      /**
       * Predefined variables
       * Name = Utility
       * DateTime = Sat Dec 11 2021 20:37:08 GMT+0700 (Indochina Time)
       * Author = acac1581
       * FileBasename = Utility.ts
       * FileBasenameNoExtension = Utility
       * URL = db://assets/Script/utility/Utility.ts
       * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/
       *
       */

      class Utility {
        static addResizeCallBack(target, cb) {
          if (!Utility.isSetCallBack) {
            view.setResizeCallback(() => {
              if (Utility.ResizeCallback != null) clearTimeout(Utility.ResizeCallback);
              Utility.ResizeCallback = setTimeout(() => {
                Utility.ResizeCbMap.forEach((value, key) => {
                  value();
                }, Utility);
              }, 200);
            });
          }
          Utility.ResizeCbMap.set(target, cb);
        }
        static removeResizeCallBack(target) {
          if (Utility.ResizeCbMap.has(target)) Utility.ResizeCbMap.delete(target);
        }
        static tweenNumber(from, to, duration, callInProgress, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          var numberToTween = new NumberToTween(from);
          var t = tween(numberToTween).delay(delay).to(duration, {
            n: to
          }, {
            progress: (start, end, current, t) => {
              let currentN = Math.floor(start + (end - start) * t);
              callInProgress(currentN);
              return currentN;
            }
          }).call(() => {
            callInProgress(to);
          });
          t.start();
          return t;
        }
        static tweenSpriteColor(toColor, sprite, duration) {
          let newC = {
            r: toColor.r,
            g: toColor.g,
            b: toColor.b,
            a: toColor.a
          };
          return tween(sprite).to(duration, {
            color: newC
          });
        }
        static PlayParticle(n) {
          n.active = true;
          let a = n.getComponent(ParticleSystem);
          if (a != null) {
            if (a.isPlaying) {
              a.stop();
            }
            a.play();
          }
          if (n.children.length > 0) {
            n.children.forEach(x => this.PlayParticle(x));
          }
        }
        static StopParticle(n) {
          let a = n.getComponent(ParticleSystem);
          if (a != null) {
            if (a.isPlaying) a.stop();
          }
          let array = n.getComponentsInChildren(ParticleSystem);
          for (let i = 0; i < array.length; i++) {
            if (array[i].isPlaying) array[i].stop();
          }
          n.active = false;
        }
        static PlayAnimation(n) {
          n.active = true;
          n.getComponent(Animation).play();
        }
        static async AsyncDelay(milliseconds) {
          return new Promise(resolve => {
            setTimeout(resolve, milliseconds);
          });
        }
      }
      exports('Utility', Utility);
      Utility.ResizeCallback = 0;
      Utility.ResizeCbMap = new Map();
      Utility.isSetCallBack = false;
      class NumberToTween {
        constructor(n) {
          this.n = void 0;
          this.n = n;
        }
      }
      exports('NumberToTween', NumberToTween);
      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvU2NyaXB0cy9EYXRhL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvU2NyaXB0cy9EYXRhL0FjY291bnRNYW5hZ2VyLnRzIiwiLi4vZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvQnV0dG9uQW5pbS50cyIsIi4uL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9leHRlbnNpb25zL0NvbHlzZXVzJTIwTXVsdGlwbGF5ZXIlMjBTREsvcnVudGltZS9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvZXh0ZW5zaW9ucy9Db2x5c2V1cyUyME11bHRpcGxheWVyJTIwU0RLL3J1bnRpbWUvY29seXNldXMuanMiLCIuLi9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvZXh0ZW5zaW9ucy9Db2x5c2V1cyUyME11bHRpcGxheWVyJTIwU0RLL3J1bnRpbWUvZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2V4dGVuc2lvbnMvQ29seXNldXMlMjBNdWx0aXBsYXllciUyMFNESy9ydW50aW1lL2NvbHlzZXVzLm1qcz9janM9Jm9yaWdpbmFsPS5qcyIsIi4uL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvM3JkL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvM3JkL0V2ZW50U3lzdGVtLnRzIiwiLi4vZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy9kZW1vL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvZGVtby9Mb2R1VGVzdC50cyIsIi4uL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvU2NyaXB0cy9MdWRvL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvU2NyaXB0cy9MdWRvL0x1ZG9Db25maWcudHMiLCIuLi9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvTHVkby9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvTHVkby9MdWRvR2FtZU1hbmFnZXIudHMiLCIuLi9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvTHVkby9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvTHVkby9MdWRvTG9iYnkudHMiLCIuLi9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvTHVkby9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvTHVkby9MdWRvUGF3bi50cyIsIi4uL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvU2NyaXB0cy9MdWRvL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvU2NyaXB0cy9MdWRvL0x1ZG9QbGF5ZXIudHMiLCIuLi9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvTHVkby9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvTHVkby9MdWRvUG9zLnRzIiwiLi4vZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy9TY3JpcHRzL0x1ZG8vZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy9TY3JpcHRzL0x1ZG8vTHVkb1dhaXRpbmdSb29tLnRzIiwiLi4vZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvUG9wVXBCYXNlLnRzIiwiLi4vZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvU291bmRDb250cm9sbGVyLnRzIiwiLi4vZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvVUlGaXRXaWR0aEhlbHBlci50cyIsIi4uL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvU2NyaXB0cy9VSS9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvVUkvVWlQb3B1cE1hbmFnZXIudHMiLCIuLi9maWxlOi9EOi9Qcm9qZWN0L0x1ZG8vbHVkb19jbGllbnQvYXNzZXRzL1NjcmlwdHMvVUkvZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy9TY3JpcHRzL1VJL1VpU2V0dGluZy50cyIsIi4uL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvU2NyaXB0cy9EYXRhL2ZpbGU6L0Q6L1Byb2plY3QvTHVkby9sdWRvX2NsaWVudC9hc3NldHMvU2NyaXB0cy9EYXRhL1VzZXJEYXRhLnRzIiwiLi4vZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvZmlsZTovRDovUHJvamVjdC9MdWRvL2x1ZG9fY2xpZW50L2Fzc2V0cy8zcmQvVXRpbGl0eS50cyJdLCJuYW1lcyI6WyJjY2NsYXNzIiwicHJvcGVydHkiLCJfZGVjb3JhdG9yIiwiQWNjb3VudE1hbmFnZXIiLCJfZGVjIiwiX2NsYXNzIiwiX2NsYXNzMiIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiYm90SUQiLCJvbkxvYWQiLCJJbnN0YW5jZSIsImdhbWUiLCJhZGRQZXJzaXN0Um9vdE5vZGUiLCJub2RlIiwiZGVzdHJveSIsInN0YXJ0IiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsIlRlbGVncmFtIiwiV2ViQXBwIiwicmVhZHkiLCJleHBhbmQiLCJlIiwiTG9naW5UZWxlIiwid2FybiIsImluaXREYXRhVW5zYWZlIiwiZXJyb3IiLCJyZXN1bHQiLCJ0ZWxlZ3JhbUF1dGgiLCJ3aW5kb3dGZWF0dXJlcyIsInBvcHVwIiwiZXJyb3IxIiwiX1JGIiwicG9wIiwiQnV0dG9uQW5pbSIsIl9kZWMyIiwiQ0NGbG9hdCIsIl9kZWMzIiwiX2RlYzQiLCJDQ0Jvb2xlYW4iLCJfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSIsIl9kZXNjcmlwdG9yIiwiX2Rlc2NyaXB0b3IyIiwiX2Rlc2NyaXB0b3IzIiwidGFyZ2V0Tm9kZSIsImJ0bkNsaWNrIiwib3JpZ2luU2NhbGUiLCJ0YXJnZXRTY2FsZSIsImlzQ2xpY2tlZCIsInNjYWxlVHdlZW4iLCJnZXRDb21wb25lbnQiLCJCdXR0b24iLCJUb2dnbGUiLCJ0YXJnZXQiLCJWZWMzIiwiZ2V0U2NhbGUiLCJ2ZWMxIiwic2NhbGVBZGQiLCJzdWJ0cmFjdCIsIm9uIiwiTm9kZSIsIkV2ZW50VHlwZSIsIlRPVUNIX0NBTkNFTCIsIlJlbGVhc2UiLCJUT1VDSF9TVEFSVCIsIkRvd24iLCJUT1VDSF9FTkQiLCJpc0NvbG9yVHJhbnNpdGlvbiIsInRyYW5zaXRpb24iLCJUcmFuc2l0aW9uIiwiQ09MT1IiLCJub3JtYWxDb2xvciIsImNvbG9yIiwicHJlc3NlZENvbG9yIiwiaG92ZXJDb2xvciIsIm9uRGlzYWJsZSIsInRpbWVTY2FsZSIsInN0b3AiLCJzZXRTY2FsZSIsImludGVyYWN0YWJsZSIsIlNvdW5kQ29udHJvbGxlciIsIlBsYXlTb3VuZCIsIkVudW1Tb3VuZCIsIkdhbWVVSV9idXR0b25fY2xpY2siLCJ0d2VlbiIsInRvIiwic2NhbGUiLCJlYXNpbmciLCJfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yIiwicHJvdG90eXBlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiaW5pdGlhbGl6ZXIiLCJfY2pzRXhwb3J0cyIsIl9fY2pzTWV0YVVSTCIsImltcG9ydCIsImRlZmluZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiX19maWxlbmFtZSIsIl9fZGlybmFtZSIsImdsb2JhbCIsImZhY3RvcnkiLCJhbWQiLCJnbG9iYWxUaGlzIiwic2VsZiIsIkNvbHlzZXVzIiwiX21lcmdlTmFtZXNwYWNlcyIsIm4iLCJtIiwiZm9yRWFjaCIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsImtleXMiLCJrIiwiZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZnJlZXplIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJhIiwiYnVmZmVyIiwiZXh0ZW5kU3RhdGljcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfX2V4dGVuZHMiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfXyIsImNyZWF0ZSIsIl9fYXNzaWduIiwiYXNzaWduIiwidCIsInMiLCJpIiwibGVuZ3RoIiwiYXBwbHkiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsInZhbHVlIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwiZG9uZSIsInRoZW4iLCJfX2dlbmVyYXRvciIsImJvZHkiLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsImYiLCJ5IiwiZyIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsInYiLCJvcCIsInB1c2giLCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwicmVjZWl2ZXIiLCJzdGF0ZSIsImtpbmQiLCJoYXMiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0Iiwic2V0IiwiQ2xvc2VDb2RlIiwiU2VydmVyRXJyb3IiLCJfc3VwZXIiLCJjb2RlIiwibWVzc2FnZSIsIl90aGlzIiwibmFtZSIsIkVycm9yIiwiRGVjb2RlciIsIm9mZnNldCIsIl9vZmZzZXQiLCJfYnVmZmVyIiwiX3ZpZXciLCJEYXRhVmlldyIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwidXRmOFJlYWQkMSIsInZpZXciLCJzdHJpbmciLCJjaHIiLCJlbmQiLCJieXRlIiwiZ2V0VWludDgiLCJmcm9tQ2hhckNvZGUiLCJ0b1N0cmluZyIsIl9hcnJheSIsIl9wYXJzZSIsIl9tYXAiLCJrZXkiLCJfc3RyIiwiX2JpbiIsInNsaWNlIiwicHJlZml4IiwidHlwZSIsImhpIiwibG8iLCJnZXRVaW50MTYiLCJnZXRVaW50MzIiLCJnZXRJbnQ4IiwibnMiLCJnZXRJbnQzMiIsIkRhdGUiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsIk1hdGgiLCJwb3ciLCJnZXRJbnQxNiIsImRlY29kZSIsImRlY29kZXIiLCJUSU1FU1RBTVAzMl9NQVhfU0VDIiwiVElNRVNUQU1QNjRfTUFYX1NFQyIsInV0ZjhXcml0ZSIsInN0ciIsImMiLCJsIiwiY2hhckNvZGVBdCIsInNldFVpbnQ4IiwidXRmOExlbmd0aCQxIiwiX2VuY29kZSIsImJ5dGVzIiwiZGVmZXJzIiwic2l6ZSIsIl9sZW5ndGgiLCJmbG9vciIsImlzRmluaXRlIiwiX2Zsb2F0IiwibXMiLCJnZXRUaW1lIiwidG9KU09OIiwiYWxsS2V5cyIsInVuZGVmaW5lZCIsImVuY29kZSIsImJ1ZiIsImRlZmVySW5kZXgiLCJkZWZlcldyaXR0ZW4iLCJuZXh0T2Zmc2V0IiwiZGVmZXIiLCJkZWZlckxlbmd0aCIsImJpbiIsIlVpbnQ4QXJyYXkiLCJqIiwic2V0RmxvYXQ2NCIsImJyb3dzZXIiLCJXZWJTb2NrZXQiLCJXZWJTb2NrZXRUcmFuc3BvcnQiLCJldmVudHMiLCJzZW5kIiwiZGF0YSIsIndzIiwiY29ubmVjdCIsInVybCIsInByb3RvY29scyIsImJpbmFyeVR5cGUiLCJvbm9wZW4iLCJvbm1lc3NhZ2UiLCJvbmNsb3NlIiwib25lcnJvciIsImNsb3NlIiwicmVhc29uIiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJDb25uZWN0aW9uIiwidHJhbnNwb3J0IiwiaXNPcGVuIiwiUHJvdG9jb2wiLCJFcnJvckNvZGUiLCJ1dGY4UmVhZCIsInV0ZjhMZW5ndGgiLCJzZXJpYWxpemVycyIsInJlZ2lzdGVyU2VyaWFsaXplciIsImlkIiwic2VyaWFsaXplciIsImdldFNlcmlhbGl6ZXIiLCJjcmVhdGVOYW5vRXZlbnRzIiwiZW1pdCIsImV2ZW50IiwiYXJncyIsIl9pIiwiY2FsbGJhY2tzIiwibGVuZ3RoXzEiLCJjYiIsIl9hIiwiZmlsdGVyIiwiRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJyZWdpc3RlciIsIm9uY2UiLCJpbnZva2UiLCJoYW5kbGVyIiwiaW52b2tlQXN5bmMiLCJhbGwiLCJtYXAiLCJyZW1vdmUiLCJpbmRleCIsImluZGV4T2YiLCJjbGVhciIsImNyZWF0ZVNpZ25hbCIsImVtaXR0ZXIiLCJjYWxsYmFjayIsImNvbW1vbmpzR2xvYmFsIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJmbiIsInVtZCIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwiZGVzYyIsInIiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJfX3NwcmVhZEFycmF5IiwiZnJvbSIsInBhY2siLCJhciIsImNvbmNhdCIsIlNXSVRDSF9UT19TVFJVQ1RVUkUiLCJUWVBFX0lEIiwiT1BFUkFUSU9OIiwiQ2hhbmdlVHJlZSIsInJlZiIsInBhcmVudCIsInJvb3QiLCJjaGFuZ2VkIiwiY2hhbmdlcyIsIk1hcCIsImFsbENoYW5nZXMiLCJTZXQiLCJjYWNoZXMiLCJjdXJyZW50Q3VzdG9tT3BlcmF0aW9uIiwic2V0UGFyZW50IiwicGFyZW50SW5kZXgiLCJpbmRleGVzIiwiU2NoZW1hIiwiZGVmaW5pdGlvbiIsImZpZWxkIiwic2NoZW1hIiwicGFyZW50SW5kZXhfMSIsImNoYW5nZVRyZWVlIiwicGFyZW50SW5kZXhfMiIsIm9wZXJhdGlvbiIsImNoYW5nZSIsImZpZWxkTmFtZSIsIkFERCIsImFzc2VydFZhbGlkSW5kZXgiLCJwcmV2aW91c0NoYW5nZSIsIkRFTEVURSIsIlRPVUNIIiwiREVMRVRFX0FORF9BREQiLCJhZGQiLCJ0b3VjaFBhcmVudHMiLCJ0b3VjaCIsImdldFR5cGUiLCJmaWVsZHNCeUluZGV4IiwicGFyZW50VHlwZSIsInZhbHVlcyIsImdldENoaWxkcmVuRmlsdGVyIiwiY2hpbGRGaWx0ZXJzIiwiZ2V0VmFsdWUiLCJkZWxldGUiLCJwcmV2aW91c1ZhbHVlIiwiZGlzY2FyZCIsImRpc2NhcmRBbGwiLCJjYWNoZSIsImNhY2hlZEJ5dGVzIiwiY2xvbmUiLCJlbnN1cmVSZWZJZCIsInJlZklkIiwiZ2V0TmV4dFVuaXF1ZUlkIiwiYWRkQ2FsbGJhY2siLCIkY2FsbGJhY2tzIiwiZXhpc3RpbmciLCJpdGVtIiwic3BsaWNlT25lIiwicmVtb3ZlQ2hpbGRSZWZzIiwibmVlZFJlbW92ZVJlZiIsIiRjaGFuZ2VzIiwiJGl0ZW1zIiwicmVtb3ZlUmVmIiwiYXJyIiwibGVuIiwiREVGQVVMVF9TT1JUIiwiQSIsIkIiLCJnZXRBcnJheVByb3h5IiwiUHJveHkiLCJvYmoiLCJwcm9wIiwiaXNOYU4iLCJhdCIsInNldFZhbHVlIiwicGFyc2VJbnQiLCJkZWxldGVBdCIsInNldEF0IiwiZGVsZXRlUHJvcGVydHkiLCJBcnJheVNjaGVtYSIsIml0ZW1zIiwiJGluZGV4ZXMiLCIkcmVmSWQiLCJvbkFkZCIsInRyaWdnZXJBbGwiLCJvblJlbW92ZSIsIm9uQ2hhbmdlIiwiUkVQTEFDRSIsImlzIiwic3BsaWNlIiwibGFzdEluZGV4IiwiX2IiLCIkZGVsZXRlQXQiLCJDTEVBUiIsImJpbmQiLCJqb2luIiwic2VwYXJhdG9yIiwicmV2ZXJzZSIsInJldmVyc2VkSXRlbXMiLCJzaGlmdCIsInNoaWZ0QXQiLCJzbGljZWQiLCJzb3J0IiwiY29tcGFyZUZuIiwic29ydGVkSXRlbXMiLCJkZWxldGVDb3VudCIsInJlbW92ZWRJdGVtcyIsInVuc2hpZnQiLCJhZGRlZExlbmd0aCIsInByZXZpb3VzVmFsdWVzIiwic2VhcmNoRWxlbWVudCIsImZyb21JbmRleCIsImxhc3RJbmRleE9mIiwiZXZlcnkiLCJjYWxsYmFja2ZuIiwic29tZSIsInJlZHVjZSIsImluaXRpYWxWYWx1ZSIsInJlZHVjZVJpZ2h0IiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImZpbGwiLCJjb3B5V2l0aGluIiwidG9Mb2NhbGVTdHJpbmciLCJlbnRyaWVzIiwiaW5jbHVkZXMiLCJmbGF0TWFwIiwiZmxhdCIsImRlcHRoIiwiZmluZExhc3QiLCJmaW5kTGFzdEluZGV4Iiwic2V0SW5kZXgiLCJnZXRJbmRleCIsImdldEJ5SW5kZXgiLCJkZWxldGVCeUluZGV4IiwidG9BcnJheSIsImlzRGVjb2RpbmciLCJjbG9uZWQiLCJnZXRNYXBQcm94eSIsIk1hcFNjaGVtYSIsImluaXRpYWxWYWx1ZXMiLCJ0b1N0cmluZ1RhZyIsImhhc0luZGV4IiwiaXNSZWYiLCJyZWdpc3RlcmVkVHlwZXMiLCJyZWdpc3RlclR5cGUiLCJpZGVudGlmaWVyIiwiU2NoZW1hRGVmaW5pdGlvbiIsImRlcHJlY2F0ZWQiLCJkZXNjcmlwdG9ycyIsImFkZEZpZWxkIiwiZ2V0TmV4dEZpZWxkSW5kZXgiLCJhcnJheSIsImhhc0ZpZWxkIiwiYWRkRmlsdGVyIiwiZmlsdGVycyIsImluZGV4ZXNXaXRoRmlsdGVycyIsImFkZENoaWxkcmVuRmlsdGVyIiwiaGFzRmlsdGVyIiwia2xhc3MiLCJfY29udGV4dCIsInVzZUZpbHRlcnMiLCJDb250ZXh0IiwidHlwZXMiLCJzY2hlbWFzIiwidHlwZWlkIiwiX2RlZmluaXRpb24iLCJfdHlwZWlkIiwib3B0aW9ucyIsImNvbnRleHQiLCJnbG9iYWxDb250ZXh0IiwiZGVmaW5pdGlvbkF0TGluZSIsInN0YWNrIiwic3BsaXQiLCJ0cmltIiwiaXNNYXAiLCJjaGlsZFR5cGUiLCJtYW51YWwiLCJmaWVsZENhY2hlZCIsImZpbHRlckNoaWxkcmVuIiwidGhyb3dzIiwiZGVmaW5lVHlwZXMiLCJmaWVsZHMiLCJpbnQ4JDEiLCJ1aW50OCQxIiwiaW50MTYkMSIsInVpbnQxNiQxIiwiaW50MzIkMSIsInVpbnQzMiQxIiwiYjQiLCJiMyIsImIyIiwiYjEiLCJpbnQ2NCQxIiwiaGlnaCIsImxvdyIsInVpbnQ2NCQxIiwiZmxvYXQzMiQxIiwid3JpdGVGbG9hdDMyIiwiZmxvYXQ2NCQxIiwid3JpdGVGbG9hdDY0IiwiX2ludDMyJDEiLCJJbnQzMkFycmF5IiwiX2Zsb2F0MzIkMSIsIkZsb2F0MzJBcnJheSIsIl9mbG9hdDY0JDEiLCJGbG9hdDY0QXJyYXkiLCJib29sZWFuJDEiLCJzdHJpbmckMSIsIm51bWJlciQxIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsImludDgiLCJ1aW50OCIsImludDE2IiwidWludDE2IiwiaW50MzIiLCJ1aW50MzIiLCJpbnQ2NCIsInVpbnQ2NCIsImZsb2F0MzIiLCJmbG9hdDY0IiwiYm9vbGVhbiIsIm51bWJlciIsIml0IiwicmVhZEZsb2F0MzIiLCJyZWFkRmxvYXQ2NCIsIl9pbnQzMiIsIl9mbG9hdDMyIiwiX2Zsb2F0NjQiLCJzdHJpbmdDaGVjayIsIm51bWJlckNoZWNrIiwiYXJyYXlDaGVjayIsInN3aXRjaFN0cnVjdHVyZUNoZWNrIiwiQ29sbGVjdGlvblNjaGVtYSIsImVudHJ5IiwiU2V0U2NoZW1hIiwiQ2xpZW50U3RhdGUiLCJyZWZJZHMiLCJXZWFrU2V0IiwiY29udGFpbmVySW5kZXhlcyIsIldlYWtNYXAiLCJhZGRSZWZJZCIsImNoYW5nZVRyZWUiLCJjbGllbnQiLCIkZmlsdGVyU3RhdGUiLCJSZWZlcmVuY2VUcmFja2VyIiwicmVmcyIsInJlZkNvdW50cyIsImRlbGV0ZWRSZWZzIiwibmV4dFVuaXF1ZUlkIiwiYWRkUmVmIiwiaW5jcmVtZW50Q291bnQiLCJjbGVhclJlZnMiLCJnYXJiYWdlQ29sbGVjdERlbGV0ZWRSZWZzIiwiY2hpbGQiLCJFbmNvZGVTY2hlbWFFcnJvciIsImFzc2VydFR5cGUiLCJ0eXBlb2ZUYXJnZXQiLCJhbGxvd051bGwiLCJmb3VuZFZhbHVlIiwiSlNPTiIsInN0cmluZ2lmeSIsImFzc2VydEluc3RhbmNlVHlwZSIsImVuY29kZVByaW1pdGl2ZVR5cGUiLCJlbmNvZGVGdW5jIiwiZGVjb2RlUHJpbWl0aXZlVHlwZSIsImRlZmluZVByb3BlcnRpZXMiLCJvbkVycm9yIiwicHJvcHMiLCJzZXREaXJ0eSIsImxpc3RlbiIsImltbWVkaWF0ZSIsIiRyb290IiwidG90YWxCeXRlcyIsIm5leHRSZWYiLCJpc1NjaGVtYSIsImZpZWxkSW5kZXgiLCJkeW5hbWljSW5kZXgiLCJuZXh0SXRlcmF0b3IiLCJyZWZJZF8xIiwiZ2V0U2NoZW1hVHlwZSIsImNyZWF0ZVR5cGVJbnN0YW5jZSIsInR5cGVEZWYiLCJyZWZJZF8yIiwidmFsdWVSZWYiLCJpdGVyIiwidmFsdWVfMSIsIl90cmlnZ2VyQ2hhbmdlcyIsImVuY29kZUFsbCIsInJvb3RDaGFuZ2VUcmVlIiwicmVmSWRzVmlzaXRlZCIsImNoYW5nZVRyZWVzIiwibnVtQ2hhbmdlVHJlZXMiLCJjbCIsImJlZ2luSW5kZXgiLCJ0cnlFbmNvZGVUeXBlSWQiLCJhcHBseUZpbHRlcnMiLCJyZWZJZHNEaXNzYWxsb3dlZCIsImZpbHRlcmVkQnl0ZXMiLCJfbG9vcF8xIiwiY2xpZW50SGFzUmVmSWQiLCJpc0VuY29kZUFsbCIsImluZGV4V2l0aEZpbHRlciIsImRpc2NhcmRBbGxDaGFuZ2VzIiwidGFyZ2V0VHlwZSIsImRlZmF1bHRUeXBlIiwiaW5zdGFuY2UiLCJfYyIsIl9kIiwiX2UiLCJfZiIsIl9nIiwiX2giLCJfaiIsInVuaXF1ZVJlZklkcyIsIiRyZWZzIiwiX2xvb3BfMiIsImR1bXBDaGFuZ2VzIiwiZHVtcCIsImN1cnJlbnRTdHJ1Y3R1cmUiLCJyZWZsZWN0aW9uQ29udGV4dCIsIlJlZmxlY3Rpb25GaWVsZCIsIlJlZmxlY3Rpb25UeXBlIiwiUmVmbGVjdGlvbiIsInJvb3RTY2hlbWFUeXBlIiwicmVmbGVjdGlvbiIsInJvb3RUeXBlIiwiYnVpbGRUeXBlIiwiY3VycmVudFR5cGUiLCJmaWVsZFR5cGUiLCJ0eXBlXzEiLCJjaGlsZFR5cGVTY2hlbWEiLCJyZWZlcmVuY2VkVHlwZSIsInR5cGVfMiIsInNjaGVtYVR5cGVzIiwicmVmbGVjdGlvblR5cGUiLCJzY2hlbWFUeXBlIiwicmVmVHlwZSIsInR5cGVJbmZvIiwicm9vdEluc3RhbmNlIiwiUm9vbSIsInJvb3RTY2hlbWEiLCJvblN0YXRlQ2hhbmdlIiwib25MZWF2ZSIsIm9uSm9pbiIsImhhc0pvaW5lZCIsIm9uTWVzc2FnZUhhbmRsZXJzIiwicm9vbUlkIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW5kcG9pbnQiLCJkZXZNb2RlQ2xvc2VDYWxsYmFjayIsInJvb20iLCJjb25uZWN0aW9uIiwib25NZXNzYWdlQ2FsbGJhY2siLCJERVZNT0RFX1JFU1RBUlQiLCJsZWF2ZSIsImNvbnNlbnRlZCIsIkxFQVZFX1JPT00iLCJDT05TRU5URUQiLCJvbk1lc3NhZ2UiLCJnZXRNZXNzYWdlSGFuZGxlcktleSIsImluaXRpYWxCeXRlcyIsIlJPT01fREFUQSIsImVuY29kZWQiLCJzZW5kQnl0ZXMiLCJST09NX0RBVEFfQllURVMiLCJnZXRTdGF0ZSIsIkpPSU5fUk9PTSIsInJlY29ubmVjdGlvblRva2VuIiwic2VyaWFsaXplcklkIiwiaGFuZHNoYWtlIiwiRVJST1IiLCJpdF8xIiwiY29kZV8xIiwiUk9PTV9EQVRBX1NDSEVNQSIsIml0XzIiLCJjb250ZXh0XzEiLCJkaXNwYXRjaE1lc3NhZ2UiLCJST09NX1NUQVRFIiwic2V0U3RhdGUiLCJST09NX1NUQVRFX1BBVENIIiwicGF0Y2giLCJpdF8zIiwiaXRfNCIsImVuY29kZWRTdGF0ZSIsImJpbmFyeVBhdGNoIiwibWVzc2FnZVR5cGUiLCJ0ZWFyZG93biIsInNyYyIsInRhciIsImhlYWRlcnMiLCJzdGF0dXNNZXNzYWdlIiwic3RhdHVzVGV4dCIsInN0YXR1c0NvZGUiLCJzdGF0dXMiLCJyZXNwb25zZSIsIm1ldGhvZCIsInVyaSIsIm9wdHMiLCJyZXMiLCJyZWoiLCJyZXEiLCJYTUxIdHRwUmVxdWVzdCIsInRtcCIsInRpbWVvdXQiLCJvbnRpbWVvdXQiLCJlcnIiLCJvcGVuIiwiaHJlZiIsIm9ubG9hZCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInRvTG93ZXJDYXNlIiwicGFyc2UiLCJyZXZpdmVyIiwiRm9ybURhdGEiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwicG9zdCIsImRlbCIsInB1dCIsImRlbF8xIiwiZ2V0XzEiLCJwYXRjaF8xIiwicG9zdF8xIiwicHV0XzEiLCJzZW5kXzEiLCJ4aHIiLCJodHRwaWUiLCJIVFRQIiwicGF0aCIsInJlcXVlc3QiLCJnZXRPcHRpb25zIiwiY2F0Y2giLCJhdXRoVG9rZW4iLCJzdG9yYWdlIiwiZ2V0U3RvcmFnZSIsImNjIiwic3lzIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiX0F1dGhfX2luaXRpYWxpemVkIiwiX0F1dGhfX2luaXRpYWxpemF0aW9uUHJvbWlzZSIsIl9BdXRoX19zaWduSW5XaW5kb3ciLCJfQXV0aF9fZXZlbnRzIiwiQXV0aCIsImh0dHAiLCJzZXR0aW5ncyIsInRva2VuIiwidW5iaW5kQ2hhbmdlIiwiZ2V0VXNlckRhdGEiLCJ1c2VyRGF0YSIsImVtaXRDaGFuZ2UiLCJ1c2VyIiwiZmluYWxseSIsInJlZ2lzdGVyV2l0aEVtYWlsQW5kUGFzc3dvcmQiLCJlbWFpbCIsInBhc3N3b3JkIiwic2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQiLCJzaWduSW5Bbm9ueW1vdXNseSIsInNlbmRQYXNzd29yZFJlc2V0RW1haWwiLCJzaWduSW5XaXRoUHJvdmlkZXIiLCJwcm92aWRlck5hbWUiLCJ3Iiwid2lkdGgiLCJoIiwiaGVpZ2h0IiwidXBncmFkaW5nVG9rZW4iLCJ0aXRsZSIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwibGVmdCIsInNjcmVlbiIsInRvcCIsImNsZWFySW50ZXJ2YWwiLCJyZWplY3Rpb25DaGVja2VyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEludGVydmFsIiwiY2xvc2VkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNpZ25PdXQiLCJhdXRoRGF0YSIsIk1hdGNoTWFrZUVycm9yIiwiREVGQVVMVF9FTkRQT0lOVCIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJwcm90b2NvbCIsInJlcGxhY2UiLCJwb3J0IiwiQ2xpZW50IiwiVVJMIiwic2VjdXJlIiwicGF0aG5hbWUiLCJlbmRzV2l0aCIsImF1dGgiLCJqb2luT3JDcmVhdGUiLCJyb29tTmFtZSIsImNyZWF0ZU1hdGNoTWFrZVJlcXVlc3QiLCJqb2luQnlJZCIsInJlY29ubmVjdCIsImdldEF2YWlsYWJsZVJvb21zIiwiY29uc3VtZVNlYXRSZXNlcnZhdGlvbiIsInJldXNlUm9vbUluc3RhbmNlIiwidGFyZ2V0Um9vbSIsImNyZWF0ZVJvb20iLCJzZXNzaW9uSWQiLCJidWlsZEVuZHBvaW50IiwiZGV2TW9kZSIsInJldHJ5Q291bnQiLCJyZXRyeU1heFJldHJpZXMiLCJyZXRyeVJlY29ubmVjdGlvbiIsImluZm8iLCJmcm9tQ29kZVBvaW50Iiwic2V0VGltZW91dCIsInBhcmFtcyIsIm5hbWVfMSIsInB1YmxpY0FkZHJlc3MiLCJnZXRFbmRwb2ludFBvcnQiLCJwcm9jZXNzSWQiLCJnZXRIdHRwRW5kcG9pbnQiLCJzZWdtZW50cyIsInN0YXJ0c1dpdGgiLCJTY2hlbWFTZXJpYWxpemVyIiwicmF3U3RhdGUiLCJwYXRjaGVzIiwiTm9uZVNlcmlhbGl6ZXIiLCJfX2VzTW9kdWxlIiwibG9hZGVyIiwidGhyb3dJbnZhbGlkV3JhcHBlciIsIkV2ZW50U3lzdGVtIiwic3Vic2NyaWJlcnMiLCJwdWJsaXNoIiwicXVldWUiLCJzdWJzY3JpYmUiLCJ1bnN1YnNjcmliZSIsInN1YnMiLCJzdWJDYiIsIkdsb2JhbEV2ZW50cyIsIkxvZHVUZXN0IiwidXNlU1NMIiwiSm9pblJvb20iLCJ4IiwidXBkYXRlIiwiZGVsdGFUaW1lIiwiTHVkb0NvbmZpZyIsInN2X2hvc3RuYW1lIiwic3ZfdXNlU1NMIiwic3ZfcG9ydCIsIkJvdEVuYWJsZSIsImZpbmFsR29hbEluZGV4IiwibWF4VGlsZXMiLCJpbml0aWFsUG9zaXRpb24iLCJwcm90ZWN0ZWRQb3MiLCJnb2FsUG9zaXRpb24iLCJtZXJnZVByb3RlY3RlZFBvcyIsImNvbG9yc1BsYXllciIsInBsYXllclNraW4iLCJQYXduVGVhbSIsIkdhbWVFdmVudCIsIkx1ZG9HYW1lTWFuYWdlciIsIkx1ZG9Mb2JieSIsIkx1ZG9XYWl0aW5nUm9vbSIsIl9kZWM1IiwiX2RlYzYiLCJfZGVjNyIsIl9kZWM4IiwiX2RlYzkiLCJfZGVjMTAiLCJFZGl0Qm94IiwiX2RlYzExIiwiU3ByaXRlIiwiX2RlYzEyIiwiU3ByaXRlRnJhbWUiLCJfZGVjMTMiLCJfZGVjMTQiLCJfZGVjMTUiLCJfZGVjMTYiLCJBbmltYXRpb24iLCJfZGVjMTciLCJfZGVzY3JpcHRvcjQiLCJfZGVzY3JpcHRvcjUiLCJfZGVzY3JpcHRvcjYiLCJfZGVzY3JpcHRvcjciLCJfZGVzY3JpcHRvcjgiLCJfZGVzY3JpcHRvcjkiLCJfZGVzY3JpcHRvcjEwIiwiX2Rlc2NyaXB0b3IxMSIsIl9kZXNjcmlwdG9yMTIiLCJfZGVzY3JpcHRvcjEzIiwiX2Rlc2NyaXB0b3IxNCIsIl9kZXNjcmlwdG9yMTUiLCJfZGVzY3JpcHRvcjE2IiwibHVkb1Bvc19tYWlucyIsImx1ZG9Qb3NfR29hbHMiLCJsdWRvUGxheWVycyIsImx1ZG9Qb3NfSG9tZXMiLCJnYW1lRGF0YSIsInBsYXllcklkIiwib2Zmc2V0UGxheWVyIiwib2Zmc2V0Qm9hcmQiLCJsYXN0UGF3bk1vdmUiLCJsYXN0RGljZVJvbGwiLCJqcyIsIklER2VuZXJhdG9yIiwiZ2V0TmV3SWQiLCJ1aV9Mb2JieSIsInNob3ciLCJsdWRvUG9zSG9sZGVyX21haW5ib2FyZCIsImNoaWxkcmVuIiwiTHVkb1BvcyIsImx1ZG9Qb3NIb2xkZXJfR29hbCIsImx1ZG9Qb3NIb2xkZXJfSG9tZSIsImx1ZG9QbGF5ZXJzSG9sZGVyIiwiTHVkb1BsYXllciIsIl9TdGFydCIsImRpY2VBbmltIiwiRklOSVNIRUQiLCJvblJvbGxEaWNlQW5pbWF0aW9uRmluaXNoZWQiLCJyZXBlYXRDb3VudCIsIm9uSm9pblJvb21DbGljayIsIm9uTGVhdmVSb29tIiwib25Kb2luUm9vbUNsaWNrMnYyIiwib25DcmVhdGVSb29tQ2xpY2siLCJzbG90Q291bnQiLCJnYW1lTW9kZSIsInVpV2FpdGluZ1Jvb20iLCJqb2luR2FtZVJvb21CeUlkIiwiaGlkZSIsIm9uQmFja3RvTG9iYnlDbGljayIsIm1lc3MiLCJTdGFydEdhbWUiLCJvblN0YXJ0R2FtZSIsIkRpY2VSb2xsZWQiLCJvblJvbGxEaWNlIiwiU3RhcnRUdXJuIiwib25TdGFydFR1cm4iLCJNb3ZlIiwib25Nb3ZlUGF3biIsIktpbGxlZCIsIm9uS2lsbCIsIkRpc2FibGUiLCJVc2VyRGF0YSIsInVzZXJMb2NhbERhdGEiLCJzdGF0aWNQb3NpdGlvbiIsInBsYXllcnMiLCJ0ZWFtIiwiYm9hcmROb2RlIiwiYW5nbGUiLCJob21lU3ByaXRlcyIsInNwcml0ZUZyYW1lIiwiaG9tZVNwcml0ZUZyYW1lcyIsInByb2ZpbGVzX2tleXMiLCJnZXRMdWRvUGxheWVyIiwiSW5pdCIsImNoZWNrRGljZUJ0biIsInBsYXllclR1cm4iLCJpc01lIiwiQ2hlY2tTaGllbGRlZCIsIkNoZWNrTGF5b3V0UGF3biIsIkNoZWNrTGF5ZXJQYXduIiwiYWN0aXZlIiwibHVkb1Bhd25zIiwiY2hlY2tTaGllbGRlZCIsInBhd25EYXRhIiwiYm9hcmRJbmRleCIsImNoZWNrTGF5b3V0IiwiaW5Ib21lIiwiTHVkb1Bhd25Ib2xkZXIiLCJhUG9zIiwiZ2V0V29ybGRQb3NpdGlvbiIsImJQb3MiLCJyb3VuZCIsIkx1ZG9QYXduIiwibGF5b3V0SW5kZXgiLCJSb2xsRGljZSIsImRpY2VDaGVhdEVkaXRCb3giLCJSb29sRGljZSIsImRpY2VCdG5BbmltYXRpb24iLCJkaWNlR2xvdyIsInBsYXkiLCJzZnhfcm9sbF9kaWNlIiwiZGljZVJvbGwiLCJkaWNlU3ByaXRlIiwiZGljZVNwcml0ZUZyYW1lcyIsIkJvdEFjdGlvbiIsIlJlcXVlc3RHYW1lU3RhdGUiLCJHYW1lU3RhdGUiLCJTa2lwVHVybiIsImJvbnVzVHlwZSIsImlzR2FpbkJvbnVzVHVybiIsIk1vdmVQYXduIiwicGF3bkluZGV4IiwiZ2V0Qm9hcmRJbmRleCIsInNmeF9jYXJfaG9ybnMiLCJsdWRvR2FtZU1hbmFnZXIiLCJfbHVkb0dhbWVNYW5hZ2VyIiwib25TZXR0aW5nQ2xpY2siLCJVaVBvcHVwTWFuYWdlciIsIlNob3dVaVNldHRpbmciLCJsdWRvUGxheWVyIiwiX3NoaWVsZEFuaW1hdGlvbkN1ckNsaXAiLCJqdW1wQW5pbVRpbWVNdWx0aSIsImp1bXBEZWxheSIsImFuaW1DdXJQb3MiLCJqdW1wQW5pbVRpbWUiLCJqdW1wSGVpZ2h0IiwibGF5b3V0U2l6ZSIsIl9sdWRvUGxheWVyIiwiX2luZGV4IiwiaW5kaWNhdGVyTm9kZSIsImJ0biIsInNoaWVsZEFuaW1hdGlvbiIsIm9uU2hpZWxkQW5pbWF0aW9uRmluaXNoZWQiLCJzZXRTaGllbGRBbmltYXRpb24iLCJhZGRUdXJuQW5pbWF0aW9uIiwib25BZGR0dXJuQW5pbUZpbmlzaGVkIiwic2V0V29ybGRQb3NpdGlvbiIsImdldFBvc05vZGVXb3JsZFBvc2l0aW9uIiwicGV0U3ByaXRlIiwicGV0U3ByaXRlRnJhbWVzIiwicm90YXRlIiwiUmVhZHlUb01vdmUiLCJpbmRpY2F0ZXJBcnJvdyIsIm9uQ2xpY2siLCJkZWxheSIsInNldFNpYmxpbmdJbmRleCIsIlR3ZWVuIiwic3RvcEFsbEJ5VGFyZ2V0IiwibGF5b3V0Iiwic2V0UG9zaXRpb24iLCJaRVJPIiwiX21vdmVQYXduVG9Qb3NfYW5pbSIsImlzRmlyc3RNb3ZlIiwic2Z4X3Bhd25fbW92ZSIsImdldE5leHRQb3MiLCJzaG93QWRkdHVybkFuaW0iLCJVdGlsaXR5IiwiQXN5bmNEZWxheSIsInNmeF9jYXJfY3Jhc2giLCJwb3NpdGlvbiIsIk9ORSIsIndvcmxkUG9zaXRpb24iLCJ0MSIsInYzIiwidDIiLCJzZXF1ZW5jZSIsInBhd25UZWFtIiwiYWJzIiwiaXNBbmltIiwic2Z4X2Nhcl9tb3ZlIiwidG90YWwiLCJtaWRQb2ludCIsInBvcyIsIl9jaGVja1NoaWVsZGVkIiwicGxheWVyRGF0YSIsInRlYW1tYXRlIiwiaXNBY3RpdmUiLCJzZnhfZ2Fpbl9zaGllbGQiLCJsb29rTGVmdCIsImNhclNwcml0ZSIsImNhclNwcml0ZUZyYW1lcyIsIlJvdGF0ZU5vZGUiLCJzZXRSb3RhdGlvbkZyb21FdWxlciIsImxvb2tSaWdodCIsImxvb2tVcCIsImxvb2tEb3duIiwiX25leHRQb3MiLCJfY3VyUG9zIiwic2Z4X2dhaW5fdHVybiIsIkxhYmVsIiwiX3Bhd25UZWFtIiwicGF3bnNIb2xkZXIiLCJlbGVtZW50IiwieW91clR1cm5fZ2xvdyIsInlvdXJUdXJuX2ZsYWciLCJfcGxheWVySWQiLCJuYW1lTGFiZWwiLCJhdmFPdXRsaW5lU3ByaXRlIiwiYXZhT3V0bGluZVNwcml0ZUZyYW1lcyIsIm5hbWVPdXRsaW5lU3ByaXRlIiwibmFtZU91dGxpbmVTcHJpdGVGcmFtZSIsImF2YVNwcml0ZSIsInBhd25zIiwidG90YWxNb3ZlQWJsZVBhd24iLCJzZnhfY2FyX3N0YXJ0IiwibWFuYWdlciIsInBsYXllcjFOb2RlIiwicGxheWVyMk5vZGUiLCJpc1Jvb21NYXN0ZXIiLCJyb29tTWFzdGVyIiwic3RhcnRCdG4iLCJwbGF5ZXIiLCJnZXRDb21wb25lbnRJbkNoaWxkcmVuIiwib25MZWF2ZVJvb21DbGljayIsIm9uU3RhcnRHYW1lQ2xpY2siLCJQb3BVcEJhc2UiLCJVSU9wYWNpdHkiLCJDQ0ludGVnZXIiLCJjYkhpZGUiLCJPblNob3ciLCJTY2FsZU5vZGUiLCJmYWRlVUlPcGFjaXR5Iiwib3BhY2l0eSIsIkNhbGxBY3Rpb24iLCJPbkhpZGUiLCJpc1BsYXlTb3VuZCIsIlNldENhbGxiYWNrSGlkZSIsIkF1ZGlvU291cmNlIiwiQXVkaW9DbGlwIiwiX2NsYXNzMyIsImRpcmVjdG9yIiwiVXBkYXRlU291bmRTdGF0ZSIsIlNldEJnTXVzaWMiLCJCR01fMSIsIkJnTXVzaWMiLCJ2b2x1bWUiLCJtdXNpY09uIiwic291bmRPbiIsIlNvdW5kRlgiLCJsb29wIiwicGxheU9uZVNob3QiLCJBdWRpb0NsaXBzIiwiUGxheVNvdW5kTG9vcCIsImNsaXAiLCJTdG9wU291bmRMb29wIiwiVUlGaXRXaWR0aEhlbHBlciIsIlVJVHJhbnNmb3JtIiwiYmFzZVNjYWxlIiwiZGVzaWduV2lkdGgiLCJmcmFtZUNvdW50IiwiZ2V0RGVzaWduUmVzb2x1dGlvblNpemUiLCJIYXJkQ29kZVdpZHRoIiwiYWRkUmVzaXplQ2FsbEJhY2siLCJVcGRhdGVTaXplIiwib25FbmFibGUiLCJkdCIsIl91cGRhdGVTaXplIiwiY2FudmFzVG9GaXQiLCJvbkRlc3Ryb3kiLCJyZW1vdmVSZXNpemVDYWxsQmFjayIsIlVpU2V0dGluZyIsIkxvYWRVc2VyTG9jYWxEYXRhIiwidWlTZXR0aW5nIiwiU2hvdyIsInN0YXRpY1Bvc2l0aW9uVG9nZ2xlIiwiaXNDaGVja2VkIiwibXVzaWNUb2dnbGUiLCJzb3VuZFRvZ2dsZSIsIkhpZGUiLCJTYXZlVXNlckxvY2FsRGF0YSIsIkxvZ2luIiwiY2hhbmdlX2xvZ192ZXJzaW9uIiwiaXNTZXRDYWxsQmFjayIsInNldFJlc2l6ZUNhbGxiYWNrIiwiUmVzaXplQ2FsbGJhY2siLCJjbGVhclRpbWVvdXQiLCJSZXNpemVDYk1hcCIsInR3ZWVuTnVtYmVyIiwiZHVyYXRpb24iLCJjYWxsSW5Qcm9ncmVzcyIsIm51bWJlclRvVHdlZW4iLCJOdW1iZXJUb1R3ZWVuIiwicHJvZ3Jlc3MiLCJjdXJyZW50IiwiY3VycmVudE4iLCJ0d2VlblNwcml0ZUNvbG9yIiwidG9Db2xvciIsInNwcml0ZSIsIm5ld0MiLCJQbGF5UGFydGljbGUiLCJQYXJ0aWNsZVN5c3RlbSIsImlzUGxheWluZyIsIlN0b3BQYXJ0aWNsZSIsImdl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QUNwQyxDQUFDOztNQUVWOztNQW5GYTNJLE9BQU8sQ0FFRHNILGNBQWMsR0FBRyxDQUFDO01BRnhCdEgsT0FBTyxDQUdEd0gsV0FBVyxHQUF3QixJQUFJbDFCLEdBQUcsRUFBRTtNQUhsRDB0QixPQUFPLENBSURvSCxhQUFhLEdBQUcsS0FBSztNQWlGakMsTUFBTVMsYUFBYSxDQUFDO1FBQ3ZCOXFDLFdBQVdBLENBQUN5RyxDQUFTLEVBQUU7VUFBQSxLQUd2QkEsQ0FBQztVQUZHLElBQUksQ0FBQ0EsQ0FBQyxHQUFHQSxDQUFDOztNQUdsQjs7Y0FBQyxDQUFBOUUsR0FBQSxDQUFBQyxHQUFBIiwiZmlsZSI6ImFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgZ2FtZSwgTm9kZSB9IGZyb20gJ2NjJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuaW1wb3J0IFdlYkFwcCBmcm9tIFwiQGdyYW1teWpzL3dlYi1hcHBcIjtcclxuaW1wb3J0IHRlbGVncmFtQXV0aCBmcm9tIFwiQHVzZS10ZWxlZ3JhbS1hdXRoL2NsaWVudFwiO1xyXG5cclxuQGNjY2xhc3MoJ0FjY291bnRNYW5hZ2VyJylcclxuZXhwb3J0IGNsYXNzIEFjY291bnRNYW5hZ2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHB1YmxpYyBzdGF0aWMgSW5zdGFuY2U6IEFjY291bnRNYW5hZ2VyO1xyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBpZiAoQWNjb3VudE1hbmFnZXIuSW5zdGFuY2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBBY2NvdW50TWFuYWdlci5JbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIGdhbWUuYWRkUGVyc2lzdFJvb3ROb2RlKHRoaXMubm9kZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpOiB2b2lkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIndpbmRvdy5UZWxlZ3JhbS5XZWJBcHAuZXhwYW5kKClcIik7XHJcbiAgICAgICAgICAgIHdpbmRvdy5UZWxlZ3JhbS5XZWJBcHAucmVhZHkoKTtcclxuICAgICAgICAgICAgd2luZG93LlRlbGVncmFtLldlYkFwcC5leHBhbmQoKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJvdElEID0gXCI3NTEwMDc1MzY5XCI7XHJcbiAgICBwdWJsaWMgYXN5bmMgTG9naW5UZWxlKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIldlYkFwcFwiLCB3aW5kb3cuVGVsZWdyYW0uV2ViQXBwLmluaXREYXRhVW5zYWZlKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oMCwgZXJyb3IpO1xyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbGVncmFtQXV0aCh0aGlzLmJvdElELCB7IHdpbmRvd0ZlYXR1cmVzOiB7IHBvcHVwOiB0cnVlIH0gfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4ocmVzdWx0KTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oMSwgZXJyb3IxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIlxyXG5pbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIE5vZGUsIENDRmxvYXQsIEJ1dHRvbiwgVmVjMywgdHdlZW4sIFR3ZWVuLCBUb2dnbGUsIGNvbG9yLCBTcHJpdGUsIENDQm9vbGVhbiB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgRW51bVNvdW5kLCBTb3VuZENvbnRyb2xsZXIgfSBmcm9tICcuL1NvdW5kQ29udHJvbGxlcic7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKipcclxuICogUHJlZGVmaW5lZCB2YXJpYWJsZXNcclxuICogTmFtZSA9IEJ1dHRvbkFuaW1cclxuICogRGF0ZVRpbWUgPSBTYXQgRGVjIDI1IDIwMjEgMTA6MjI6MjQgR01UKzA3MDAgKEluZG9jaGluYSBUaW1lKVxyXG4gKiBBdXRob3IgPSBhY2FjMTU4MVxyXG4gKiBGaWxlQmFzZW5hbWUgPSBCdXR0b25BbmltLnRzXHJcbiAqIEZpbGVCYXNlbmFtZU5vRXh0ZW5zaW9uID0gQnV0dG9uQW5pbVxyXG4gKiBVUkwgPSBkYjovL2Fzc2V0cy9TY3JpcHQvdXRpbGl0eS9CdXR0b25BbmltLnRzXHJcbiAqIE1hbnVhbFVybCA9IGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci8zLjMvbWFudWFsL2VuL1xyXG4gKlxyXG4gKi9cclxuXHJcbkBjY2NsYXNzKCdCdXR0b25BbmltJylcclxuZXhwb3J0IGNsYXNzIEJ1dHRvbkFuaW0gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KENDRmxvYXQpXHJcbiAgICBwcml2YXRlIHNjYWxlQWRkID0gMC4wODtcclxuICAgIEBwcm9wZXJ0eShDQ0Zsb2F0KVxyXG4gICAgcHJpdmF0ZSB0aW1lU2NhbGUgPSAxLjQ7XHJcbiAgICBAcHJvcGVydHkoQ0NCb29sZWFuKVxyXG4gICAgcHJpdmF0ZSBpc0NvbG9yVHJhbnNpdGlvbiA9IHRydWU7XHJcblxyXG4gICAgcHJpdmF0ZSB0YXJnZXROb2RlOiBOb2RlO1xyXG4gICAgcHJpdmF0ZSBidG5DbGljaztcclxuICAgIHByaXZhdGUgb3JpZ2luU2NhbGU6IFZlYzM7XHJcbiAgICBwcml2YXRlIHRhcmdldFNjYWxlOiBWZWMzO1xyXG4gICAgcHJpdmF0ZSBpc0NsaWNrZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgcHJpdmF0ZSBzY2FsZVR3ZWVuOiBUd2VlbjxOb2RlPjtcclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLmJ0bkNsaWNrID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChCdXR0b24pO1xyXG4gICAgICAgIGlmICh0aGlzLmJ0bkNsaWNrID09IG51bGwpIHRoaXMuYnRuQ2xpY2sgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KFRvZ2dsZSk7XHJcblxyXG4gICAgICAgIHRoaXMudGFyZ2V0Tm9kZSA9IHRoaXMuYnRuQ2xpY2sudGFyZ2V0O1xyXG4gICAgICAgIHRoaXMub3JpZ2luU2NhbGUgPSBuZXcgVmVjMyh0aGlzLnRhcmdldE5vZGUuZ2V0U2NhbGUoKSk7XHJcbiAgICAgICAgbGV0IHZlYzEgPSBuZXcgVmVjMyh0aGlzLnNjYWxlQWRkLCB0aGlzLnNjYWxlQWRkLCB0aGlzLnNjYWxlQWRkKTtcclxuICAgICAgICB0aGlzLnRhcmdldFNjYWxlID0gbmV3IFZlYzModGhpcy5vcmlnaW5TY2FsZSk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRTY2FsZS5zdWJ0cmFjdCh2ZWMxKTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX0NBTkNFTCwgdGhpcy5SZWxlYXNlLCB0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLkRvd24sIHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLm5vZGUub24oTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLlJlbGVhc2UsIHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0NvbG9yVHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLmJ0bkNsaWNrLnRyYW5zaXRpb24gPSBCdXR0b24uVHJhbnNpdGlvbi5DT0xPUjtcclxuICAgICAgICAgICAgdGhpcy5idG5DbGljay5ub3JtYWxDb2xvciA9IGNvbG9yKFwiI0ZGRkZGRlwiKTtcclxuICAgICAgICAgICAgdGhpcy5idG5DbGljay5wcmVzc2VkQ29sb3IgPSBjb2xvcihcIiNDOEM4QzhcIik7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuQ2xpY2suaG92ZXJDb2xvciA9IGNvbG9yKFwiI0UzRTNFM1wiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL3RoaXMuYnRuQ2xpY2sudHJhbnNpdGlvbiA9IEJ1dHRvbi5UcmFuc2l0aW9uLk5PTkU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uRGlzYWJsZSgpIHtcclxuICAgICAgICBpZiAodGhpcy50aW1lU2NhbGUgPD0gMCkgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLnNjYWxlVHdlZW4gIT0gbnVsbCkgdGhpcy5zY2FsZVR3ZWVuLnN0b3AoKTtcclxuICAgICAgICBpZiAodGhpcy50YXJnZXROb2RlKSB0aGlzLnRhcmdldE5vZGUuc2V0U2NhbGUodGhpcy5vcmlnaW5TY2FsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIERvd24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYnRuQ2xpY2suaW50ZXJhY3RhYmxlICE9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKFNvdW5kQ29udHJvbGxlci5JbnN0YW5jZSAhPSBudWxsKSBTb3VuZENvbnRyb2xsZXIuSW5zdGFuY2UuUGxheVNvdW5kKEVudW1Tb3VuZC5HYW1lVUlfYnV0dG9uX2NsaWNrKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVTY2FsZSA8PSAwKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNjYWxlVHdlZW4gIT0gbnVsbCkgdGhpcy5zY2FsZVR3ZWVuLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVR3ZWVuID0gdHdlZW4odGhpcy50YXJnZXROb2RlKS50byh0aGlzLnRpbWVTY2FsZSwgeyBzY2FsZTogdGhpcy50YXJnZXRTY2FsZSB9LCB7IGVhc2luZzogXCJlbGFzdGljT3V0XCIgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGVUd2Vlbi5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIFJlbGVhc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDbGlja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDbGlja2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lU2NhbGUgPD0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zY2FsZVR3ZWVuICE9IG51bGwpIHRoaXMuc2NhbGVUd2Vlbi5zdG9wKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGVUd2VlbiA9IHR3ZWVuKHRoaXMudGFyZ2V0Tm9kZSkudG8odGhpcy50aW1lU2NhbGUsIHsgc2NhbGU6IHRoaXMub3JpZ2luU2NhbGUgfSwgeyBlYXNpbmc6IFwiZWxhc3RpY091dFwiIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlVHdlZW4uc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBbMV0gQ2xhc3MgbWVtYmVyIGNvdWxkIGJlIGRlZmluZWQgbGlrZSB0aGlzLlxyXG4gKiBbMl0gVXNlIGBwcm9wZXJ0eWAgZGVjb3JhdG9yIGlmIHlvdXIgd2FudCB0aGUgbWVtYmVyIHRvIGJlIHNlcmlhbGl6YWJsZS5cclxuICogWzNdIFlvdXIgaW5pdGlhbGl6YXRpb24gZ29lcyBoZXJlLlxyXG4gKiBbNF0gWW91ciB1cGRhdGUgZnVuY3Rpb24gZ29lcyBoZXJlLlxyXG4gKlxyXG4gKiBMZWFybiBtb3JlIGFib3V0IHNjcmlwdGluZzogaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yLzMuMy9tYW51YWwvZW4vc2NyaXB0aW5nL1xyXG4gKiBMZWFybiBtb3JlIGFib3V0IENDQ2xhc3M6IGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci8zLjMvbWFudWFsL2VuL3NjcmlwdGluZy9jY2NsYXNzLmh0bWxcclxuICogTGVhcm4gbW9yZSBhYm91dCBsaWZlLWN5Y2xlIGNhbGxiYWNrczogaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yLzMuMy9tYW51YWwvZW4vc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcclxuICovXHJcbiIsImltcG9ydCBfY2pzTG9hZGVyIGZyb20gJ2NjZTovaW50ZXJuYWwvbWwvY2pzLWxvYWRlci5tanMnO1xubGV0IF9janNFeHBvcnRzO1xubGV0IF9Qcm90b2NvbDtcbmxldCBfRXJyb3JDb2RlO1xubGV0IF9PUEVSQVRJT047XG5sZXQgX0FycmF5U2NoZW1hO1xubGV0IF9Db2xsZWN0aW9uU2NoZW1hO1xubGV0IF9Db250ZXh0O1xubGV0IF9NYXBTY2hlbWE7XG5sZXQgX1JlZmxlY3Rpb247XG5sZXQgX1JlZmxlY3Rpb25GaWVsZDtcbmxldCBfUmVmbGVjdGlvblR5cGU7XG5sZXQgX1NjaGVtYTtcbmxldCBfU2NoZW1hRGVmaW5pdGlvbjtcbmxldCBfU2V0U2NoZW1hO1xubGV0IF9kZWNvZGU7XG5sZXQgX2RlZmluZVR5cGVzO1xubGV0IF9kZXByZWNhdGVkO1xubGV0IF9kdW1wQ2hhbmdlcztcbmxldCBfZW5jb2RlMDtcbmxldCBfZmlsdGVyO1xubGV0IF9maWx0ZXJDaGlsZHJlbjtcbmxldCBfaGFzRmlsdGVyO1xubGV0IF9yZWdpc3RlclR5cGU7XG5sZXQgX3R5cGU7XG5sZXQgX19fZXNNb2R1bGU7XG5sZXQgX0F1dGg7XG5sZXQgX0NsaWVudDtcbmxldCBfUm9vbTtcbmxldCBfU2NoZW1hU2VyaWFsaXplcjtcbmxldCBfcmVnaXN0ZXJTZXJpYWxpemVyO1xuY29uc3QgX19janNNZXRhVVJMID0gaW1wb3J0Lm1ldGEudXJsO1xuX2Nqc0xvYWRlci5kZWZpbmUoX19janNNZXRhVVJMLCBmdW5jdGlvbiAoZXhwb3J0cywgcmVxdWlyZSwgbW9kdWxlLCBfX2ZpbGVuYW1lLCBfX2Rpcm5hbWUpIHtcbi8vICNyZWdpb24gT1JJR0lOQUwgQ09ERVxuXG5cbiAvLyBUSElTIFZFUlNJT04gVVNFUyBcIlhNTEh0dHBSZXF1ZXN0XCIgSU5TVEVBRCBPRiBcImZldGNoXCIgRk9SIENPTVBBVElCSUxJVFkgV0lUSCBDT0NPUyBDUkVBVE9SXG4gLy8gY29seXNldXMuanNAMC4xNS4xNyAoQGNvbHlzZXVzL3NjaGVtYSAyLjAuOSlcbiAoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKCdjb2x5c2V1cy5qcycsIFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gICAgIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLkNvbHlzZXVzID0ge30pKTtcbiB9KSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgIGZ1bmN0aW9uIF9tZXJnZU5hbWVzcGFjZXMobiwgbSkge1xuICAgICAgICAgbS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgZSAmJiB0eXBlb2YgZSAhPT0gJ3N0cmluZycgJiYgIUFycmF5LmlzQXJyYXkoZSkgJiYgT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgICAgICBpZiAoayAhPT0gJ2RlZmF1bHQnICYmICEoayBpbiBuKSkge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIGspO1xuICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIGssIGQuZ2V0ID8gZCA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZVtrXTsgfVxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH0pO1xuICAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUobik7XG4gICAgIH1cblxuICAgICAvL1xuICAgICAvLyBQb2x5ZmlsbHMgZm9yIGxlZ2FjeSBlbnZpcm9ubWVudHNcbiAgICAgLy9cbiAgICAgLypcbiAgICAgICogU3VwcG9ydCBBbmRyb2lkIDQuNC54XG4gICAgICAqL1xuICAgICBpZiAoIUFycmF5QnVmZmVyLmlzVmlldykge1xuICAgICAgICAgQXJyYXlCdWZmZXIuaXNWaWV3ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICByZXR1cm4gYSAhPT0gbnVsbCAmJiB0eXBlb2YgKGEpID09PSAnb2JqZWN0JyAmJiBhLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xuICAgICAgICAgfTtcbiAgICAgfVxuICAgICAvLyBEZWZpbmUgZ2xvYmFsVGhpcyBpZiBub3QgYXZhaWxhYmxlLlxuICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY29seXNldXMvY29seXNldXMuanMvaXNzdWVzLzg2XG4gICAgIGlmICh0eXBlb2YgKGdsb2JhbFRoaXMpID09PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICB0eXBlb2YgKHdpbmRvdykgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgIHdpbmRvd1snZ2xvYmFsVGhpcyddID0gd2luZG93O1xuICAgICB9XG5cbiAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuICAgICBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxuICAgICBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG4gICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuICAgICBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuICAgICBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbiAgICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbiAgICAgTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuICAgICBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcbiAgICAgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4gICAgIC8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG4gICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICB9O1xyXG5cclxuICAgICBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgIH1cclxuXHJcbiAgICAgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICByZXR1cm4gdDtcclxuICAgICAgICAgfTtcclxuICAgICAgICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgfTtcclxuXHJcbiAgICAgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgICAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgICAgICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICAgICAgIH0pO1xyXG4gICAgIH1cclxuXHJcbiAgICAgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgICAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgICAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgICAgICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICAgICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgICAgICAgfVxyXG4gICAgIH1cclxuXHJcbiAgICAgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgICAgICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgICAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgICAgICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxuICAgICB9XHJcblxyXG4gICAgIGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgICAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICAgICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgICAgICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbiAgICAgfVxuXG4gICAgIHZhciBDbG9zZUNvZGU7XG4gICAgIChmdW5jdGlvbiAoQ2xvc2VDb2RlKSB7XG4gICAgICAgICBDbG9zZUNvZGVbQ2xvc2VDb2RlW1wiQ09OU0VOVEVEXCJdID0gNDAwMF0gPSBcIkNPTlNFTlRFRFwiO1xuICAgICAgICAgQ2xvc2VDb2RlW0Nsb3NlQ29kZVtcIkRFVk1PREVfUkVTVEFSVFwiXSA9IDQwMTBdID0gXCJERVZNT0RFX1JFU1RBUlRcIjtcbiAgICAgfSkoQ2xvc2VDb2RlIHx8IChDbG9zZUNvZGUgPSB7fSkpO1xuICAgICB2YXIgU2VydmVyRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICBfX2V4dGVuZHMoU2VydmVyRXJyb3IsIF9zdXBlcik7XG4gICAgICAgICBmdW5jdGlvbiBTZXJ2ZXJFcnJvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgICAgICBfdGhpcy5uYW1lID0gXCJTZXJ2ZXJFcnJvclwiO1xuICAgICAgICAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBTZXJ2ZXJFcnJvcjtcbiAgICAgfShFcnJvcikpO1xuXG4gICAgIC8qKlxuICAgICAgKiBDb3B5cmlnaHQgKGMpIDIwMTQgSW9uIERyaXZlIFNvZnR3YXJlIEx0ZC5cbiAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2RhcnJhY2hlcXVlc25lL25vdGVwYWNrL1xuICAgICAgKlxuICAgICAgKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gICAgICAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAgICAgICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICAgICAgKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gICAgICAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICAgICAgKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICAgICAgKlxuICAgICAgKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAgICAgICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAgICAgICpcbiAgICAgICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICAgICAgKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICAgICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gICAgICAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAgICAgICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICAgICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAgICAgICogU09GVFdBUkUuXG4gICAgICAqL1xuICAgICAvKipcbiAgICAgICogUGF0Y2ggZm9yIENvbHlzZXVzOlxuICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAqIG5vdGVwYWNrLmlvQDMuMC4xXG4gICAgICAqXG4gICAgICAqIGFkZGVkIGBvZmZzZXRgIG9uIERlY29kZXIgY29uc3RydWN0b3IsIGZvciBtZXNzYWdlcyBhcnJpdmluZyB3aXRoIGEgY29kZVxuICAgICAgKiBiZWZvcmUgYWN0dWFsIG1zZ3BhY2sgZGF0YVxuICAgICAgKi9cbiAgICAgLy9cbiAgICAgLy8gREVDT0RFUlxuICAgICAvL1xuICAgICBmdW5jdGlvbiBEZWNvZGVyKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgICAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgICB0aGlzLl9idWZmZXIgPSBidWZmZXI7XG4gICAgICAgICAgICAgdGhpcy5fdmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLl9idWZmZXIpO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICB0aGlzLl9idWZmZXIgPSBidWZmZXIuYnVmZmVyO1xuICAgICAgICAgICAgIHRoaXMuX3ZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5fYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50Jyk7XG4gICAgICAgICB9XG4gICAgIH1cbiAgICAgZnVuY3Rpb24gdXRmOFJlYWQkMSh2aWV3LCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgICAgdmFyIHN0cmluZyA9ICcnLCBjaHIgPSAwO1xuICAgICAgICAgZm9yICh2YXIgaSA9IG9mZnNldCwgZW5kID0gb2Zmc2V0ICsgbGVuZ3RoOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgICB2YXIgYnl0ZSA9IHZpZXcuZ2V0VWludDgoaSk7XG4gICAgICAgICAgICAgaWYgKChieXRlICYgMHg4MCkgPT09IDB4MDApIHtcbiAgICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSk7XG4gICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoKGJ5dGUgJiAweGUwKSA9PT0gMHhjMCkge1xuICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGJ5dGUgJiAweDFmKSA8PCA2KSB8XG4gICAgICAgICAgICAgICAgICAgICAodmlldy5nZXRVaW50OCgrK2kpICYgMHgzZikpO1xuICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgaWYgKChieXRlICYgMHhmMCkgPT09IDB4ZTApIHtcbiAgICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChieXRlICYgMHgwZikgPDwgMTIpIHxcbiAgICAgICAgICAgICAgICAgICAgICgodmlldy5nZXRVaW50OCgrK2kpICYgMHgzZikgPDwgNikgfFxuICAgICAgICAgICAgICAgICAgICAgKCh2aWV3LmdldFVpbnQ4KCsraSkgJiAweDNmKSA8PCAwKSk7XG4gICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoKGJ5dGUgJiAweGY4KSA9PT0gMHhmMCkge1xuICAgICAgICAgICAgICAgICBjaHIgPSAoKGJ5dGUgJiAweDA3KSA8PCAxOCkgfFxuICAgICAgICAgICAgICAgICAgICAgKCh2aWV3LmdldFVpbnQ4KCsraSkgJiAweDNmKSA8PCAxMikgfFxuICAgICAgICAgICAgICAgICAgICAgKCh2aWV3LmdldFVpbnQ4KCsraSkgJiAweDNmKSA8PCA2KSB8XG4gICAgICAgICAgICAgICAgICAgICAoKHZpZXcuZ2V0VWludDgoKytpKSAmIDB4M2YpIDw8IDApO1xuICAgICAgICAgICAgICAgICBpZiAoY2hyID49IDB4MDEwMDAwKSB7IC8vIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICAgICAgICAgICBjaHIgLT0gMHgwMTAwMDA7XG4gICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoY2hyID4+PiAxMCkgKyAweEQ4MDAsIChjaHIgJiAweDNGRikgKyAweERDMDApO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGUgJyArIGJ5dGUudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgIH1cbiAgICAgRGVjb2Rlci5wcm90b3R5cGUuX2FycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICAgdmFyIHZhbHVlID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgdmFsdWVbaV0gPSB0aGlzLl9wYXJzZSgpO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICB9O1xuICAgICBEZWNvZGVyLnByb3RvdHlwZS5fbWFwID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICAgdmFyIGtleSA9ICcnLCB2YWx1ZSA9IHt9O1xuICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgIGtleSA9IHRoaXMuX3BhcnNlKCk7XG4gICAgICAgICAgICAgdmFsdWVba2V5XSA9IHRoaXMuX3BhcnNlKCk7XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgIH07XG4gICAgIERlY29kZXIucHJvdG90eXBlLl9zdHIgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICAgICB2YXIgdmFsdWUgPSB1dGY4UmVhZCQxKHRoaXMuX3ZpZXcsIHRoaXMuX29mZnNldCwgbGVuZ3RoKTtcbiAgICAgICAgIHRoaXMuX29mZnNldCArPSBsZW5ndGg7XG4gICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgIH07XG4gICAgIERlY29kZXIucHJvdG90eXBlLl9iaW4gPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9idWZmZXIuc2xpY2UodGhpcy5fb2Zmc2V0LCB0aGlzLl9vZmZzZXQgKyBsZW5ndGgpO1xuICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgfTtcbiAgICAgRGVjb2Rlci5wcm90b3R5cGUuX3BhcnNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgdmFyIHByZWZpeCA9IHRoaXMuX3ZpZXcuZ2V0VWludDgodGhpcy5fb2Zmc2V0KyspO1xuICAgICAgICAgdmFyIHZhbHVlLCBsZW5ndGggPSAwLCB0eXBlID0gMCwgaGkgPSAwLCBsbyA9IDA7XG4gICAgICAgICBpZiAocHJlZml4IDwgMHhjMCkge1xuICAgICAgICAgICAgIC8vIHBvc2l0aXZlIGZpeGludFxuICAgICAgICAgICAgIGlmIChwcmVmaXggPCAweDgwKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIC8vIGZpeG1hcFxuICAgICAgICAgICAgIGlmIChwcmVmaXggPCAweDkwKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXAocHJlZml4ICYgMHgwZik7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIC8vIGZpeGFycmF5XG4gICAgICAgICAgICAgaWYgKHByZWZpeCA8IDB4YTApIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5KHByZWZpeCAmIDB4MGYpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAvLyBmaXhzdHJcbiAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RyKHByZWZpeCAmIDB4MWYpO1xuICAgICAgICAgfVxuICAgICAgICAgLy8gbmVnYXRpdmUgZml4aW50XG4gICAgICAgICBpZiAocHJlZml4ID4gMHhkZikge1xuICAgICAgICAgICAgIHJldHVybiAoMHhmZiAtIHByZWZpeCArIDEpICogLTE7XG4gICAgICAgICB9XG4gICAgICAgICBzd2l0Y2ggKHByZWZpeCkge1xuICAgICAgICAgICAgIC8vIG5pbFxuICAgICAgICAgICAgIGNhc2UgMHhjMDpcbiAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgLy8gZmFsc2VcbiAgICAgICAgICAgICBjYXNlIDB4YzI6XG4gICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAvLyB0cnVlXG4gICAgICAgICAgICAgY2FzZSAweGMzOlxuICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAvLyBiaW5cbiAgICAgICAgICAgICBjYXNlIDB4YzQ6XG4gICAgICAgICAgICAgICAgIGxlbmd0aCA9IHRoaXMuX3ZpZXcuZ2V0VWludDgodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iaW4obGVuZ3RoKTtcbiAgICAgICAgICAgICBjYXNlIDB4YzU6XG4gICAgICAgICAgICAgICAgIGxlbmd0aCA9IHRoaXMuX3ZpZXcuZ2V0VWludDE2KHRoaXMuX29mZnNldCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCArPSAyO1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmluKGxlbmd0aCk7XG4gICAgICAgICAgICAgY2FzZSAweGM2OlxuICAgICAgICAgICAgICAgICBsZW5ndGggPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gNDtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JpbihsZW5ndGgpO1xuICAgICAgICAgICAgIC8vIGV4dFxuICAgICAgICAgICAgIGNhc2UgMHhjNzpcbiAgICAgICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50OCh0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0eXBlID0gdGhpcy5fdmlldy5nZXRJbnQ4KHRoaXMuX29mZnNldCArIDEpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyB0aW1lc3RhbXAgOTZcbiAgICAgICAgICAgICAgICAgICAgIHZhciBucyA9IHRoaXMuX3ZpZXcuZ2V0VWludDMyKHRoaXMuX29mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICBoaSA9IHRoaXMuX3ZpZXcuZ2V0SW50MzIodGhpcy5fb2Zmc2V0ICsgNCk7XG4gICAgICAgICAgICAgICAgICAgICBsbyA9IHRoaXMuX3ZpZXcuZ2V0VWludDMyKHRoaXMuX29mZnNldCArIDgpO1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDEyO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKChoaSAqIDB4MTAwMDAwMDAwICsgbG8pICogMWUzICsgbnMgLyAxZTYpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHJldHVybiBbdHlwZSwgdGhpcy5fYmluKGxlbmd0aCldO1xuICAgICAgICAgICAgIGNhc2UgMHhjODpcbiAgICAgICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50MTYodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdHlwZSA9IHRoaXMuX3ZpZXcuZ2V0SW50OCh0aGlzLl9vZmZzZXQgKyAyKTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDM7XG4gICAgICAgICAgICAgICAgIHJldHVybiBbdHlwZSwgdGhpcy5fYmluKGxlbmd0aCldO1xuICAgICAgICAgICAgIGNhc2UgMHhjOTpcbiAgICAgICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdHlwZSA9IHRoaXMuX3ZpZXcuZ2V0SW50OCh0aGlzLl9vZmZzZXQgKyA0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDU7XG4gICAgICAgICAgICAgICAgIHJldHVybiBbdHlwZSwgdGhpcy5fYmluKGxlbmd0aCldO1xuICAgICAgICAgICAgIC8vIGZsb2F0XG4gICAgICAgICAgICAgY2FzZSAweGNhOlxuICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3ZpZXcuZ2V0RmxvYXQzMih0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gNDtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgIGNhc2UgMHhjYjpcbiAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl92aWV3LmdldEZsb2F0NjQodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDg7XG4gICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAvLyB1aW50XG4gICAgICAgICAgICAgY2FzZSAweGNjOlxuICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3ZpZXcuZ2V0VWludDgodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICBjYXNlIDB4Y2Q6XG4gICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fdmlldy5nZXRVaW50MTYodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDI7XG4gICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICBjYXNlIDB4Y2U6XG4gICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICBjYXNlIDB4Y2Y6XG4gICAgICAgICAgICAgICAgIGhpID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0KSAqIE1hdGgucG93KDIsIDMyKTtcbiAgICAgICAgICAgICAgICAgbG8gPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQgKyA0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDg7XG4gICAgICAgICAgICAgICAgIHJldHVybiBoaSArIGxvO1xuICAgICAgICAgICAgIC8vIGludFxuICAgICAgICAgICAgIGNhc2UgMHhkMDpcbiAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl92aWV3LmdldEludDgodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICBjYXNlIDB4ZDE6XG4gICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fdmlldy5nZXRJbnQxNih0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgIGNhc2UgMHhkMjpcbiAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl92aWV3LmdldEludDMyKHRoaXMuX29mZnNldCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCArPSA0O1xuICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgY2FzZSAweGQzOlxuICAgICAgICAgICAgICAgICBoaSA9IHRoaXMuX3ZpZXcuZ2V0SW50MzIodGhpcy5fb2Zmc2V0KSAqIE1hdGgucG93KDIsIDMyKTtcbiAgICAgICAgICAgICAgICAgbG8gPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQgKyA0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDg7XG4gICAgICAgICAgICAgICAgIHJldHVybiBoaSArIGxvO1xuICAgICAgICAgICAgIC8vIGZpeGV4dFxuICAgICAgICAgICAgIGNhc2UgMHhkNDpcbiAgICAgICAgICAgICAgICAgdHlwZSA9IHRoaXMuX3ZpZXcuZ2V0SW50OCh0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMTtcbiAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IDB4MDApIHtcbiAgICAgICAgICAgICAgICAgICAgIC8vIGN1c3RvbSBlbmNvZGluZyBmb3IgJ3VuZGVmaW5lZCcgKGtlcHQgZm9yIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkpXG4gICAgICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIFt0eXBlLCB0aGlzLl9iaW4oMSldO1xuICAgICAgICAgICAgIGNhc2UgMHhkNTpcbiAgICAgICAgICAgICAgICAgdHlwZSA9IHRoaXMuX3ZpZXcuZ2V0SW50OCh0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIFt0eXBlLCB0aGlzLl9iaW4oMildO1xuICAgICAgICAgICAgIGNhc2UgMHhkNjpcbiAgICAgICAgICAgICAgICAgdHlwZSA9IHRoaXMuX3ZpZXcuZ2V0SW50OCh0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMTtcbiAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyB0aW1lc3RhbXAgMzJcbiAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCArPSA0O1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlICogMWUzKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICByZXR1cm4gW3R5cGUsIHRoaXMuX2Jpbig0KV07XG4gICAgICAgICAgICAgY2FzZSAweGQ3OlxuICAgICAgICAgICAgICAgICB0eXBlID0gdGhpcy5fdmlldy5nZXRJbnQ4KHRoaXMuX29mZnNldCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCArPSAxO1xuICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gMHgwMCkge1xuICAgICAgICAgICAgICAgICAgICAgLy8gY3VzdG9tIGRhdGUgZW5jb2RpbmcgKGtlcHQgZm9yIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkpXG4gICAgICAgICAgICAgICAgICAgICBoaSA9IHRoaXMuX3ZpZXcuZ2V0SW50MzIodGhpcy5fb2Zmc2V0KSAqIE1hdGgucG93KDIsIDMyKTtcbiAgICAgICAgICAgICAgICAgICAgIGxvID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0ICsgNCk7XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gODtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShoaSArIGxvKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgIC8vIHRpbWVzdGFtcCA2NFxuICAgICAgICAgICAgICAgICAgICAgaGkgPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgbG8gPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQgKyA0KTtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCArPSA4O1xuICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSAoaGkgJiAweDMpICogMHgxMDAwMDAwMDAgKyBsbztcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShzICogMWUzICsgKGhpID4+PiAyKSAvIDFlNik7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIFt0eXBlLCB0aGlzLl9iaW4oOCldO1xuICAgICAgICAgICAgIGNhc2UgMHhkODpcbiAgICAgICAgICAgICAgICAgdHlwZSA9IHRoaXMuX3ZpZXcuZ2V0SW50OCh0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIFt0eXBlLCB0aGlzLl9iaW4oMTYpXTtcbiAgICAgICAgICAgICAvLyBzdHJcbiAgICAgICAgICAgICBjYXNlIDB4ZDk6XG4gICAgICAgICAgICAgICAgIGxlbmd0aCA9IHRoaXMuX3ZpZXcuZ2V0VWludDgodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHIobGVuZ3RoKTtcbiAgICAgICAgICAgICBjYXNlIDB4ZGE6XG4gICAgICAgICAgICAgICAgIGxlbmd0aCA9IHRoaXMuX3ZpZXcuZ2V0VWludDE2KHRoaXMuX29mZnNldCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCArPSAyO1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RyKGxlbmd0aCk7XG4gICAgICAgICAgICAgY2FzZSAweGRiOlxuICAgICAgICAgICAgICAgICBsZW5ndGggPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gNDtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0cihsZW5ndGgpO1xuICAgICAgICAgICAgIC8vIGFycmF5XG4gICAgICAgICAgICAgY2FzZSAweGRjOlxuICAgICAgICAgICAgICAgICBsZW5ndGggPSB0aGlzLl92aWV3LmdldFVpbnQxNih0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICAgY2FzZSAweGRkOlxuICAgICAgICAgICAgICAgICBsZW5ndGggPSB0aGlzLl92aWV3LmdldFVpbnQzMih0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gNDtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICAgLy8gbWFwXG4gICAgICAgICAgICAgY2FzZSAweGRlOlxuICAgICAgICAgICAgICAgICBsZW5ndGggPSB0aGlzLl92aWV3LmdldFVpbnQxNih0aGlzLl9vZmZzZXQpO1xuICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hcChsZW5ndGgpO1xuICAgICAgICAgICAgIGNhc2UgMHhkZjpcbiAgICAgICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5fdmlldy5nZXRVaW50MzIodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXAobGVuZ3RoKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHBhcnNlJyk7XG4gICAgIH07XG4gICAgIGZ1bmN0aW9uIGRlY29kZShidWZmZXIsIG9mZnNldCkge1xuICAgICAgICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICAgICAgIHZhciBkZWNvZGVyID0gbmV3IERlY29kZXIoYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICAgdmFyIHZhbHVlID0gZGVjb2Rlci5fcGFyc2UoKTtcbiAgICAgICAgIGlmIChkZWNvZGVyLl9vZmZzZXQgIT09IGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChidWZmZXIuYnl0ZUxlbmd0aCAtIGRlY29kZXIuX29mZnNldCkgKyAnIHRyYWlsaW5nIGJ5dGVzJyk7XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgIH1cbiAgICAgLy9cbiAgICAgLy8gRU5DT0RFUlxuICAgICAvL1xuICAgICB2YXIgVElNRVNUQU1QMzJfTUFYX1NFQyA9IDB4MTAwMDAwMDAwIC0gMTsgLy8gMzItYml0IHVuc2lnbmVkIGludFxuICAgICB2YXIgVElNRVNUQU1QNjRfTUFYX1NFQyA9IDB4NDAwMDAwMDAwIC0gMTsgLy8gMzQtYml0IHVuc2lnbmVkIGludFxuICAgICBmdW5jdGlvbiB1dGY4V3JpdGUodmlldywgb2Zmc2V0LCBzdHIpIHtcbiAgICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gc3RyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgYyk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAweGMwIHwgKGMgPj4gNikpO1xuICAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAweDgwIHwgKGMgJiAweDNmKSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKGMgPCAweGQ4MDAgfHwgYyA+PSAweGUwMDApIHtcbiAgICAgICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgMHhlMCB8IChjID4+IDEyKSk7XG4gICAgICAgICAgICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIDB4ODAgfCAoYyA+PiA2KSAmIDB4M2YpO1xuICAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAweDgwIHwgKGMgJiAweDNmKSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M2ZmKSA8PCAxMCkgfCAoc3RyLmNoYXJDb2RlQXQoaSkgJiAweDNmZikpO1xuICAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAweGYwIHwgKGMgPj4gMTgpKTtcbiAgICAgICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgMHg4MCB8IChjID4+IDEyKSAmIDB4M2YpO1xuICAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCAweDgwIHwgKGMgPj4gNikgJiAweDNmKTtcbiAgICAgICAgICAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgMHg4MCB8IChjICYgMHgzZikpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgfVxuICAgICBmdW5jdGlvbiB1dGY4TGVuZ3RoJDEoc3RyKSB7XG4gICAgICAgICB2YXIgYyA9IDAsIGxlbmd0aCA9IDA7XG4gICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHN0ci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICAgICAgIGxlbmd0aCArPSAxO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IDI7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKGMgPCAweGQ4MDAgfHwgYyA+PSAweGUwMDApIHtcbiAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IDM7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgIGxlbmd0aCArPSA0O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgIH1cbiAgICAgZnVuY3Rpb24gX2VuY29kZShieXRlcywgZGVmZXJzLCB2YWx1ZSkge1xuICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsIGkgPSAwLCBsID0gMCwgaGkgPSAwLCBsbyA9IDAsIGxlbmd0aCA9IDAsIHNpemUgPSAwO1xuICAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgbGVuZ3RoID0gdXRmOExlbmd0aCQxKHZhbHVlKTtcbiAgICAgICAgICAgICAvLyBmaXhzdHJcbiAgICAgICAgICAgICBpZiAobGVuZ3RoIDwgMHgyMCkge1xuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKGxlbmd0aCB8IDB4YTApO1xuICAgICAgICAgICAgICAgICBzaXplID0gMTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgLy8gc3RyIDhcbiAgICAgICAgICAgICBlbHNlIGlmIChsZW5ndGggPCAweDEwMCkge1xuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4ZDksIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgIHNpemUgPSAyO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAvLyBzdHIgMTZcbiAgICAgICAgICAgICBlbHNlIGlmIChsZW5ndGggPCAweDEwMDAwKSB7XG4gICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhkYSwgbGVuZ3RoID4+IDgsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgIHNpemUgPSAzO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAvLyBzdHIgMzJcbiAgICAgICAgICAgICBlbHNlIGlmIChsZW5ndGggPCAweDEwMDAwMDAwMCkge1xuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4ZGIsIGxlbmd0aCA+PiAyNCwgbGVuZ3RoID4+IDE2LCBsZW5ndGggPj4gOCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgc2l6ZSA9IDU7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0cmluZyB0b28gbG9uZycpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBkZWZlcnMucHVzaCh7IF9zdHI6IHZhbHVlLCBfbGVuZ3RoOiBsZW5ndGgsIF9vZmZzZXQ6IGJ5dGVzLmxlbmd0aCB9KTtcbiAgICAgICAgICAgICByZXR1cm4gc2l6ZSArIGxlbmd0aDtcbiAgICAgICAgIH1cbiAgICAgICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgIC8vIFRPRE86IGVuY29kZSB0byBmbG9hdCAzMj9cbiAgICAgICAgICAgICAvLyBmbG9hdCA2NFxuICAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKHZhbHVlKSAhPT0gdmFsdWUgfHwgIWlzRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4Y2IpO1xuICAgICAgICAgICAgICAgICBkZWZlcnMucHVzaCh7IF9mbG9hdDogdmFsdWUsIF9sZW5ndGg6IDgsIF9vZmZzZXQ6IGJ5dGVzLmxlbmd0aCB9KTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIDk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgIC8vIHBvc2l0aXZlIGZpeG51bVxuICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAweDgwKSB7XG4gICAgICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIHVpbnQgOFxuICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAweDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaCgweGNjLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAvLyB1aW50IDE2XG4gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhjZCwgdmFsdWUgPj4gOCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy8gdWludCAzMlxuICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAweDEwMDAwMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaCgweGNlLCB2YWx1ZSA+PiAyNCwgdmFsdWUgPj4gMTYsIHZhbHVlID4+IDgsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiA1O1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIHVpbnQgNjRcbiAgICAgICAgICAgICAgICAgaGkgPSAodmFsdWUgLyBNYXRoLnBvdygyLCAzMikpID4+IDA7XG4gICAgICAgICAgICAgICAgIGxvID0gdmFsdWUgPj4+IDA7XG4gICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhjZiwgaGkgPj4gMjQsIGhpID4+IDE2LCBoaSA+PiA4LCBoaSwgbG8gPj4gMjQsIGxvID4+IDE2LCBsbyA+PiA4LCBsbyk7XG4gICAgICAgICAgICAgICAgIHJldHVybiA5O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgLy8gbmVnYXRpdmUgZml4bnVtXG4gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAtMHgyMCkge1xuICAgICAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAvLyBpbnQgOFxuICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gLTB4ODApIHtcbiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhkMCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy8gaW50IDE2XG4gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAtMHg4MDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4ZDEsIHZhbHVlID4+IDgsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIGludCAzMlxuICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gLTB4ODAwMDAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhkMiwgdmFsdWUgPj4gMjQsIHZhbHVlID4+IDE2LCB2YWx1ZSA+PiA4LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAvLyBpbnQgNjRcbiAgICAgICAgICAgICAgICAgaGkgPSBNYXRoLmZsb29yKHZhbHVlIC8gTWF0aC5wb3coMiwgMzIpKTtcbiAgICAgICAgICAgICAgICAgbG8gPSB2YWx1ZSA+Pj4gMDtcbiAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaCgweGQzLCBoaSA+PiAyNCwgaGkgPj4gMTYsIGhpID4+IDgsIGhpLCBsbyA+PiAyNCwgbG8gPj4gMTYsIGxvID4+IDgsIGxvKTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIDk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgLy8gbmlsXG4gICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhjMCk7XG4gICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAvLyBmaXhhcnJheVxuICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoIDwgMHgxMCkge1xuICAgICAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaChsZW5ndGggfCAweDkwKTtcbiAgICAgICAgICAgICAgICAgICAgIHNpemUgPSAxO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIGFycmF5IDE2XG4gICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxlbmd0aCA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhkYywgbGVuZ3RoID4+IDgsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICBzaXplID0gMztcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAvLyBhcnJheSAzMlxuICAgICAgICAgICAgICAgICBlbHNlIGlmIChsZW5ndGggPCAweDEwMDAwMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaCgweGRkLCBsZW5ndGggPj4gMjQsIGxlbmd0aCA+PiAxNiwgbGVuZ3RoID4+IDgsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICBzaXplID0gNTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXJyYXkgdG9vIGxhcmdlJyk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICBzaXplICs9IF9lbmNvZGUoYnl0ZXMsIGRlZmVycywgdmFsdWVbaV0pO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgIHZhciBtcyA9IHZhbHVlLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgdmFyIHMgPSBNYXRoLmZsb29yKG1zIC8gMWUzKTtcbiAgICAgICAgICAgICAgICAgdmFyIG5zID0gKG1zIC0gcyAqIDFlMykgKiAxZTY7XG4gICAgICAgICAgICAgICAgIGlmIChzID49IDAgJiYgbnMgPj0gMCAmJiBzIDw9IFRJTUVTVEFNUDY0X01BWF9TRUMpIHtcbiAgICAgICAgICAgICAgICAgICAgIGlmIChucyA9PT0gMCAmJiBzIDw9IFRJTUVTVEFNUDMyX01BWF9TRUMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW1lc3RhbXAgMzJcbiAgICAgICAgICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4ZDYsIDB4ZmYsIHMgPj4gMjQsIHMgPj4gMTYsIHMgPj4gOCwgcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDY7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW1lc3RhbXAgNjRcbiAgICAgICAgICAgICAgICAgICAgICAgICBoaSA9IHMgLyAweDEwMDAwMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICBsbyA9IHMgJiAweGZmZmZmZmZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhkNywgMHhmZiwgbnMgPj4gMjIsIG5zID4+IDE0LCBucyA+PiA2LCBoaSwgbG8gPj4gMjQsIGxvID4+IDE2LCBsbyA+PiA4LCBsbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEwO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgLy8gdGltZXN0YW1wIDk2XG4gICAgICAgICAgICAgICAgICAgICBoaSA9IE1hdGguZmxvb3IocyAvIDB4MTAwMDAwMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgIGxvID0gcyA+Pj4gMDtcbiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhjNywgMHgwYywgMHhmZiwgbnMgPj4gMjQsIG5zID4+IDE2LCBucyA+PiA4LCBucywgaGkgPj4gMjQsIGhpID4+IDE2LCBoaSA+PiA4LCBoaSwgbG8gPj4gMjQsIGxvID4+IDE2LCBsbyA+PiA4LCBsbyk7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgLy8gYmluIDhcbiAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA8IDB4MTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4YzQsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICBzaXplID0gMjtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIFxuICAgICAgICAgICAgICAgICAvLyBiaW4gMTZcbiAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhjNSwgbGVuZ3RoID4+IDgsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICBzaXplID0gMztcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIFxuICAgICAgICAgICAgICAgICAvLyBiaW4gMzJcbiAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA8IDB4MTAwMDAwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4YzYsIGxlbmd0aCA+PiAyNCwgbGVuZ3RoID4+IDE2LCBsZW5ndGggPj4gOCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgIHNpemUgPSA1O1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCdWZmZXIgdG9vIGxhcmdlJyk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZGVmZXJzLnB1c2goeyBfYmluOiB2YWx1ZSwgX2xlbmd0aDogbGVuZ3RoLCBfb2Zmc2V0OiBieXRlcy5sZW5ndGggfSk7XG4gICAgICAgICAgICAgICAgIHJldHVybiBzaXplICsgbGVuZ3RoO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICByZXR1cm4gX2VuY29kZShieXRlcywgZGVmZXJzLCB2YWx1ZS50b0pTT04oKSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHZhciBrZXlzID0gW10sIGtleSA9ICcnO1xuICAgICAgICAgICAgIHZhciBhbGxLZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBhbGxLZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICBrZXkgPSBhbGxLZXlzW2ldO1xuICAgICAgICAgICAgICAgICBpZiAodmFsdWVba2V5XSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZVtrZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgICAgICAvLyBmaXhtYXBcbiAgICAgICAgICAgICBpZiAobGVuZ3RoIDwgMHgxMCkge1xuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKGxlbmd0aCB8IDB4ODApO1xuICAgICAgICAgICAgICAgICBzaXplID0gMTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgLy8gbWFwIDE2XG4gICAgICAgICAgICAgZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDAwMCkge1xuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4ZGUsIGxlbmd0aCA+PiA4LCBsZW5ndGgpO1xuICAgICAgICAgICAgICAgICBzaXplID0gMztcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgLy8gbWFwIDMyXG4gICAgICAgICAgICAgZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaCgweGRmLCBsZW5ndGggPj4gMjQsIGxlbmd0aCA+PiAxNiwgbGVuZ3RoID4+IDgsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgIHNpemUgPSA1O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QgdG9vIGxhcmdlJyk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgICBzaXplICs9IF9lbmNvZGUoYnl0ZXMsIGRlZmVycywga2V5KTtcbiAgICAgICAgICAgICAgICAgc2l6ZSArPSBfZW5jb2RlKGJ5dGVzLCBkZWZlcnMsIHZhbHVlW2tleV0pO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIC8vIGZhbHNlL3RydWVcbiAgICAgICAgIGlmICh0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICBieXRlcy5wdXNoKHZhbHVlID8gMHhjMyA6IDB4YzIpO1xuICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgfVxuICAgICAgICAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgYnl0ZXMucHVzaCgweGMwKTtcbiAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgIH1cbiAgICAgICAgIC8vIGN1c3RvbSB0eXBlcyBsaWtlIEJpZ0ludCAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50JylcbiAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgcmV0dXJuIF9lbmNvZGUoYnl0ZXMsIGRlZmVycywgdmFsdWUudG9KU09OKCkpO1xuICAgICAgICAgfVxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZW5jb2RlJyk7XG4gICAgIH1cbiAgICAgZnVuY3Rpb24gZW5jb2RlKHZhbHVlKSB7XG4gICAgICAgICB2YXIgYnl0ZXMgPSBbXTtcbiAgICAgICAgIHZhciBkZWZlcnMgPSBbXTtcbiAgICAgICAgIHZhciBzaXplID0gX2VuY29kZShieXRlcywgZGVmZXJzLCB2YWx1ZSk7XG4gICAgICAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKHNpemUpO1xuICAgICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmKTtcbiAgICAgICAgIHZhciBkZWZlckluZGV4ID0gMDtcbiAgICAgICAgIHZhciBkZWZlcldyaXR0ZW4gPSAwO1xuICAgICAgICAgdmFyIG5leHRPZmZzZXQgPSAtMTtcbiAgICAgICAgIGlmIChkZWZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgIG5leHRPZmZzZXQgPSBkZWZlcnNbMF0uX29mZnNldDtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBkZWZlciwgZGVmZXJMZW5ndGggPSAwLCBvZmZzZXQgPSAwO1xuICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBieXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KGRlZmVyV3JpdHRlbiArIGksIGJ5dGVzW2ldKTtcbiAgICAgICAgICAgICBpZiAoaSArIDEgIT09IG5leHRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGRlZmVyID0gZGVmZXJzW2RlZmVySW5kZXhdO1xuICAgICAgICAgICAgIGRlZmVyTGVuZ3RoID0gZGVmZXIuX2xlbmd0aDtcbiAgICAgICAgICAgICBvZmZzZXQgPSBkZWZlcldyaXR0ZW4gKyBuZXh0T2Zmc2V0O1xuICAgICAgICAgICAgIGlmIChkZWZlci5fYmluKSB7XG4gICAgICAgICAgICAgICAgIHZhciBiaW4gPSBuZXcgVWludDhBcnJheShkZWZlci5fYmluKTtcbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkZWZlckxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCArIGosIGJpbltqXSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSBpZiAoZGVmZXIuX3N0cikge1xuICAgICAgICAgICAgICAgICB1dGY4V3JpdGUodmlldywgb2Zmc2V0LCBkZWZlci5fc3RyKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSBpZiAoZGVmZXIuX2Zsb2F0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgdmlldy5zZXRGbG9hdDY0KG9mZnNldCwgZGVmZXIuX2Zsb2F0KTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZGVmZXJJbmRleCsrO1xuICAgICAgICAgICAgIGRlZmVyV3JpdHRlbiArPSBkZWZlckxlbmd0aDtcbiAgICAgICAgICAgICBpZiAoZGVmZXJzW2RlZmVySW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgIG5leHRPZmZzZXQgPSBkZWZlcnNbZGVmZXJJbmRleF0uX29mZnNldDtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gYnVmO1xuICAgICB9XG5cbiAgICAgdmFyIGJyb3dzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgJ3dzIGRvZXMgbm90IHdvcmsgaW4gdGhlIGJyb3dzZXIuIEJyb3dzZXIgY2xpZW50cyBtdXN0IHVzZSB0aGUgbmF0aXZlICcgK1xuICAgICAgICAgICAnV2ViU29ja2V0IG9iamVjdCdcbiAgICAgICApO1xuICAgICB9O1xuXG4gICAgIHZhciBXZWJTb2NrZXQgPSBnbG9iYWxUaGlzLldlYlNvY2tldCB8fCBicm93c2VyO1xuICAgICB2YXIgV2ViU29ja2V0VHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgZnVuY3Rpb24gV2ViU29ja2V0VHJhbnNwb3J0KGV2ZW50cykge1xuICAgICAgICAgICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xuICAgICAgICAgfVxuICAgICAgICAgV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgIHRoaXMud3Muc2VuZChkYXRhKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgICB0aGlzLndzLnNlbmQoKG5ldyBVaW50OEFycmF5KGRhdGEpKS5idWZmZXIpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH07XG4gICAgICAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgdGhpcy53cyA9IG5ldyBXZWJTb2NrZXQodXJsLCB0aGlzLnByb3RvY29scyk7XG4gICAgICAgICAgICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICAgICB0aGlzLndzLm9ub3BlbiA9IHRoaXMuZXZlbnRzLm9ub3BlbjtcbiAgICAgICAgICAgICB0aGlzLndzLm9ubWVzc2FnZSA9IHRoaXMuZXZlbnRzLm9ubWVzc2FnZTtcbiAgICAgICAgICAgICB0aGlzLndzLm9uY2xvc2UgPSB0aGlzLmV2ZW50cy5vbmNsb3NlO1xuICAgICAgICAgICAgIHRoaXMud3Mub25lcnJvciA9IHRoaXMuZXZlbnRzLm9uZXJyb3I7XG4gICAgICAgICB9O1xuICAgICAgICAgV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChjb2RlLCByZWFzb24pIHtcbiAgICAgICAgICAgICB0aGlzLndzLmNsb3NlKGNvZGUsIHJlYXNvbik7XG4gICAgICAgICB9O1xuICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUsIFwiaXNPcGVuXCIsIHtcbiAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU47XG4gICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgIH0pO1xuICAgICAgICAgcmV0dXJuIFdlYlNvY2tldFRyYW5zcG9ydDtcbiAgICAgfSgpKTtcblxuICAgICB2YXIgQ29ubmVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIGZ1bmN0aW9uIENvbm5lY3Rpb24oKSB7XG4gICAgICAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IG5ldyBXZWJTb2NrZXRUcmFuc3BvcnQodGhpcy5ldmVudHMpO1xuICAgICAgICAgfVxuICAgICAgICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuc2VuZChkYXRhKTtcbiAgICAgICAgIH07XG4gICAgICAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LmNvbm5lY3QodXJsKTtcbiAgICAgICAgIH07XG4gICAgICAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChjb2RlLCByZWFzb24pIHtcbiAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZShjb2RlLCByZWFzb24pO1xuICAgICAgICAgfTtcbiAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25uZWN0aW9uLnByb3RvdHlwZSwgXCJpc09wZW5cIiwge1xuICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnQuaXNPcGVuO1xuICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICB9KTtcbiAgICAgICAgIHJldHVybiBDb25uZWN0aW9uO1xuICAgICB9KCkpO1xuXG4gICAgIC8vIFVzZSBjb2RlcyBiZXR3ZWVuIDB+MTI3IGZvciBsZXNzZXIgdGhyb3VnaHB1dCAoMSBieXRlKVxuICAgICBleHBvcnRzLlByb3RvY29sID0gdm9pZCAwO1xuICAgICAoZnVuY3Rpb24gKFByb3RvY29sKSB7XG4gICAgICAgICAvLyBSb29tLXJlbGF0ZWQgKDEwfjE5KVxuICAgICAgICAgUHJvdG9jb2xbUHJvdG9jb2xbXCJIQU5EU0hBS0VcIl0gPSA5XSA9IFwiSEFORFNIQUtFXCI7XG4gICAgICAgICBQcm90b2NvbFtQcm90b2NvbFtcIkpPSU5fUk9PTVwiXSA9IDEwXSA9IFwiSk9JTl9ST09NXCI7XG4gICAgICAgICBQcm90b2NvbFtQcm90b2NvbFtcIkVSUk9SXCJdID0gMTFdID0gXCJFUlJPUlwiO1xuICAgICAgICAgUHJvdG9jb2xbUHJvdG9jb2xbXCJMRUFWRV9ST09NXCJdID0gMTJdID0gXCJMRUFWRV9ST09NXCI7XG4gICAgICAgICBQcm90b2NvbFtQcm90b2NvbFtcIlJPT01fREFUQVwiXSA9IDEzXSA9IFwiUk9PTV9EQVRBXCI7XG4gICAgICAgICBQcm90b2NvbFtQcm90b2NvbFtcIlJPT01fU1RBVEVcIl0gPSAxNF0gPSBcIlJPT01fU1RBVEVcIjtcbiAgICAgICAgIFByb3RvY29sW1Byb3RvY29sW1wiUk9PTV9TVEFURV9QQVRDSFwiXSA9IDE1XSA9IFwiUk9PTV9TVEFURV9QQVRDSFwiO1xuICAgICAgICAgUHJvdG9jb2xbUHJvdG9jb2xbXCJST09NX0RBVEFfU0NIRU1BXCJdID0gMTZdID0gXCJST09NX0RBVEFfU0NIRU1BXCI7XG4gICAgICAgICBQcm90b2NvbFtQcm90b2NvbFtcIlJPT01fREFUQV9CWVRFU1wiXSA9IDE3XSA9IFwiUk9PTV9EQVRBX0JZVEVTXCI7XG4gICAgIH0pKGV4cG9ydHMuUHJvdG9jb2wgfHwgKGV4cG9ydHMuUHJvdG9jb2wgPSB7fSkpO1xuICAgICBleHBvcnRzLkVycm9yQ29kZSA9IHZvaWQgMDtcbiAgICAgKGZ1bmN0aW9uIChFcnJvckNvZGUpIHtcbiAgICAgICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJNQVRDSE1BS0VfTk9fSEFORExFUlwiXSA9IDQyMTBdID0gXCJNQVRDSE1BS0VfTk9fSEFORExFUlwiO1xuICAgICAgICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIk1BVENITUFLRV9JTlZBTElEX0NSSVRFUklBXCJdID0gNDIxMV0gPSBcIk1BVENITUFLRV9JTlZBTElEX0NSSVRFUklBXCI7XG4gICAgICAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiTUFUQ0hNQUtFX0lOVkFMSURfUk9PTV9JRFwiXSA9IDQyMTJdID0gXCJNQVRDSE1BS0VfSU5WQUxJRF9ST09NX0lEXCI7XG4gICAgICAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiTUFUQ0hNQUtFX1VOSEFORExFRFwiXSA9IDQyMTNdID0gXCJNQVRDSE1BS0VfVU5IQU5ETEVEXCI7XG4gICAgICAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiTUFUQ0hNQUtFX0VYUElSRURcIl0gPSA0MjE0XSA9IFwiTUFUQ0hNQUtFX0VYUElSRURcIjtcbiAgICAgICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJBVVRIX0ZBSUxFRFwiXSA9IDQyMTVdID0gXCJBVVRIX0ZBSUxFRFwiO1xuICAgICAgICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIkFQUExJQ0FUSU9OX0VSUk9SXCJdID0gNDIxNl0gPSBcIkFQUExJQ0FUSU9OX0VSUk9SXCI7XG4gICAgIH0pKGV4cG9ydHMuRXJyb3JDb2RlIHx8IChleHBvcnRzLkVycm9yQ29kZSA9IHt9KSk7XG4gICAgIGZ1bmN0aW9uIHV0ZjhSZWFkKHZpZXcsIG9mZnNldCkge1xuICAgICAgICAgdmFyIGxlbmd0aCA9IHZpZXdbb2Zmc2V0KytdO1xuICAgICAgICAgdmFyIHN0cmluZyA9ICcnLCBjaHIgPSAwO1xuICAgICAgICAgZm9yICh2YXIgaSA9IG9mZnNldCwgZW5kID0gb2Zmc2V0ICsgbGVuZ3RoOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgICB2YXIgYnl0ZSA9IHZpZXdbaV07XG4gICAgICAgICAgICAgaWYgKChieXRlICYgMHg4MCkgPT09IDB4MDApIHtcbiAgICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSk7XG4gICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoKGJ5dGUgJiAweGUwKSA9PT0gMHhjMCkge1xuICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGJ5dGUgJiAweDFmKSA8PCA2KSB8XG4gICAgICAgICAgICAgICAgICAgICAodmlld1srK2ldICYgMHgzZikpO1xuICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgaWYgKChieXRlICYgMHhmMCkgPT09IDB4ZTApIHtcbiAgICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChieXRlICYgMHgwZikgPDwgMTIpIHxcbiAgICAgICAgICAgICAgICAgICAgICgodmlld1srK2ldICYgMHgzZikgPDwgNikgfFxuICAgICAgICAgICAgICAgICAgICAgKCh2aWV3WysraV0gJiAweDNmKSA8PCAwKSk7XG4gICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoKGJ5dGUgJiAweGY4KSA9PT0gMHhmMCkge1xuICAgICAgICAgICAgICAgICBjaHIgPSAoKGJ5dGUgJiAweDA3KSA8PCAxOCkgfFxuICAgICAgICAgICAgICAgICAgICAgKCh2aWV3WysraV0gJiAweDNmKSA8PCAxMikgfFxuICAgICAgICAgICAgICAgICAgICAgKCh2aWV3WysraV0gJiAweDNmKSA8PCA2KSB8XG4gICAgICAgICAgICAgICAgICAgICAoKHZpZXdbKytpXSAmIDB4M2YpIDw8IDApO1xuICAgICAgICAgICAgICAgICBpZiAoY2hyID49IDB4MDEwMDAwKSB7IC8vIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICAgICAgICAgICBjaHIgLT0gMHgwMTAwMDA7XG4gICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoY2hyID4+PiAxMCkgKyAweEQ4MDAsIChjaHIgJiAweDNGRikgKyAweERDMDApO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGUgJyArIGJ5dGUudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgIH1cbiAgICAgLy8gRmFzdGVyIGZvciBzaG9ydCBzdHJpbmdzIHRoYW4gQnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgZnVuY3Rpb24gdXRmOExlbmd0aChzdHIpIHtcbiAgICAgICAgIGlmIChzdHIgPT09IHZvaWQgMCkgeyBzdHIgPSAnJzsgfVxuICAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHN0ci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICAgICAgIGxlbmd0aCArPSAxO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IDI7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKGMgPCAweGQ4MDAgfHwgYyA+PSAweGUwMDApIHtcbiAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IDM7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgIGxlbmd0aCArPSA0O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBsZW5ndGggKyAxO1xuICAgICB9XG5cbiAgICAgdmFyIHNlcmlhbGl6ZXJzID0ge307XG4gICAgIGZ1bmN0aW9uIHJlZ2lzdGVyU2VyaWFsaXplcihpZCwgc2VyaWFsaXplcikge1xuICAgICAgICAgc2VyaWFsaXplcnNbaWRdID0gc2VyaWFsaXplcjtcbiAgICAgfVxuICAgICBmdW5jdGlvbiBnZXRTZXJpYWxpemVyKGlkKSB7XG4gICAgICAgICB2YXIgc2VyaWFsaXplciA9IHNlcmlhbGl6ZXJzW2lkXTtcbiAgICAgICAgIGlmICghc2VyaWFsaXplcikge1xuICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmcgc2VyaWFsaXplcjogXCIgKyBpZCk7XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gc2VyaWFsaXplcjtcbiAgICAgfVxuXG4gICAgIC8qKlxuICAgICAgKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAgICAgICpcbiAgICAgICogQ29weXJpZ2h0IDIwMTYgQW5kcmV5IFNpdG5payA8YW5kcmV5QHNpdG5pay5ydT5cbiAgICAgICpcbiAgICAgICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxuICAgICAgKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4gICAgICAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cbiAgICAgICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcbiAgICAgICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICAgICAgKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAgICAgICpcbiAgICAgICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gICAgICAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gICAgICAqXG4gICAgICAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAgICAgICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcbiAgICAgICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXG4gICAgICAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxuICAgICAgKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxuICAgICAgKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICAgICAgKi9cbiAgICAgdmFyIGNyZWF0ZU5hbm9FdmVudHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgICAgICAgZW1pdDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5ldmVudHNbZXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGhfMSA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW5ndGhfMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgIGNhbGxiYWNrc1tpXS5hcHBseShjYWxsYmFja3MsIGFyZ3MpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH0sXG4gICAgICAgICBldmVudHM6IHt9LFxuICAgICAgICAgb246IGZ1bmN0aW9uIChldmVudCwgY2IpIHtcbiAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAoKF9hID0gdGhpcy5ldmVudHNbZXZlbnRdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHVzaChjYikpIHx8ICh0aGlzLmV2ZW50c1tldmVudF0gPSBbY2JdKTtcbiAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgIF90aGlzLmV2ZW50c1tldmVudF0gPSAoX2EgPSBfdGhpcy5ldmVudHNbZXZlbnRdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmlsdGVyKGZ1bmN0aW9uIChpKSB7IHJldHVybiBjYiAhPT0gaTsgfSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgIH1cbiAgICAgfSk7IH07XG5cbiAgICAgdmFyIEV2ZW50RW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgICAgICAgICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgICAgICB9XG4gICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGNiLCBvbmNlKSB7XG4gICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5wdXNoKGNiKTtcbiAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgIH07XG4gICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB0aGlzLmhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGhhbmRsZXIuYXBwbHkoX3RoaXMsIGFyZ3MpOyB9KTtcbiAgICAgICAgIH07XG4gICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmludm9rZUFzeW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLmhhbmRsZXJzLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlci5hcHBseShfdGhpcywgYXJncyk7IH0pKTtcbiAgICAgICAgIH07XG4gICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaGFuZGxlcnMuaW5kZXhPZihjYik7XG4gICAgICAgICAgICAgdGhpcy5oYW5kbGVyc1tpbmRleF0gPSB0aGlzLmhhbmRsZXJzW3RoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5wb3AoKTtcbiAgICAgICAgIH07XG4gICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICAgICAgIH07XG4gICAgICAgICByZXR1cm4gRXZlbnRFbWl0dGVyO1xuICAgICB9KCkpO1xuICAgICBmdW5jdGlvbiBjcmVhdGVTaWduYWwoKSB7XG4gICAgICAgICB2YXIgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKGNiKSB7XG4gICAgICAgICAgICAgcmV0dXJuIGVtaXR0ZXIucmVnaXN0ZXIoY2IsIHRoaXMgPT09IG51bGwpO1xuICAgICAgICAgfVxuICAgICAgICAgcmVnaXN0ZXIub25jZSA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBjYi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgZW1pdHRlci5yZW1vdmUoY2FsbGJhY2spO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgZW1pdHRlci5yZWdpc3RlcihjYWxsYmFjayk7XG4gICAgICAgICB9O1xuICAgICAgICAgcmVnaXN0ZXIucmVtb3ZlID0gZnVuY3Rpb24gKGNiKSB7IHJldHVybiBlbWl0dGVyLnJlbW92ZShjYik7IH07XG4gICAgICAgICByZWdpc3Rlci5pbnZva2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHJldHVybiBlbWl0dGVyLmludm9rZS5hcHBseShlbWl0dGVyLCBhcmdzKTtcbiAgICAgICAgIH07XG4gICAgICAgICByZWdpc3Rlci5pbnZva2VBc3luYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgcmV0dXJuIGVtaXR0ZXIuaW52b2tlQXN5bmMuYXBwbHkoZW1pdHRlciwgYXJncyk7XG4gICAgICAgICB9O1xuICAgICAgICAgcmVnaXN0ZXIuY2xlYXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlbWl0dGVyLmNsZWFyKCk7IH07XG4gICAgICAgICByZXR1cm4gcmVnaXN0ZXI7XG4gICAgIH1cblxuICAgICB2YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuICAgICBmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbikge1xuICAgICAgIHZhciBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH07XG4gICAgIFx0cmV0dXJuIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbiAgICAgfVxuXG4gICAgIHZhciB1bWQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICAgIChmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgICAgICBmYWN0b3J5KGV4cG9ydHMpIDtcbiAgICAgfSkoY29tbW9uanNHbG9iYWwsIChmdW5jdGlvbiAoZXhwb3J0cykge1xuICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICAgICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcbiAgICAgICAgIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG4gICAgICAgICBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG4gICAgICAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcbiAgICAgICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG4gICAgICAgICBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbiAgICAgICAgIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG4gICAgICAgICBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG4gICAgICAgICBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcbiAgICAgICAgIFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbiAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbiAgICAgICAgIC8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG4gICAgICAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgICAgICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgICB9O1xyXG5cclxuICAgICAgICAgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgICAgICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICAgICAgICAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgICAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgICAgICAgICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICAgICAgICAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICAgICAgICAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG4gICAgICAgICB9XG5cbiAgICAgICAgIC8vIGV4cG9ydCBjb25zdCBTV0lUQ0hfVE9fU1RSVUNUVVJFID0gMTkzOyAoZWFzaWx5IGNvbGxpZGVzIHdpdGggREVMRVRFX0FORF9BREQgKyBmaWVsZEluZGV4ID0gMilcbiAgICAgICAgIHZhciBTV0lUQ0hfVE9fU1RSVUNUVVJFID0gMjU1OyAvLyAoZGVjb2RpbmcgY29sbGlkZXMgd2l0aCBERUxFVEVfQU5EX0FERCArIGZpZWxkSW5kZXggPSA2MylcbiAgICAgICAgIHZhciBUWVBFX0lEID0gMjEzO1xuICAgICAgICAgLyoqXG4gICAgICAgICAgKiBFbmNvZGluZyBTY2hlbWEgZmllbGQgb3BlcmF0aW9ucy5cbiAgICAgICAgICAqL1xuICAgICAgICAgZXhwb3J0cy5PUEVSQVRJT04gPSB2b2lkIDA7XG4gICAgICAgICAoZnVuY3Rpb24gKE9QRVJBVElPTikge1xuICAgICAgICAgICAgIC8vIGFkZCBuZXcgc3RydWN0dXJlL3ByaW1pdGl2ZVxuICAgICAgICAgICAgIE9QRVJBVElPTltPUEVSQVRJT05bXCJBRERcIl0gPSAxMjhdID0gXCJBRERcIjtcbiAgICAgICAgICAgICAvLyByZXBsYWNlIHN0cnVjdHVyZS9wcmltaXRpdmVcbiAgICAgICAgICAgICBPUEVSQVRJT05bT1BFUkFUSU9OW1wiUkVQTEFDRVwiXSA9IDBdID0gXCJSRVBMQUNFXCI7XG4gICAgICAgICAgICAgLy8gZGVsZXRlIGZpZWxkXG4gICAgICAgICAgICAgT1BFUkFUSU9OW09QRVJBVElPTltcIkRFTEVURVwiXSA9IDY0XSA9IFwiREVMRVRFXCI7XG4gICAgICAgICAgICAgLy8gREVMRVRFIGZpZWxkLCBmb2xsb3dlZCBieSBhbiBBRERcbiAgICAgICAgICAgICBPUEVSQVRJT05bT1BFUkFUSU9OW1wiREVMRVRFX0FORF9BRERcIl0gPSAxOTJdID0gXCJERUxFVEVfQU5EX0FERFwiO1xuICAgICAgICAgICAgIC8vIFRPVUNIIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGhpZXJhcmNoeSBvZiBuZXN0ZWQgU2NoZW1hIHN0cnVjdHVyZXMgZHVyaW5nIHNlcmlhbGl6YXRpb24uXG4gICAgICAgICAgICAgLy8gdG91Y2hlcyBhcmUgTk9UIGVuY29kZWQuXG4gICAgICAgICAgICAgT1BFUkFUSU9OW09QRVJBVElPTltcIlRPVUNIXCJdID0gMV0gPSBcIlRPVUNIXCI7XG4gICAgICAgICAgICAgLy8gTWFwU2NoZW1hIE9wZXJhdGlvbnNcbiAgICAgICAgICAgICBPUEVSQVRJT05bT1BFUkFUSU9OW1wiQ0xFQVJcIl0gPSAxMF0gPSBcIkNMRUFSXCI7XG4gICAgICAgICB9KShleHBvcnRzLk9QRVJBVElPTiB8fCAoZXhwb3J0cy5PUEVSQVRJT04gPSB7fSkpO1xuICAgICAgICAgLy8gZXhwb3J0IGVudW0gT1BFUkFUSU9OIHtcbiAgICAgICAgIC8vICAgICAvLyBhZGQgbmV3IHN0cnVjdHVyZS9wcmltaXRpdmVcbiAgICAgICAgIC8vICAgICAvLyAoMTI4KVxuICAgICAgICAgLy8gICAgIEFERCA9IDEyOCwgLy8gMTAwMDAwMDAsXG4gICAgICAgICAvLyAgICAgLy8gcmVwbGFjZSBzdHJ1Y3R1cmUvcHJpbWl0aXZlXG4gICAgICAgICAvLyAgICAgUkVQTEFDRSA9IDEsLy8gMDAwMDAwMDFcbiAgICAgICAgIC8vICAgICAvLyBkZWxldGUgZmllbGRcbiAgICAgICAgIC8vICAgICBERUxFVEUgPSAxOTIsIC8vIDExMDAwMDAwXG4gICAgICAgICAvLyAgICAgLy8gREVMRVRFIGZpZWxkLCBmb2xsb3dlZCBieSBhbiBBRERcbiAgICAgICAgIC8vICAgICBERUxFVEVfQU5EX0FERCA9IDIyNCwgLy8gMTExMDAwMDBcbiAgICAgICAgIC8vICAgICAvLyBUT1VDSCBpcyB1c2VkIHRvIGRldGVybWluZSBoaWVyYXJjaHkgb2YgbmVzdGVkIFNjaGVtYSBzdHJ1Y3R1cmVzIGR1cmluZyBzZXJpYWxpemF0aW9uLlxuICAgICAgICAgLy8gICAgIC8vIHRvdWNoZXMgYXJlIE5PVCBlbmNvZGVkLlxuICAgICAgICAgLy8gICAgIFRPVUNIID0gMCwgLy8gMDAwMDAwMDBcbiAgICAgICAgIC8vICAgICAvLyBNYXBTY2hlbWEgT3BlcmF0aW9uc1xuICAgICAgICAgLy8gICAgIENMRUFSID0gMTAsXG4gICAgICAgICAvLyB9XG5cbiAgICAgICAgIHZhciBDaGFuZ2VUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIGZ1bmN0aW9uIENoYW5nZVRyZWUocmVmLCBwYXJlbnQsIHJvb3QpIHtcbiAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy5hbGxDaGFuZ2VzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgICAvLyBjYWNoZWQgaW5kZXhlcyBmb3IgZmlsdGVyaW5nXG4gICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVzID0ge307XG4gICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEN1c3RvbU9wZXJhdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgIHRoaXMucmVmID0gcmVmO1xuICAgICAgICAgICAgICAgICB0aGlzLnNldFBhcmVudChwYXJlbnQsIHJvb3QpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBDaGFuZ2VUcmVlLnByb3RvdHlwZS5zZXRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50LCByb290LCBwYXJlbnRJbmRleCkge1xuICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5kZXhlcykge1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleGVzID0gKHRoaXMucmVmIGluc3RhbmNlb2YgU2NoZW1hKVxuICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5yZWZbJ19kZWZpbml0aW9uJ10uaW5kZXhlc1xuICAgICAgICAgICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgICAgIHRoaXMucGFyZW50SW5kZXggPSBwYXJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgLy8gYXZvaWQgc2V0dGluZyBwYXJlbnRzIHdpdGggZW1wdHkgYHJvb3RgXG4gICAgICAgICAgICAgICAgIGlmICghcm9vdCkge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBzYW1lIHBhcmVudCBvbiBjaGlsZCBzdHJ1Y3R1cmVzXG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlZiBpbnN0YW5jZW9mIFNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmluaXRpb24gPSB0aGlzLnJlZlsnX2RlZmluaXRpb24nXTtcbiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGZpZWxkIGluIGRlZmluaXRpb24uc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5yZWZbZmllbGRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZVsnJGNoYW5nZXMnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50SW5kZXhfMSA9IGRlZmluaXRpb24uaW5kZXhlc1tmaWVsZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlWyckY2hhbmdlcyddLnNldFBhcmVudCh0aGlzLnJlZiwgcm9vdCwgcGFyZW50SW5kZXhfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiAodGhpcy5yZWYpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZi5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VUcmVlZSA9IHZhbHVlWyckY2hhbmdlcyddO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50SW5kZXhfMiA9IF90aGlzLnJlZlsnJGNoYW5nZXMnXS5pbmRleGVzW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVRyZWVlLnNldFBhcmVudChfdGhpcy5yZWYsIF90aGlzLnJvb3QsIHBhcmVudEluZGV4XzIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBDaGFuZ2VUcmVlLnByb3RvdHlwZS5vcGVyYXRpb24gPSBmdW5jdGlvbiAob3ApIHtcbiAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VzLnNldCgtLXRoaXMuY3VycmVudEN1c3RvbU9wZXJhdGlvbiwgb3ApO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ2hhbmdlVHJlZS5wcm90b3R5cGUuY2hhbmdlID0gZnVuY3Rpb24gKGZpZWxkTmFtZSwgb3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgIGlmIChvcGVyYXRpb24gPT09IHZvaWQgMCkgeyBvcGVyYXRpb24gPSBleHBvcnRzLk9QRVJBVElPTi5BREQ7IH1cbiAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gKHR5cGVvZiAoZmllbGROYW1lKSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgID8gZmllbGROYW1lXG4gICAgICAgICAgICAgICAgICAgICA6IHRoaXMuaW5kZXhlc1tmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICB0aGlzLmFzc2VydFZhbGlkSW5kZXgoaW5kZXgsIGZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c0NoYW5nZSA9IHRoaXMuY2hhbmdlcy5nZXQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICBpZiAoIXByZXZpb3VzQ2hhbmdlIHx8XG4gICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NoYW5nZS5vcCA9PT0gZXhwb3J0cy5PUEVSQVRJT04uREVMRVRFIHx8XG4gICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NoYW5nZS5vcCA9PT0gZXhwb3J0cy5PUEVSQVRJT04uVE9VQ0ggLy8gKG1hem1vcnJhLmlvJ3MgQmF0dGxlQWN0aW9uIGlzc3VlKVxuICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlcy5zZXQoaW5kZXgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBvcDogKCFwcmV2aW91c0NoYW5nZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvcGVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAocHJldmlvdXNDaGFuZ2Uub3AgPT09IGV4cG9ydHMuT1BFUkFUSU9OLkRFTEVURSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZXhwb3J0cy5PUEVSQVRJT04uREVMRVRFX0FORF9BRERcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogb3BlcmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDogT1BFUkFUSU9OLlJFUExBQ0UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB0aGlzLmFsbENoYW5nZXMuYWRkKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgdGhpcy50b3VjaFBhcmVudHMoKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIENoYW5nZVRyZWUucHJvdG90eXBlLnRvdWNoID0gZnVuY3Rpb24gKGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAodHlwZW9mIChmaWVsZE5hbWUpID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgPyBmaWVsZE5hbWVcbiAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5pbmRleGVzW2ZpZWxkTmFtZV07XG4gICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0VmFsaWRJbmRleChpbmRleCwgZmllbGROYW1lKTtcbiAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoYW5nZXMuaGFzKGluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VzLnNldChpbmRleCwgeyBvcDogZXhwb3J0cy5PUEVSQVRJT04uVE9VQ0gsIGluZGV4OiBpbmRleCB9KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB0aGlzLmFsbENoYW5nZXMuYWRkKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHRvdWNoIGlzIHBsYWNlZCB1bnRpbCB0aGUgJHJvb3QgaXMgZm91bmQuXG4gICAgICAgICAgICAgICAgIHRoaXMudG91Y2hQYXJlbnRzKCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBDaGFuZ2VUcmVlLnByb3RvdHlwZS50b3VjaFBhcmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRbJyRjaGFuZ2VzJ10udG91Y2godGhpcy5wYXJlbnRJbmRleCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIENoYW5nZVRyZWUucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVmWydfZGVmaW5pdGlvbiddKSB7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IHRoaXMucmVmWydfZGVmaW5pdGlvbiddO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmluaXRpb24uc2NoZW1hW2RlZmluaXRpb24uZmllbGRzQnlJbmRleFtpbmRleF1dO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmluaXRpb24gPSB0aGlzLnBhcmVudFsnX2RlZmluaXRpb24nXTtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRUeXBlID0gZGVmaW5pdGlvbi5zY2hlbWFbZGVmaW5pdGlvbi5maWVsZHNCeUluZGV4W3RoaXMucGFyZW50SW5kZXhdXTtcbiAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGNoaWxkIHR5cGUgZnJvbSBwYXJlbnQgc3RydWN0dXJlLlxuICAgICAgICAgICAgICAgICAgICAgLy8gLSBbXCJzdHJpbmdcIl0gPT4gXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgICAgICAgLy8gLSB7IG1hcDogXCJzdHJpbmdcIiB9ID0+IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgIC8vIC0geyBzZXQ6IFwic3RyaW5nXCIgfSA9PiBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocGFyZW50VHlwZSlbMF07XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIENoYW5nZVRyZWUucHJvdG90eXBlLmdldENoaWxkcmVuRmlsdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgY2hpbGRGaWx0ZXJzID0gdGhpcy5wYXJlbnRbJ19kZWZpbml0aW9uJ10uY2hpbGRGaWx0ZXJzO1xuICAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRGaWx0ZXJzICYmIGNoaWxkRmlsdGVyc1t0aGlzLnBhcmVudEluZGV4XTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgLy8gdXNlZCBkdXJpbmcgYC5lbmNvZGUoKWBcbiAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgIENoYW5nZVRyZWUucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZlsnZ2V0QnlJbmRleCddKGluZGV4KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIENoYW5nZVRyZWUucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChmaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gKHR5cGVvZiAoZmllbGROYW1lKSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgID8gZmllbGROYW1lXG4gICAgICAgICAgICAgICAgICAgICA6IHRoaXMuaW5kZXhlc1tmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQGNvbHlzZXVzL3NjaGVtYSBcIi5jb25jYXQodGhpcy5yZWYuY29uc3RydWN0b3IubmFtZSwgXCI6IHRyeWluZyB0byBkZWxldGUgbm9uLWV4aXN0aW5nIGluZGV4OiBcIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgKFwiKS5jb25jYXQoaW5kZXgsIFwiKVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzVmFsdWUgPSB0aGlzLmdldFZhbHVlKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIkY2hhbmdlcy5kZWxldGUgPT5cIiwgeyBmaWVsZE5hbWUsIGluZGV4LCBwcmV2aW91c1ZhbHVlIH0pO1xuICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZXMuc2V0KGluZGV4LCB7IG9wOiBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEUsIGluZGV4OiBpbmRleCB9KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5hbGxDaGFuZ2VzLmRlbGV0ZShpbmRleCk7XG4gICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBjYWNoZVxuICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jYWNoZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAvLyByZW1vdmUgYHJvb3RgIHJlZmVyZW5jZVxuICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNWYWx1ZSAmJiBwcmV2aW91c1ZhbHVlWyckY2hhbmdlcyddKSB7XG4gICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlWyckY2hhbmdlcyddLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICB0aGlzLnRvdWNoUGFyZW50cygpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ2hhbmdlVHJlZS5wcm90b3R5cGUuZGlzY2FyZCA9IGZ1bmN0aW9uIChjaGFuZ2VkLCBkaXNjYXJkQWxsKSB7XG4gICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VkID09PSB2b2lkIDApIHsgY2hhbmdlZCA9IGZhbHNlOyB9XG4gICAgICAgICAgICAgICAgIGlmIChkaXNjYXJkQWxsID09PSB2b2lkIDApIHsgZGlzY2FyZEFsbCA9IGZhbHNlOyB9XG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIC8vIE1hcCwgQXJyYXksIGV0YzpcbiAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGNhY2hlZCBrZXkgdG8gZW5zdXJlIEFERCBvcGVyYXRpb25zIGlzIHVuc2VkIGluc3RlYWQgb2ZcbiAgICAgICAgICAgICAgICAgLy8gUkVQTEFDRSBpbiBjYXNlIHNhbWUga2V5IGlzIHVzZWQgb24gbmV4dCBwYXRjaGVzLlxuICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAvLyBUT0RPOiByZWZhY3RvciB0aGlzLiB0aGlzIGlzIG5vdCByZWxldmFudCBmb3IgQ29sbGVjdGlvbiBhbmQgU2V0LlxuICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnJlZiBpbnN0YW5jZW9mIFNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLm9wID09PSBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gX3RoaXMucmVmWydnZXRJbmRleCddKGNoYW5nZS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5pbmRleGVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VkID0gY2hhbmdlZDtcbiAgICAgICAgICAgICAgICAgaWYgKGRpc2NhcmRBbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsQ2hhbmdlcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIHJlLXNldCBgY3VycmVudEN1c3RvbU9wZXJhdGlvbmBcbiAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q3VzdG9tT3BlcmF0aW9uID0gMDtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIFJlY3Vyc2l2ZWx5IGRpc2NhcmQgYWxsIGNoYW5nZXMgZnJvbSB0aGlzLCBhbmQgY2hpbGQgc3RydWN0dXJlcy5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBDaGFuZ2VUcmVlLnByb3RvdHlwZS5kaXNjYXJkQWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfdGhpcy5nZXRWYWx1ZShjaGFuZ2UuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlWyckY2hhbmdlcyddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVbJyRjaGFuZ2VzJ10uZGlzY2FyZEFsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgdGhpcy5kaXNjYXJkKCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvLyBjYWNoZShmaWVsZDogbnVtYmVyLCBiZWdpbkluZGV4OiBudW1iZXIsIGVuZEluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgICAgICBDaGFuZ2VUcmVlLnByb3RvdHlwZS5jYWNoZSA9IGZ1bmN0aW9uIChmaWVsZCwgY2FjaGVkQnl0ZXMpIHtcbiAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZXNbZmllbGRdID0gY2FjaGVkQnl0ZXM7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBDaGFuZ2VUcmVlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VUcmVlKHRoaXMucmVmLCB0aGlzLnBhcmVudCwgdGhpcy5yb290KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIENoYW5nZVRyZWUucHJvdG90eXBlLmVuc3VyZVJlZklkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAvLyBza2lwIGlmIHJlZklkIGlzIGFscmVhZHkgc2V0LlxuICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWZJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgdGhpcy5yZWZJZCA9IHRoaXMucm9vdC5nZXROZXh0VW5pcXVlSWQoKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIENoYW5nZVRyZWUucHJvdG90eXBlLmFzc2VydFZhbGlkSW5kZXggPSBmdW5jdGlvbiAoaW5kZXgsIGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hhbmdlVHJlZTogbWlzc2luZyBpbmRleCBmb3IgZmllbGQgXFxcIlwiLmNvbmNhdChmaWVsZE5hbWUsIFwiXFxcIlwiKSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIHJldHVybiBDaGFuZ2VUcmVlO1xuICAgICAgICAgfSgpKTtcblxuICAgICAgICAgZnVuY3Rpb24gYWRkQ2FsbGJhY2soJGNhbGxiYWNrcywgb3AsIGNhbGxiYWNrLCBleGlzdGluZykge1xuICAgICAgICAgICAgIC8vIGluaXRpYWxpemUgbGlzdCBvZiBjYWxsYmFja3NcbiAgICAgICAgICAgICBpZiAoISRjYWxsYmFja3Nbb3BdKSB7XG4gICAgICAgICAgICAgICAgICRjYWxsYmFja3Nbb3BdID0gW107XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgICRjYWxsYmFja3Nbb3BdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgLy8gVHJpZ2dlciBjYWxsYmFjayBmb3IgZXhpc3RpbmcgZWxlbWVudHNcbiAgICAgICAgICAgICAvLyAtIE9QRVJBVElPTi5BRERcbiAgICAgICAgICAgICAvLyAtIE9QRVJBVElPTi5SRVBMQUNFXG4gICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICBleGlzdGluZyA9PT0gbnVsbCB8fCBleGlzdGluZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXhpc3RpbmcuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwga2V5KSB7IHJldHVybiBjYWxsYmFjayhpdGVtLCBrZXkpOyB9KTtcbiAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3BsaWNlT25lKCRjYWxsYmFja3Nbb3BdLCAkY2FsbGJhY2tzW29wXS5pbmRleE9mKGNhbGxiYWNrKSk7IH07XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiByZW1vdmVDaGlsZFJlZnMoY2hhbmdlcykge1xuICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgdmFyIG5lZWRSZW1vdmVSZWYgPSAodHlwZW9mICh0aGlzLiRjaGFuZ2VzLmdldFR5cGUoKSkgIT09IFwic3RyaW5nXCIpO1xuICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGtleSkge1xuICAgICAgICAgICAgICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgcmVmSWQ6IF90aGlzLiRjaGFuZ2VzLnJlZklkLFxuICAgICAgICAgICAgICAgICAgICAgb3A6IGV4cG9ydHMuT1BFUkFUSU9OLkRFTEVURSxcbiAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZTogaXRlbVxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgaWYgKG5lZWRSZW1vdmVSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgIF90aGlzLiRjaGFuZ2VzLnJvb3QucmVtb3ZlUmVmKGl0ZW1bJyRjaGFuZ2VzJ10ucmVmSWQpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBzcGxpY2VPbmUoYXJyLCBpbmRleCkge1xuICAgICAgICAgICAgIC8vIG1hbnVhbGx5IHNwbGljZSBhbiBhcnJheVxuICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEgfHwgaW5kZXggPj0gYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICBmb3IgKHZhciBpID0gaW5kZXg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICBhcnJbaV0gPSBhcnJbaSArIDFdO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBhcnIubGVuZ3RoID0gbGVuO1xuICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgfVxuXG4gICAgICAgICB2YXIgREVGQVVMVF9TT1JUID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICB2YXIgQSA9IGEudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICB2YXIgQiA9IGIudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICBpZiAoQSA8IEIpXG4gICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICBlbHNlIGlmIChBID4gQilcbiAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgIH07XG4gICAgICAgICBmdW5jdGlvbiBnZXRBcnJheVByb3h5KHZhbHVlKSB7XG4gICAgICAgICAgICAgdmFsdWVbJyRwcm94eSddID0gdHJ1ZTtcbiAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgIC8vIGNvbXBhdGliaWxpdHkgd2l0aCBAY29seXNldXMvc2NoZW1hIDAuNS54XG4gICAgICAgICAgICAgLy8gLSBhbGxvdyBgbWFwW1wia2V5XCJdYFxuICAgICAgICAgICAgIC8vIC0gYWxsb3cgYG1hcFtcImtleVwiXSA9IFwieHh4XCJgXG4gICAgICAgICAgICAgLy8gLSBhbGxvdyBgZGVsZXRlIG1hcFtcImtleVwiXWBcbiAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgIHZhbHVlID0gbmV3IFByb3h5KHZhbHVlLCB7XG4gICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKG9iaiwgcHJvcCkge1xuICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocHJvcCkgIT09IFwic3ltYm9sXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAhaXNOYU4ocHJvcCkgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE3NTc4Ny84OTI2OThcbiAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmouYXQocHJvcCk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChvYmosIHByb3AsIHNldFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChwcm9wKSAhPT0gXCJzeW1ib2xcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICFpc05hTihwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleGVzID0gQXJyYXkuZnJvbShvYmpbJyRpdGVtcyddLmtleXMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhcnNlSW50KGluZGV4ZXNbcHJvcF0gfHwgcHJvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldFZhbHVlID09PSB1bmRlZmluZWQgfHwgc2V0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmRlbGV0ZUF0KGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2V0QXQoa2V5LCBzZXRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgb2JqW3Byb3BdID0gc2V0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIChvYmosIHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHByb3ApID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmRlbGV0ZUF0KHByb3ApO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9ialtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBBcnJheVNjaGVtYSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICBmdW5jdGlvbiBBcnJheVNjaGVtYSgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICBpdGVtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMgPSBuZXcgQ2hhbmdlVHJlZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaXRlbXMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGluZGV4ZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJHJlZklkID0gMDtcbiAgICAgICAgICAgICAgICAgdGhpcy5wdXNoLmFwcGx5KHRoaXMsIGl0ZW1zKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLm9uQWRkID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0cmlnZ2VyQWxsKSB7XG4gICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyQWxsID09PSB2b2lkIDApIHsgdHJpZ2dlckFsbCA9IHRydWU7IH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIGFkZENhbGxiYWNrKCh0aGlzLiRjYWxsYmFja3MgfHwgKHRoaXMuJGNhbGxiYWNrcyA9IFtdKSksIGV4cG9ydHMuT1BFUkFUSU9OLkFERCwgY2FsbGJhY2ssICh0cmlnZ2VyQWxsKVxuICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLiRpdGVtc1xuICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLm9uUmVtb3ZlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBhZGRDYWxsYmFjayh0aGlzLiRjYWxsYmFja3MgfHwgKHRoaXMuJGNhbGxiYWNrcyA9IFtdKSwgZXhwb3J0cy5PUEVSQVRJT04uREVMRVRFLCBjYWxsYmFjayk7IH07XG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLm9uQ2hhbmdlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBhZGRDYWxsYmFjayh0aGlzLiRjYWxsYmFja3MgfHwgKHRoaXMuJGNhbGxiYWNrcyA9IFtdKSwgZXhwb3J0cy5PUEVSQVRJT04uUkVQTEFDRSwgY2FsbGJhY2spOyB9O1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLmlzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgLy8gdHlwZSBmb3JtYXQ6IFtcInN0cmluZ1wiXVxuICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KHR5cGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAvLyB0eXBlIGZvcm1hdDogeyBhcnJheTogXCJzdHJpbmdcIiB9XG4gICAgICAgICAgICAgICAgICAgICAodHlwZVsnYXJyYXknXSAhPT0gdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXlTY2hlbWEucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLnNpemU7XG4gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwbGljZSh2YWx1ZSwgdGhpcy5sZW5ndGggLSB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgdmFyIGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyBzZXQgXCJpbmRleFwiIGZvciByZWZlcmVuY2UuXG4gICAgICAgICAgICAgICAgICAgICBsYXN0SW5kZXggPSBfdGhpcy4kcmVmSWQrKztcbiAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldEF0KGxhc3RJbmRleCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RJbmRleDtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIFJlbW92ZXMgdGhlIGxhc3QgZWxlbWVudCBmcm9tIGFuIGFycmF5IGFuZCByZXR1cm5zIGl0LlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHZhciBrZXkgPSBBcnJheS5mcm9tKHRoaXMuJGluZGV4ZXMudmFsdWVzKCkpLnBvcCgpO1xuICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy4kaXRlbXMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgLy8gRklYTUU6IHRoaXMgc2hvdWxkIGJlIE8oMSlcbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgdmFyIGtleSA9IEFycmF5LmZyb20odGhpcy4kaXRlbXMua2V5cygpKVtpbmRleF07XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRpdGVtcy5nZXQoa2V5KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5zZXRBdCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWyckY2hhbmdlcyddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIHZhbHVlWyckY2hhbmdlcyddLnNldFBhcmVudCh0aGlzLCB0aGlzLiRjaGFuZ2VzLnJvb3QsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB2YXIgb3BlcmF0aW9uID0gKF9iID0gKF9hID0gdGhpcy4kY2hhbmdlcy5pbmRleGVzW2luZGV4XSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9wKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBleHBvcnRzLk9QRVJBVElPTi5BREQ7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMuaW5kZXhlc1tpbmRleF0gPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcy5zZXQoaW5kZXgsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaXRlbXMuc2V0KGluZGV4LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMuY2hhbmdlKGluZGV4LCBvcGVyYXRpb24pO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLmRlbGV0ZUF0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgIHZhciBrZXkgPSBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLmtleXMoKSlbaW5kZXhdO1xuICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kZGVsZXRlQXQoa2V5KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS4kZGVsZXRlQXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIGF0IGludGVybmFsIGluZGV4XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcy5kZWxldGUoaW5kZXgpO1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgIC8vIGRpc2NhcmQgcHJldmlvdXMgb3BlcmF0aW9ucy5cbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5kaXNjYXJkKHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmluZGV4ZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgLy8gY2xlYXIgcHJldmlvdXMgaW5kZXhlc1xuICAgICAgICAgICAgICAgICB0aGlzLiRpbmRleGVzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIC8vIFdoZW4gZGVjb2Rpbmc6XG4gICAgICAgICAgICAgICAgIC8vIC0gZW5xdWV1ZSBpdGVtcyBmb3IgREVMRVRFIGNhbGxiYWNrLlxuICAgICAgICAgICAgICAgICAvLyAtIGZsYWcgY2hpbGQgaXRlbXMgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNoaWxkUmVmcy5jYWxsKHRoaXMsIGNoYW5nZXMpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIGNsZWFyIGl0ZW1zXG4gICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMub3BlcmF0aW9uKHsgaW5kZXg6IDAsIG9wOiBleHBvcnRzLk9QRVJBVElPTi5DTEVBUiB9KTtcbiAgICAgICAgICAgICAgICAgLy8gdG91Y2ggYWxsIHN0cnVjdHVyZXMgdW50aWwgcmVhY2ggcm9vdFxuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLnRvdWNoUGFyZW50cygpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogQ29tYmluZXMgdHdvIG9yIG1vcmUgYXJyYXlzLlxuICAgICAgICAgICAgICAqIEBwYXJhbSBpdGVtcyBBZGRpdGlvbmFsIGl0ZW1zIHRvIGFkZCB0byB0aGUgZW5kIG9mIGFycmF5MS5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgIGl0ZW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAoQXJyYXlTY2hlbWEuYmluZC5hcHBseShBcnJheVNjaGVtYSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgKF9hID0gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSkpLmNvbmNhdC5hcHBseShfYSwgaXRlbXMpLCBmYWxzZSkpKSgpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogQWRkcyBhbGwgdGhlIGVsZW1lbnRzIG9mIGFuIGFycmF5IHNlcGFyYXRlZCBieSB0aGUgc3BlY2lmaWVkIHNlcGFyYXRvciBzdHJpbmcuXG4gICAgICAgICAgICAgICogQHBhcmFtIHNlcGFyYXRvciBBIHN0cmluZyB1c2VkIHRvIHNlcGFyYXRlIG9uZSBlbGVtZW50IG9mIGFuIGFycmF5IGZyb20gdGhlIG5leHQgaW4gdGhlIHJlc3VsdGluZyBTdHJpbmcuIElmIG9taXR0ZWQsIHRoZSBhcnJheSBlbGVtZW50cyBhcmUgc2VwYXJhdGVkIHdpdGggYSBjb21tYS5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIChzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy4kaXRlbXMudmFsdWVzKCkpLmpvaW4oc2VwYXJhdG9yKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIFJldmVyc2VzIHRoZSBlbGVtZW50cyBpbiBhbiBBcnJheS5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgIHZhciBpbmRleGVzID0gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy5rZXlzKCkpO1xuICAgICAgICAgICAgICAgICB2YXIgcmV2ZXJzZWRJdGVtcyA9IEFycmF5LmZyb20odGhpcy4kaXRlbXMudmFsdWVzKCkpLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICAgcmV2ZXJzZWRJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRBdChpbmRleGVzW2ldLCBpdGVtKTtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogUmVtb3ZlcyB0aGUgZmlyc3QgZWxlbWVudCBmcm9tIGFuIGFycmF5IGFuZCByZXR1cm5zIGl0LlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGluZGV4ZXMgPSBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLmtleXMoKSk7XG4gICAgICAgICAgICAgICAgIHZhciBzaGlmdEF0ID0gaW5kZXhlcy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICBpZiAoc2hpZnRBdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuJGl0ZW1zLmdldChzaGlmdEF0KTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kZGVsZXRlQXQoc2hpZnRBdCk7XG4gICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIFJldHVybnMgYSBzZWN0aW9uIG9mIGFuIGFycmF5LlxuICAgICAgICAgICAgICAqIEBwYXJhbSBzdGFydCBUaGUgYmVnaW5uaW5nIG9mIHRoZSBzcGVjaWZpZWQgcG9ydGlvbiBvZiB0aGUgYXJyYXkuXG4gICAgICAgICAgICAgICogQHBhcmFtIGVuZCBUaGUgZW5kIG9mIHRoZSBzcGVjaWZpZWQgcG9ydGlvbiBvZiB0aGUgYXJyYXkuIFRoaXMgaXMgZXhjbHVzaXZlIG9mIHRoZSBlbGVtZW50IGF0IHRoZSBpbmRleCAnZW5kJy5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgICB2YXIgc2xpY2VkID0gbmV3IEFycmF5U2NoZW1hKCk7XG4gICAgICAgICAgICAgICAgIHNsaWNlZC5wdXNoLmFwcGx5KHNsaWNlZCwgQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSkuc2xpY2Uoc3RhcnQsIGVuZCkpO1xuICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2VkO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogU29ydHMgYW4gYXJyYXkuXG4gICAgICAgICAgICAgICogQHBhcmFtIGNvbXBhcmVGbiBGdW5jdGlvbiB1c2VkIHRvIGRldGVybWluZSB0aGUgb3JkZXIgb2YgdGhlIGVsZW1lbnRzLiBJdCBpcyBleHBlY3RlZCB0byByZXR1cm5cbiAgICAgICAgICAgICAgKiBhIG5lZ2F0aXZlIHZhbHVlIGlmIGZpcnN0IGFyZ3VtZW50IGlzIGxlc3MgdGhhbiBzZWNvbmQgYXJndW1lbnQsIHplcm8gaWYgdGhleSdyZSBlcXVhbCBhbmQgYSBwb3NpdGl2ZVxuICAgICAgICAgICAgICAqIHZhbHVlIG90aGVyd2lzZS4gSWYgb21pdHRlZCwgdGhlIGVsZW1lbnRzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nLCBBU0NJSSBjaGFyYWN0ZXIgb3JkZXIuXG4gICAgICAgICAgICAgICogYGBgdHNcbiAgICAgICAgICAgICAgKiBbMTEsMiwyMiwxXS5zb3J0KChhLCBiKSA9PiBhIC0gYilcbiAgICAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uIChjb21wYXJlRm4pIHtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVGbiA9PT0gdm9pZCAwKSB7IGNvbXBhcmVGbiA9IERFRkFVTFRfU09SVDsgfVxuICAgICAgICAgICAgICAgICB2YXIgaW5kZXhlcyA9IEFycmF5LmZyb20odGhpcy4kaXRlbXMua2V5cygpKTtcbiAgICAgICAgICAgICAgICAgdmFyIHNvcnRlZEl0ZW1zID0gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSkuc29ydChjb21wYXJlRm4pO1xuICAgICAgICAgICAgICAgICBzb3J0ZWRJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRBdChpbmRleGVzW2ldLCBpdGVtKTtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGFuZCwgaWYgbmVjZXNzYXJ5LCBpbnNlcnRzIG5ldyBlbGVtZW50cyBpbiB0aGVpciBwbGFjZSwgcmV0dXJuaW5nIHRoZSBkZWxldGVkIGVsZW1lbnRzLlxuICAgICAgICAgICAgICAqIEBwYXJhbSBzdGFydCBUaGUgemVyby1iYXNlZCBsb2NhdGlvbiBpbiB0aGUgYXJyYXkgZnJvbSB3aGljaCB0byBzdGFydCByZW1vdmluZyBlbGVtZW50cy5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gZGVsZXRlQ291bnQgVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICAgICAgICAgICogQHBhcmFtIGl0ZW1zIEVsZW1lbnRzIHRvIGluc2VydCBpbnRvIHRoZSBhcnJheSBpbiBwbGFjZSBvZiB0aGUgZGVsZXRlZCBlbGVtZW50cy5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuc3BsaWNlID0gZnVuY3Rpb24gKHN0YXJ0LCBkZWxldGVDb3VudCkge1xuICAgICAgICAgICAgICAgICBpZiAoZGVsZXRlQ291bnQgPT09IHZvaWQgMCkgeyBkZWxldGVDb3VudCA9IHRoaXMubGVuZ3RoIC0gc3RhcnQ7IH1cbiAgICAgICAgICAgICAgICAgdmFyIGluZGV4ZXMgPSBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLmtleXMoKSk7XG4gICAgICAgICAgICAgICAgIHZhciByZW1vdmVkSXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBkZWxldGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICByZW1vdmVkSXRlbXMucHVzaCh0aGlzLiRpdGVtcy5nZXQoaW5kZXhlc1tpXSkpO1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGVsZXRlQXQoaW5kZXhlc1tpXSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZWRJdGVtcztcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIEluc2VydHMgbmV3IGVsZW1lbnRzIGF0IHRoZSBzdGFydCBvZiBhbiBhcnJheS5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gaXRlbXMgIEVsZW1lbnRzIHRvIGluc2VydCBhdCB0aGUgc3RhcnQgb2YgdGhlIEFycmF5LlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgIGl0ZW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICB2YXIgYWRkZWRMZW5ndGggPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgIC8vIGNvbnN0IGluZGV4ZXMgPSBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLmtleXMoKSk7XG4gICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c1ZhbHVlcyA9IEFycmF5LmZyb20odGhpcy4kaXRlbXMudmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRBdChpLCBpdGVtKTtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldEF0KGFkZGVkTGVuZ3RoICsgaSwgcHJldmlvdXNWYWx1ZSk7XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICByZXR1cm4gbGVuZ3RoICsgYWRkZWRMZW5ndGg7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhIHZhbHVlIGluIGFuIGFycmF5LlxuICAgICAgICAgICAgICAqIEBwYXJhbSBzZWFyY2hFbGVtZW50IFRoZSB2YWx1ZSB0byBsb2NhdGUgaW4gdGhlIGFycmF5LlxuICAgICAgICAgICAgICAqIEBwYXJhbSBmcm9tSW5kZXggVGhlIGFycmF5IGluZGV4IGF0IHdoaWNoIHRvIGJlZ2luIHRoZSBzZWFyY2guIElmIGZyb21JbmRleCBpcyBvbWl0dGVkLCB0aGUgc2VhcmNoIHN0YXJ0cyBhdCBpbmRleCAwLlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSkuaW5kZXhPZihzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgb2NjdXJyZW5jZSBvZiBhIHNwZWNpZmllZCB2YWx1ZSBpbiBhbiBhcnJheS5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gc2VhcmNoRWxlbWVudCBUaGUgdmFsdWUgdG8gbG9jYXRlIGluIHRoZSBhcnJheS5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gZnJvbUluZGV4IFRoZSBhcnJheSBpbmRleCBhdCB3aGljaCB0byBiZWdpbiB0aGUgc2VhcmNoLiBJZiBmcm9tSW5kZXggaXMgb21pdHRlZCwgdGhlIHNlYXJjaCBzdGFydHMgYXQgdGhlIGxhc3QgaW5kZXggaW4gdGhlIGFycmF5LlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIChzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgaWYgKGZyb21JbmRleCA9PT0gdm9pZCAwKSB7IGZyb21JbmRleCA9IHRoaXMubGVuZ3RoIC0gMTsgfVxuICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSkubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIERldGVybWluZXMgd2hldGhlciBhbGwgdGhlIG1lbWJlcnMgb2YgYW4gYXJyYXkgc2F0aXNmeSB0aGUgc3BlY2lmaWVkIHRlc3QuXG4gICAgICAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrZm4gQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gdGhyZWUgYXJndW1lbnRzLiBUaGUgZXZlcnkgbWV0aG9kIGNhbGxzXG4gICAgICAgICAgICAgICogdGhlIGNhbGxiYWNrZm4gZnVuY3Rpb24gZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgdW50aWwgdGhlIGNhbGxiYWNrZm4gcmV0dXJucyBhIHZhbHVlXG4gICAgICAgICAgICAgICogd2hpY2ggaXMgY29lcmNpYmxlIHRvIHRoZSBCb29sZWFuIHZhbHVlIGZhbHNlLCBvciB1bnRpbCB0aGUgZW5kIG9mIHRoZSBhcnJheS5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gdGhpc0FyZyBBbiBvYmplY3QgdG8gd2hpY2ggdGhlIHRoaXMga2V5d29yZCBjYW4gcmVmZXIgaW4gdGhlIGNhbGxiYWNrZm4gZnVuY3Rpb24uXG4gICAgICAgICAgICAgICogSWYgdGhpc0FyZyBpcyBvbWl0dGVkLCB1bmRlZmluZWQgaXMgdXNlZCBhcyB0aGUgdGhpcyB2YWx1ZS5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuZXZlcnkgPSBmdW5jdGlvbiAoY2FsbGJhY2tmbiwgdGhpc0FyZykge1xuICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSkuZXZlcnkoY2FsbGJhY2tmbiwgdGhpc0FyZyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5zIHRydWUgZm9yIGFueSBlbGVtZW50IG9mIGFuIGFycmF5LlxuICAgICAgICAgICAgICAqIEBwYXJhbSBjYWxsYmFja2ZuIEEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIHRocmVlIGFyZ3VtZW50cy4gVGhlIHNvbWUgbWV0aG9kIGNhbGxzXG4gICAgICAgICAgICAgICogdGhlIGNhbGxiYWNrZm4gZnVuY3Rpb24gZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgdW50aWwgdGhlIGNhbGxiYWNrZm4gcmV0dXJucyBhIHZhbHVlXG4gICAgICAgICAgICAgICogd2hpY2ggaXMgY29lcmNpYmxlIHRvIHRoZSBCb29sZWFuIHZhbHVlIHRydWUsIG9yIHVudGlsIHRoZSBlbmQgb2YgdGhlIGFycmF5LlxuICAgICAgICAgICAgICAqIEBwYXJhbSB0aGlzQXJnIEFuIG9iamVjdCB0byB3aGljaCB0aGUgdGhpcyBrZXl3b3JkIGNhbiByZWZlciBpbiB0aGUgY2FsbGJhY2tmbiBmdW5jdGlvbi5cbiAgICAgICAgICAgICAgKiBJZiB0aGlzQXJnIGlzIG9taXR0ZWQsIHVuZGVmaW5lZCBpcyB1c2VkIGFzIHRoZSB0aGlzIHZhbHVlLlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5zb21lID0gZnVuY3Rpb24gKGNhbGxiYWNrZm4sIHRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy4kaXRlbXMudmFsdWVzKCkpLnNvbWUoY2FsbGJhY2tmbiwgdGhpc0FyZyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBQZXJmb3JtcyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmb3IgZWFjaCBlbGVtZW50IGluIGFuIGFycmF5LlxuICAgICAgICAgICAgICAqIEBwYXJhbSBjYWxsYmFja2ZuICBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byB0aHJlZSBhcmd1bWVudHMuIGZvckVhY2ggY2FsbHMgdGhlIGNhbGxiYWNrZm4gZnVuY3Rpb24gb25lIHRpbWUgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkuXG4gICAgICAgICAgICAgICogQHBhcmFtIHRoaXNBcmcgIEFuIG9iamVjdCB0byB3aGljaCB0aGUgdGhpcyBrZXl3b3JkIGNhbiByZWZlciBpbiB0aGUgY2FsbGJhY2tmbiBmdW5jdGlvbi4gSWYgdGhpc0FyZyBpcyBvbWl0dGVkLCB1bmRlZmluZWQgaXMgdXNlZCBhcyB0aGUgdGhpcyB2YWx1ZS5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFja2ZuLCB0aGlzQXJnKSB7XG4gICAgICAgICAgICAgICAgIEFycmF5LmZyb20odGhpcy4kaXRlbXMudmFsdWVzKCkpLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBDYWxscyBhIGRlZmluZWQgY2FsbGJhY2sgZnVuY3Rpb24gb24gZWFjaCBlbGVtZW50IG9mIGFuIGFycmF5LCBhbmQgcmV0dXJucyBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSByZXN1bHRzLlxuICAgICAgICAgICAgICAqIEBwYXJhbSBjYWxsYmFja2ZuIEEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIHRocmVlIGFyZ3VtZW50cy4gVGhlIG1hcCBtZXRob2QgY2FsbHMgdGhlIGNhbGxiYWNrZm4gZnVuY3Rpb24gb25lIHRpbWUgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkuXG4gICAgICAgICAgICAgICogQHBhcmFtIHRoaXNBcmcgQW4gb2JqZWN0IHRvIHdoaWNoIHRoZSB0aGlzIGtleXdvcmQgY2FuIHJlZmVyIGluIHRoZSBjYWxsYmFja2ZuIGZ1bmN0aW9uLiBJZiB0aGlzQXJnIGlzIG9taXR0ZWQsIHVuZGVmaW5lZCBpcyB1c2VkIGFzIHRoZSB0aGlzIHZhbHVlLlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoY2FsbGJhY2tmbiwgdGhpc0FyZykge1xuICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSkubWFwKGNhbGxiYWNrZm4sIHRoaXNBcmcpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChjYWxsYmFja2ZuLCB0aGlzQXJnKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLnZhbHVlcygpKS5maWx0ZXIoY2FsbGJhY2tmbiwgdGhpc0FyZyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBDYWxscyB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBhbGwgdGhlIGVsZW1lbnRzIGluIGFuIGFycmF5LiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0LCBhbmQgaXMgcHJvdmlkZWQgYXMgYW4gYXJndW1lbnQgaW4gdGhlIG5leHQgY2FsbCB0byB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrZm4gQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gZm91ciBhcmd1bWVudHMuIFRoZSByZWR1Y2UgbWV0aG9kIGNhbGxzIHRoZSBjYWxsYmFja2ZuIGZ1bmN0aW9uIG9uZSB0aW1lIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5LlxuICAgICAgICAgICAgICAqIEBwYXJhbSBpbml0aWFsVmFsdWUgSWYgaW5pdGlhbFZhbHVlIGlzIHNwZWNpZmllZCwgaXQgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbCB2YWx1ZSB0byBzdGFydCB0aGUgYWNjdW11bGF0aW9uLiBUaGUgZmlyc3QgY2FsbCB0byB0aGUgY2FsbGJhY2tmbiBmdW5jdGlvbiBwcm92aWRlcyB0aGlzIHZhbHVlIGFzIGFuIGFyZ3VtZW50IGluc3RlYWQgb2YgYW4gYXJyYXkgdmFsdWUuXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChjYWxsYmFja2ZuLCBpbml0aWFsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UuYXBwbHkoQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSksIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBDYWxscyB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBhbGwgdGhlIGVsZW1lbnRzIGluIGFuIGFycmF5LCBpbiBkZXNjZW5kaW5nIG9yZGVyLiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0LCBhbmQgaXMgcHJvdmlkZWQgYXMgYW4gYXJndW1lbnQgaW4gdGhlIG5leHQgY2FsbCB0byB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrZm4gQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gZm91ciBhcmd1bWVudHMuIFRoZSByZWR1Y2VSaWdodCBtZXRob2QgY2FsbHMgdGhlIGNhbGxiYWNrZm4gZnVuY3Rpb24gb25lIHRpbWUgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkuXG4gICAgICAgICAgICAgICogQHBhcmFtIGluaXRpYWxWYWx1ZSBJZiBpbml0aWFsVmFsdWUgaXMgc3BlY2lmaWVkLCBpdCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsIHZhbHVlIHRvIHN0YXJ0IHRoZSBhY2N1bXVsYXRpb24uIFRoZSBmaXJzdCBjYWxsIHRvIHRoZSBjYWxsYmFja2ZuIGZ1bmN0aW9uIHByb3ZpZGVzIHRoaXMgdmFsdWUgYXMgYW4gYXJndW1lbnQgaW5zdGVhZCBvZiBhbiBhcnJheSB2YWx1ZS5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUucmVkdWNlUmlnaHQgPSBmdW5jdGlvbiAoY2FsbGJhY2tmbiwgaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQuYXBwbHkoQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSksIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXkgd2hlcmUgcHJlZGljYXRlIGlzIHRydWUsIGFuZCB1bmRlZmluZWRcbiAgICAgICAgICAgICAgKiBvdGhlcndpc2UuXG4gICAgICAgICAgICAgICogQHBhcmFtIHByZWRpY2F0ZSBmaW5kIGNhbGxzIHByZWRpY2F0ZSBvbmNlIGZvciBlYWNoIGVsZW1lbnQgb2YgdGhlIGFycmF5LCBpbiBhc2NlbmRpbmdcbiAgICAgICAgICAgICAgKiBvcmRlciwgdW50aWwgaXQgZmluZHMgb25lIHdoZXJlIHByZWRpY2F0ZSByZXR1cm5zIHRydWUuIElmIHN1Y2ggYW4gZWxlbWVudCBpcyBmb3VuZCwgZmluZFxuICAgICAgICAgICAgICAqIGltbWVkaWF0ZWx5IHJldHVybnMgdGhhdCBlbGVtZW50IHZhbHVlLiBPdGhlcndpc2UsIGZpbmQgcmV0dXJucyB1bmRlZmluZWQuXG4gICAgICAgICAgICAgICogQHBhcmFtIHRoaXNBcmcgSWYgcHJvdmlkZWQsIGl0IHdpbGwgYmUgdXNlZCBhcyB0aGUgdGhpcyB2YWx1ZSBmb3IgZWFjaCBpbnZvY2F0aW9uIG9mXG4gICAgICAgICAgICAgICogcHJlZGljYXRlLiBJZiBpdCBpcyBub3QgcHJvdmlkZWQsIHVuZGVmaW5lZCBpcyB1c2VkIGluc3RlYWQuXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLnZhbHVlcygpKS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXkgd2hlcmUgcHJlZGljYXRlIGlzIHRydWUsIGFuZCAtMVxuICAgICAgICAgICAgICAqIG90aGVyd2lzZS5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gcHJlZGljYXRlIGZpbmQgY2FsbHMgcHJlZGljYXRlIG9uY2UgZm9yIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXksIGluIGFzY2VuZGluZ1xuICAgICAgICAgICAgICAqIG9yZGVyLCB1bnRpbCBpdCBmaW5kcyBvbmUgd2hlcmUgcHJlZGljYXRlIHJldHVybnMgdHJ1ZS4gSWYgc3VjaCBhbiBlbGVtZW50IGlzIGZvdW5kLFxuICAgICAgICAgICAgICAqIGZpbmRJbmRleCBpbW1lZGlhdGVseSByZXR1cm5zIHRoYXQgZWxlbWVudCBpbmRleC4gT3RoZXJ3aXNlLCBmaW5kSW5kZXggcmV0dXJucyAtMS5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gdGhpc0FyZyBJZiBwcm92aWRlZCwgaXQgd2lsbCBiZSB1c2VkIGFzIHRoZSB0aGlzIHZhbHVlIGZvciBlYWNoIGludm9jYXRpb24gb2ZcbiAgICAgICAgICAgICAgKiBwcmVkaWNhdGUuIElmIGl0IGlzIG5vdCBwcm92aWRlZCwgdW5kZWZpbmVkIGlzIHVzZWQgaW5zdGVhZC5cbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuZmluZEluZGV4ID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSkuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSB0aGlzIG9iamVjdCBhZnRlciBmaWxsaW5nIHRoZSBzZWN0aW9uIGlkZW50aWZpZWQgYnkgc3RhcnQgYW5kIGVuZCB3aXRoIHZhbHVlXG4gICAgICAgICAgICAgICogQHBhcmFtIHZhbHVlIHZhbHVlIHRvIGZpbGwgYXJyYXkgc2VjdGlvbiB3aXRoXG4gICAgICAgICAgICAgICogQHBhcmFtIHN0YXJ0IGluZGV4IHRvIHN0YXJ0IGZpbGxpbmcgdGhlIGFycmF5IGF0LiBJZiBzdGFydCBpcyBuZWdhdGl2ZSwgaXQgaXMgdHJlYXRlZCBhc1xuICAgICAgICAgICAgICAqIGxlbmd0aCtzdGFydCB3aGVyZSBsZW5ndGggaXMgdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXkuXG4gICAgICAgICAgICAgICogQHBhcmFtIGVuZCBpbmRleCB0byBzdG9wIGZpbGxpbmcgdGhlIGFycmF5IGF0LiBJZiBlbmQgaXMgbmVnYXRpdmUsIGl0IGlzIHRyZWF0ZWQgYXNcbiAgICAgICAgICAgICAgKiBsZW5ndGgrZW5kLlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIC8vIFRPRE9cbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJyYXlTY2hlbWEjZmlsbCgpIG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIFJldHVybnMgdGhlIHRoaXMgb2JqZWN0IGFmdGVyIGNvcHlpbmcgYSBzZWN0aW9uIG9mIHRoZSBhcnJheSBpZGVudGlmaWVkIGJ5IHN0YXJ0IGFuZCBlbmRcbiAgICAgICAgICAgICAgKiB0byB0aGUgc2FtZSBhcnJheSBzdGFydGluZyBhdCBwb3NpdGlvbiB0YXJnZXRcbiAgICAgICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IElmIHRhcmdldCBpcyBuZWdhdGl2ZSwgaXQgaXMgdHJlYXRlZCBhcyBsZW5ndGgrdGFyZ2V0IHdoZXJlIGxlbmd0aCBpcyB0aGVcbiAgICAgICAgICAgICAgKiBsZW5ndGggb2YgdGhlIGFycmF5LlxuICAgICAgICAgICAgICAqIEBwYXJhbSBzdGFydCBJZiBzdGFydCBpcyBuZWdhdGl2ZSwgaXQgaXMgdHJlYXRlZCBhcyBsZW5ndGgrc3RhcnQuIElmIGVuZCBpcyBuZWdhdGl2ZSwgaXRcbiAgICAgICAgICAgICAgKiBpcyB0cmVhdGVkIGFzIGxlbmd0aCtlbmQuXG4gICAgICAgICAgICAgICogQHBhcmFtIGVuZCBJZiBub3Qgc3BlY2lmaWVkLCBsZW5ndGggb2YgdGhlIHRoaXMgb2JqZWN0IGlzIHVzZWQgYXMgaXRzIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLmNvcHlXaXRoaW4gPSBmdW5jdGlvbiAodGFyZ2V0LCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIC8vIFRPRE9cbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJyYXlTY2hlbWEjY29weVdpdGhpbigpIG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYW4gYXJyYXkuXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy4kaXRlbXMudG9TdHJpbmcoKTsgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGFycmF5LiBUaGUgZWxlbWVudHMgYXJlIGNvbnZlcnRlZCB0byBzdHJpbmcgdXNpbmcgdGhlaXIgdG9Mb2NhbFN0cmluZyBtZXRob2RzLlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuJGl0ZW1zLnRvTG9jYWxlU3RyaW5nKCk7IH07XG4gICAgICAgICAgICAgLyoqIEl0ZXJhdG9yICovXG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLnZhbHVlcygpKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBSZXR1cm5zIGFuIGl0ZXJhYmxlIG9mIGtleSwgdmFsdWUgcGFpcnMgZm9yIGV2ZXJ5IGVudHJ5IGluIHRoZSBhcnJheVxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy4kaXRlbXMuZW50cmllcygpOyB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIFJldHVybnMgYW4gaXRlcmFibGUgb2Yga2V5cyBpbiB0aGUgYXJyYXlcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuJGl0ZW1zLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBSZXR1cm5zIGFuIGl0ZXJhYmxlIG9mIHZhbHVlcyBpbiB0aGUgYXJyYXlcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy4kaXRlbXMudmFsdWVzKCk7IH07XG4gICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGFycmF5IGluY2x1ZGVzIGEgY2VydGFpbiBlbGVtZW50LCByZXR1cm5pbmcgdHJ1ZSBvciBmYWxzZSBhcyBhcHByb3ByaWF0ZS5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gc2VhcmNoRWxlbWVudCBUaGUgZWxlbWVudCB0byBzZWFyY2ggZm9yLlxuICAgICAgICAgICAgICAqIEBwYXJhbSBmcm9tSW5kZXggVGhlIHBvc2l0aW9uIGluIHRoaXMgYXJyYXkgYXQgd2hpY2ggdG8gYmVnaW4gc2VhcmNoaW5nIGZvciBzZWFyY2hFbGVtZW50LlxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIChzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy4kaXRlbXMudmFsdWVzKCkpLmluY2x1ZGVzKHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBDYWxscyBhIGRlZmluZWQgY2FsbGJhY2sgZnVuY3Rpb24gb24gZWFjaCBlbGVtZW50IG9mIGFuIGFycmF5LiBUaGVuLCBmbGF0dGVucyB0aGUgcmVzdWx0IGludG9cbiAgICAgICAgICAgICAgKiBhIG5ldyBhcnJheS5cbiAgICAgICAgICAgICAgKiBUaGlzIGlzIGlkZW50aWNhbCB0byBhIG1hcCBmb2xsb3dlZCBieSBmbGF0IHdpdGggZGVwdGggMS5cbiAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byB0aHJlZSBhcmd1bWVudHMuIFRoZSBmbGF0TWFwIG1ldGhvZCBjYWxscyB0aGVcbiAgICAgICAgICAgICAgKiBjYWxsYmFjayBmdW5jdGlvbiBvbmUgdGltZSBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheS5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gdGhpc0FyZyBBbiBvYmplY3QgdG8gd2hpY2ggdGhlIHRoaXMga2V5d29yZCBjYW4gcmVmZXIgaW4gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLiBJZlxuICAgICAgICAgICAgICAqIHRoaXNBcmcgaXMgb21pdHRlZCwgdW5kZWZpbmVkIGlzIHVzZWQgYXMgdGhlIHRoaXMgdmFsdWUuXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5mbGF0TWFwID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJyYXlTY2hlbWEjZmxhdE1hcCgpIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogUmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIGFsbCBzdWItYXJyYXkgZWxlbWVudHMgY29uY2F0ZW5hdGVkIGludG8gaXQgcmVjdXJzaXZlbHkgdXAgdG8gdGhlXG4gICAgICAgICAgICAgICogc3BlY2lmaWVkIGRlcHRoLlxuICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICogQHBhcmFtIGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aFxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuZmxhdCA9IGZ1bmN0aW9uIChkZXB0aCkge1xuICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcnJheVNjaGVtYSNmbGF0KCkgaXMgbm90IHN1cHBvcnRlZC5cIik7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHZhciBhcnIgPSBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLnZhbHVlcygpKTtcbiAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICByZXR1cm4gYXJyLmZpbmRMYXN0LmFwcGx5KGFyciwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5maW5kTGFzdEluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgYXJyID0gQXJyYXkuZnJvbSh0aGlzLiRpdGVtcy52YWx1ZXMoKSk7XG4gICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgcmV0dXJuIGFyci5maW5kTGFzdEluZGV4LmFwcGx5KGFyciwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8vIGdldCBzaXplICgpIHtcbiAgICAgICAgICAgICAvLyAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLnNpemU7XG4gICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS5zZXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwga2V5KSB7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGluZGV4ZXMuc2V0KGluZGV4LCBrZXkpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLmdldEluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRpbmRleGVzLmdldChpbmRleCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuZ2V0QnlJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuZ2V0KHRoaXMuJGluZGV4ZXMuZ2V0KGluZGV4KSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuZGVsZXRlQnlJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy4kaW5kZXhlcy5nZXQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRpdGVtcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcy5kZWxldGUoaW5kZXgpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQXJyYXlTY2hlbWEucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLnZhbHVlcygpKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIEFycmF5U2NoZW1hLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHR5cGVvZiAodmFsdWVbJ3RvSlNPTiddKSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsdWVbJ3RvSlNPTiddKClcbiAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgLy8gRGVjb2RpbmcgdXRpbGl0aWVzXG4gICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICBBcnJheVNjaGVtYS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoaXNEZWNvZGluZykge1xuICAgICAgICAgICAgICAgICB2YXIgY2xvbmVkO1xuICAgICAgICAgICAgICAgICBpZiAoaXNEZWNvZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgY2xvbmVkID0gbmV3IChBcnJheVNjaGVtYS5iaW5kLmFwcGx5KEFycmF5U2NoZW1hLCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLnZhbHVlcygpKSwgZmFsc2UpKSkoKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIGNsb25lZCA9IG5ldyAoQXJyYXlTY2hlbWEuYmluZC5hcHBseShBcnJheVNjaGVtYSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuICgoaXRlbVsnJGNoYW5nZXMnXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICA/IGl0ZW0uY2xvbmUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbSk7IH0pLCBmYWxzZSkpKSgpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICByZXR1cm4gQXJyYXlTY2hlbWE7XG4gICAgICAgICB9KCkpO1xuXG4gICAgICAgICBmdW5jdGlvbiBnZXRNYXBQcm94eSh2YWx1ZSkge1xuICAgICAgICAgICAgIHZhbHVlWyckcHJveHknXSA9IHRydWU7XG4gICAgICAgICAgICAgdmFsdWUgPSBuZXcgUHJveHkodmFsdWUsIHtcbiAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAob2JqLCBwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChwcm9wKSAhPT0gXCJzeW1ib2xcIiAmJiAvLyBhY2Nlc3NpbmcgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiAob2JqW3Byb3BdKSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmouZ2V0KHByb3ApO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9ialtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAob2JqLCBwcm9wLCBzZXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocHJvcCkgIT09IFwic3ltYm9sXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAocHJvcC5pbmRleE9mKFwiJFwiKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcCAhPT0gXCJvbkFkZFwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3AgIT09IFwib25SZW1vdmVcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wICE9PSBcIm9uQ2hhbmdlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNldChwcm9wLCBzZXRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBzZXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gKG9iaiwgcHJvcCkge1xuICAgICAgICAgICAgICAgICAgICAgb2JqLmRlbGV0ZShwcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBNYXBTY2hlbWEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgZnVuY3Rpb24gTWFwU2NoZW1hKGluaXRpYWxWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcyA9IG5ldyBDaGFuZ2VUcmVlKHRoaXMpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRpdGVtcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kcmVmSWQgPSAwO1xuICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxWYWx1ZXMgaW5zdGFuY2VvZiBNYXAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWVzIGluc3RhbmNlb2YgTWFwU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiBfdGhpcy5zZXQoaywgdik7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBpbml0aWFsVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KGssIGluaXRpYWxWYWx1ZXNba10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLm9uQWRkID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0cmlnZ2VyQWxsKSB7XG4gICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyQWxsID09PSB2b2lkIDApIHsgdHJpZ2dlckFsbCA9IHRydWU7IH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIGFkZENhbGxiYWNrKCh0aGlzLiRjYWxsYmFja3MgfHwgKHRoaXMuJGNhbGxiYWNrcyA9IFtdKSksIGV4cG9ydHMuT1BFUkFUSU9OLkFERCwgY2FsbGJhY2ssICh0cmlnZ2VyQWxsKVxuICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLiRpdGVtc1xuICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgTWFwU2NoZW1hLnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gYWRkQ2FsbGJhY2sodGhpcy4kY2FsbGJhY2tzIHx8ICh0aGlzLiRjYWxsYmFja3MgPSBbXSksIGV4cG9ydHMuT1BFUkFUSU9OLkRFTEVURSwgY2FsbGJhY2spOyB9O1xuICAgICAgICAgICAgIE1hcFNjaGVtYS5wcm90b3R5cGUub25DaGFuZ2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIGFkZENhbGxiYWNrKHRoaXMuJGNhbGxiYWNrcyB8fCAodGhpcy4kY2FsbGJhY2tzID0gW10pLCBleHBvcnRzLk9QRVJBVElPTi5SRVBMQUNFLCBjYWxsYmFjayk7IH07XG4gICAgICAgICAgICAgTWFwU2NoZW1hLmlzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVbJ21hcCddICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvKiogSXRlcmF0b3IgKi9cbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLiRpdGVtc1tTeW1ib2wuaXRlcmF0b3JdKCk7IH07XG4gICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcFNjaGVtYS5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywge1xuICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuJGl0ZW1zW1N5bWJvbC50b1N0cmluZ1RhZ107IH0sXG4gICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNYXBTY2hlbWEjc2V0KCdcIi5jb25jYXQoa2V5LCBcIicsIFwiKS5jb25jYXQodmFsdWUsIFwiKTogdHJ5aW5nIHRvIHNldCBcIikuY29uY2F0KHZhbHVlLCBcIiB2YWx1ZSBvbiAnXCIpLmNvbmNhdChrZXksIFwiJy5cIikpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIGdldCBcImluZGV4XCIgZm9yIHRoaXMgdmFsdWUuXG4gICAgICAgICAgICAgICAgIHZhciBoYXNJbmRleCA9IHR5cGVvZiAodGhpcy4kY2hhbmdlcy5pbmRleGVzW2tleV0pICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAoaGFzSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICA/IHRoaXMuJGNoYW5nZXMuaW5kZXhlc1trZXldXG4gICAgICAgICAgICAgICAgICAgICA6IHRoaXMuJHJlZklkKys7XG4gICAgICAgICAgICAgICAgIHZhciBvcGVyYXRpb24gPSAoaGFzSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICA/IGV4cG9ydHMuT1BFUkFUSU9OLlJFUExBQ0VcbiAgICAgICAgICAgICAgICAgICAgIDogZXhwb3J0cy5PUEVSQVRJT04uQUREO1xuICAgICAgICAgICAgICAgICB2YXIgaXNSZWYgPSAodmFsdWVbJyRjaGFuZ2VzJ10pICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgIGlmIChpc1JlZikge1xuICAgICAgICAgICAgICAgICAgICAgdmFsdWVbJyRjaGFuZ2VzJ10uc2V0UGFyZW50KHRoaXMsIHRoaXMuJGNoYW5nZXMucm9vdCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIC8vIChlbmNvZGluZylcbiAgICAgICAgICAgICAgICAgLy8gc2V0IGEgdW5pcXVlIGlkIHRvIHJlbGF0ZSBkaXJlY3RseSB3aXRoIHRoaXMga2V5L3ZhbHVlLlxuICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICBpZiAoIWhhc0luZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmluZGV4ZXNba2V5XSA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcy5zZXQoaW5kZXgsIGtleSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWYgJiYgLy8gaWYgaXMgc2NoZW1hLCBmb3JjZSBBREQgb3BlcmF0aW9uIGlmIHZhbHVlIGRpZmZlciBmcm9tIHByZXZpb3VzIG9uZS5cbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLmdldChrZXkpICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uID0gZXhwb3J0cy5PUEVSQVRJT04uQUREO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5jaGFuZ2Uoa2V5LCBvcGVyYXRpb24pO1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIE1hcFNjaGVtYS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgLy8gVE9ETzogYWRkIGEgXCJwdXJnZVwiIG1ldGhvZCBhZnRlciAuZW5jb2RlKCkgcnVucywgdG8gY2xlYW51cCByZW1vdmVkIGAkaW5kZXhlc2BcbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgcmVtb3ZlICRpbmRleGVzIHRvIGFsbG93IHNldHRpbmcgdGhlIHNhbWUga2V5IGluIHRoZSBzYW1lIHBhdGNoXG4gICAgICAgICAgICAgICAgIC8vIChTZWUgXCJzaG91bGQgYWxsb3cgdG8gcmVtb3ZlIGFuZCBzZXQgYW4gaXRlbSBpbiB0aGUgc2FtZSBwbGFjZVwiIHRlc3QpXG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIC8vIC8vIGNvbnN0IGluZGV4ID0gdGhpcy4kY2hhbmdlcy5pbmRleGVzW2tleV07XG4gICAgICAgICAgICAgICAgIC8vIC8vIHRoaXMuJGluZGV4ZXMuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgTWFwU2NoZW1hLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgIC8vIGRpc2NhcmQgcHJldmlvdXMgb3BlcmF0aW9ucy5cbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5kaXNjYXJkKHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmluZGV4ZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgLy8gY2xlYXIgcHJldmlvdXMgaW5kZXhlc1xuICAgICAgICAgICAgICAgICB0aGlzLiRpbmRleGVzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIC8vIFdoZW4gZGVjb2Rpbmc6XG4gICAgICAgICAgICAgICAgIC8vIC0gZW5xdWV1ZSBpdGVtcyBmb3IgREVMRVRFIGNhbGxiYWNrLlxuICAgICAgICAgICAgICAgICAvLyAtIGZsYWcgY2hpbGQgaXRlbXMgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNoaWxkUmVmcy5jYWxsKHRoaXMsIGNoYW5nZXMpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIGNsZWFyIGl0ZW1zXG4gICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMub3BlcmF0aW9uKHsgaW5kZXg6IDAsIG9wOiBleHBvcnRzLk9QRVJBVElPTi5DTEVBUiB9KTtcbiAgICAgICAgICAgICAgICAgLy8gdG91Y2ggYWxsIHN0cnVjdHVyZXMgdW50aWwgcmVhY2ggcm9vdFxuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLnRvdWNoUGFyZW50cygpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgTWFwU2NoZW1hLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRpdGVtcy5oYXMoa2V5KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIE1hcFNjaGVtYS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLmZvckVhY2goY2FsbGJhY2tmbik7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRpdGVtcy5lbnRyaWVzKCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRpdGVtcy5rZXlzKCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLnZhbHVlcygpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcFNjaGVtYS5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLnNpemU7XG4gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLnNldEluZGV4ID0gZnVuY3Rpb24gKGluZGV4LCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcy5zZXQoaW5kZXgsIGtleSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLmdldEluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRpbmRleGVzLmdldChpbmRleCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLmdldEJ5SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmdldCh0aGlzLiRpbmRleGVzLmdldChpbmRleCkpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgTWFwU2NoZW1hLnByb3RvdHlwZS5kZWxldGVCeUluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLiRpbmRleGVzLmdldChpbmRleCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRpbmRleGVzLmRlbGV0ZShpbmRleCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIG1hcCA9IHt9O1xuICAgICAgICAgICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgIG1hcFtrZXldID0gKHR5cGVvZiAodmFsdWVbJ3RvSlNPTiddKSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsdWVbJ3RvSlNPTiddKClcbiAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgLy8gRGVjb2RpbmcgdXRpbGl0aWVzXG4gICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICBNYXBTY2hlbWEucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKGlzRGVjb2RpbmcpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGNsb25lZDtcbiAgICAgICAgICAgICAgICAgaWYgKGlzRGVjb2RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgIC8vIGNsaWVudC1zaWRlXG4gICAgICAgICAgICAgICAgICAgICBjbG9uZWQgPSBPYmplY3QuYXNzaWduKG5ldyBNYXBTY2hlbWEoKSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyBzZXJ2ZXItc2lkZVxuICAgICAgICAgICAgICAgICAgICAgY2xvbmVkID0gbmV3IE1hcFNjaGVtYSgpO1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWyckY2hhbmdlcyddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZC5zZXQoa2V5LCB2YWx1ZVsnY2xvbmUnXSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIHJldHVybiBNYXBTY2hlbWE7XG4gICAgICAgICB9KCkpO1xuXG4gICAgICAgICB2YXIgcmVnaXN0ZXJlZFR5cGVzID0ge307XG4gICAgICAgICBmdW5jdGlvbiByZWdpc3RlclR5cGUoaWRlbnRpZmllciwgZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgIHJlZ2lzdGVyZWRUeXBlc1tpZGVudGlmaWVyXSA9IGRlZmluaXRpb247XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBnZXRUeXBlKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZFR5cGVzW2lkZW50aWZpZXJdO1xuICAgICAgICAgfVxuXG4gICAgICAgICB2YXIgU2NoZW1hRGVmaW5pdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICBmdW5jdGlvbiBTY2hlbWFEZWZpbml0aW9uKCkge1xuICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAvLyBUT0RPOiB1c2UgYSBcImZpZWxkXCIgc3RydWN0dXJlIGNvbWJpbmluZyBhbGwgdGhlc2UgcHJvcGVydGllcyBwZXItZmllbGQuXG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIHRoaXMuaW5kZXhlcyA9IHt9O1xuICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkc0J5SW5kZXggPSB7fTtcbiAgICAgICAgICAgICAgICAgdGhpcy5kZXByZWNhdGVkID0ge307XG4gICAgICAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRvcnMgPSB7fTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgU2NoZW1hRGVmaW5pdGlvbi5jcmVhdGUgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgIHZhciBkZWZpbml0aW9uID0gbmV3IFNjaGVtYURlZmluaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgLy8gc3VwcG9ydCBpbmhlcml0YW5jZVxuICAgICAgICAgICAgICAgICBkZWZpbml0aW9uLnNjaGVtYSA9IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudCAmJiBwYXJlbnQuc2NoZW1hIHx8IHt9KTtcbiAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5pbmRleGVzID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50ICYmIHBhcmVudC5pbmRleGVzIHx8IHt9KTtcbiAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5maWVsZHNCeUluZGV4ID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50ICYmIHBhcmVudC5maWVsZHNCeUluZGV4IHx8IHt9KTtcbiAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5kZXNjcmlwdG9ycyA9IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudCAmJiBwYXJlbnQuZGVzY3JpcHRvcnMgfHwge30pO1xuICAgICAgICAgICAgICAgICBkZWZpbml0aW9uLmRlcHJlY2F0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnQgJiYgcGFyZW50LmRlcHJlY2F0ZWQgfHwge30pO1xuICAgICAgICAgICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNjaGVtYURlZmluaXRpb24ucHJvdG90eXBlLmFkZEZpZWxkID0gZnVuY3Rpb24gKGZpZWxkLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0TmV4dEZpZWxkSW5kZXgoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy5maWVsZHNCeUluZGV4W2luZGV4XSA9IGZpZWxkO1xuICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ZXNbZmllbGRdID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hW2ZpZWxkXSA9IChBcnJheS5pc0FycmF5KHR5cGUpKVxuICAgICAgICAgICAgICAgICAgICAgPyB7IGFycmF5OiB0eXBlWzBdIH1cbiAgICAgICAgICAgICAgICAgICAgIDogdHlwZTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNjaGVtYURlZmluaXRpb24ucHJvdG90eXBlLmhhc0ZpZWxkID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4ZXNbZmllbGRdICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTY2hlbWFEZWZpbml0aW9uLnByb3RvdHlwZS5hZGRGaWx0ZXIgPSBmdW5jdGlvbiAoZmllbGQsIGNiKSB7XG4gICAgICAgICAgICAgICAgIGlmICghdGhpcy5maWx0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXhlc1dpdGhGaWx0ZXJzID0gW107XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJzW3RoaXMuaW5kZXhlc1tmaWVsZF1dID0gY2I7XG4gICAgICAgICAgICAgICAgIHRoaXMuaW5kZXhlc1dpdGhGaWx0ZXJzLnB1c2godGhpcy5pbmRleGVzW2ZpZWxkXSk7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hRGVmaW5pdGlvbi5wcm90b3R5cGUuYWRkQ2hpbGRyZW5GaWx0ZXIgPSBmdW5jdGlvbiAoZmllbGQsIGNiKSB7XG4gICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhlc1tmaWVsZF07XG4gICAgICAgICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5zY2hlbWFbZmllbGRdO1xuICAgICAgICAgICAgICAgICBpZiAoZ2V0VHlwZShPYmplY3Qua2V5cyh0eXBlKVswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGlsZEZpbHRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkRmlsdGVycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZEZpbHRlcnNbaW5kZXhdID0gY2I7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkBmaWx0ZXJDaGlsZHJlbjogZmllbGQgJ1wiLmNvbmNhdChmaWVsZCwgXCInIGNhbid0IGhhdmUgY2hpbGRyZW4uIElnbm9yaW5nIGZpbHRlci5cIikpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTY2hlbWFEZWZpbml0aW9uLnByb3RvdHlwZS5nZXRDaGlsZHJlbkZpbHRlciA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZEZpbHRlcnMgJiYgdGhpcy5jaGlsZEZpbHRlcnNbdGhpcy5pbmRleGVzW2ZpZWxkXV07XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTY2hlbWFEZWZpbml0aW9uLnByb3RvdHlwZS5nZXROZXh0RmllbGRJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc2NoZW1hIHx8IHt9KS5sZW5ndGg7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICByZXR1cm4gU2NoZW1hRGVmaW5pdGlvbjtcbiAgICAgICAgIH0oKSk7XG4gICAgICAgICBmdW5jdGlvbiBoYXNGaWx0ZXIoa2xhc3MpIHtcbiAgICAgICAgICAgICByZXR1cm4ga2xhc3MuX2NvbnRleHQgJiYga2xhc3MuX2NvbnRleHQudXNlRmlsdGVycztcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBDb250ZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIGZ1bmN0aW9uIENvbnRleHQoKSB7XG4gICAgICAgICAgICAgICAgIHRoaXMudHlwZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgdGhpcy5zY2hlbWFzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgICB0aGlzLnVzZUZpbHRlcnMgPSBmYWxzZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgQ29udGV4dC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHNjaGVtYSkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWFzLmhhcyhzY2hlbWEpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29udGV4dC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHR5cGVpZCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50eXBlc1t0eXBlaWRdO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29udGV4dC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHNjaGVtYSwgdHlwZWlkKSB7XG4gICAgICAgICAgICAgICAgIGlmICh0eXBlaWQgPT09IHZvaWQgMCkgeyB0eXBlaWQgPSB0aGlzLnNjaGVtYXMuc2l6ZTsgfVxuICAgICAgICAgICAgICAgICAvLyBGSVhNRTogbW92ZSB0aGlzIHRvIHNvbWV3aGVyZSBlbHNlP1xuICAgICAgICAgICAgICAgICAvLyBzdXBwb3J0IGluaGVyaXRhbmNlXG4gICAgICAgICAgICAgICAgIHNjaGVtYS5fZGVmaW5pdGlvbiA9IFNjaGVtYURlZmluaXRpb24uY3JlYXRlKHNjaGVtYS5fZGVmaW5pdGlvbik7XG4gICAgICAgICAgICAgICAgIHNjaGVtYS5fdHlwZWlkID0gdHlwZWlkO1xuICAgICAgICAgICAgICAgICB0aGlzLnR5cGVzW3R5cGVpZF0gPSBzY2hlbWE7XG4gICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hcy5zZXQoc2NoZW1hLCB0eXBlaWQpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29udGV4dC5jcmVhdGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jb250ZXh0ID0gbmV3IENvbnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlKGRlZmluaXRpb24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgcmV0dXJuIENvbnRleHQ7XG4gICAgICAgICB9KCkpO1xuICAgICAgICAgdmFyIGdsb2JhbENvbnRleHQgPSBuZXcgQ29udGV4dCgpO1xuICAgICAgICAgLyoqXG4gICAgICAgICAgKiBbU2VlIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5jb2x5c2V1cy5pby9zdGF0ZS9zY2hlbWEvKVxuICAgICAgICAgICpcbiAgICAgICAgICAqIEFubm90YXRlIGEgU2NoZW1hIHByb3BlcnR5IHRvIGJlIHNlcmlhbGl6ZWFibGUuXG4gICAgICAgICAgKiBcXEB0eXBlKCknZCBmaWVsZHMgYXJlIGF1dG9tYXRpY2FsbHkgZmxhZ2dlZCBhcyBcImRpcnR5XCIgZm9yIHRoZSBuZXh0IHBhdGNoLlxuICAgICAgICAgICpcbiAgICAgICAgICAqIEBleGFtcGxlIFN0YW5kYXJkIHVzYWdlLCB3aXRoIGF1dG9tYXRpYyBjaGFuZ2UgdHJhY2tpbmcuXG4gICAgICAgICAgKiBgYGBcbiAgICAgICAgICAqIFxcQHR5cGUoXCJzdHJpbmdcIikgcHJvcGVydHlOYW1lOiBzdHJpbmc7XG4gICAgICAgICAgKiBgYGBcbiAgICAgICAgICAqXG4gICAgICAgICAgKiBAZXhhbXBsZSBZb3UgY2FuIHByb3ZpZGUgdGhlIFwibWFudWFsXCIgb3B0aW9uIGlmIHlvdSdkIGxpa2UgdG8gbWFudWFsbHkgY29udHJvbCB5b3VyIHBhdGNoZXMgdmlhIC5zZXREaXJ0eSgpLlxuICAgICAgICAgICogYGBgXG4gICAgICAgICAgKiBcXEB0eXBlKFwic3RyaW5nXCIsIHsgbWFudWFsOiB0cnVlIH0pXG4gICAgICAgICAgKiBgYGBcbiAgICAgICAgICAqL1xuICAgICAgICAgZnVuY3Rpb24gdHlwZSh0eXBlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgfHwgZ2xvYmFsQ29udGV4dDtcbiAgICAgICAgICAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvci5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgICAgICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXCIuY29uY2F0KGNvbnN0cnVjdG9yLm5hbWUsIFwiOiBAdHlwZSgpIHJlZmVyZW5jZSBwcm92aWRlZCBmb3IgXFxcIlwiKS5jb25jYXQoZmllbGQsIFwiXFxcIiBpcyB1bmRlZmluZWQuIE1ha2Ugc3VyZSB5b3UgZG9uJ3QgaGF2ZSBhbnkgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlwiKSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICogc3RhdGljIHNjaGVtYVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0Lmhhcyhjb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYWRkKGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IGNvbnN0cnVjdG9yLl9kZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgICBkZWZpbml0aW9uLmFkZEZpZWxkKGZpZWxkLCB0eXBlKTtcbiAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAqIHNraXAgaWYgZGVzY3JpcHRvciBhbHJlYWR5IGV4aXN0cyBmb3IgdGhpcyBmaWVsZCAoYEBkZXByZWNhdGVkKClgKVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb24uZGVzY3JpcHRvcnNbZmllbGRdKSB7XG4gICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbi5kZXByZWNhdGVkW2ZpZWxkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvIG5vdCBjcmVhdGUgYWNjZXNzb3JzIGZvciBkZXByZWNhdGVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ5aW5nIHRvIGRlZmluZSBzYW1lIHByb3BlcnR5IG11bHRpcGxlIHRpbWVzIGFjcm9zcyBpbmhlcml0YW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY29seXNldXMvY29seXNldXMtdW5pdHkzZC9pc3N1ZXMvMTMxI2lzc3VlY29tbWVudC04MTQzMDg1NzJcbiAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJAY29seXNldXMvc2NoZW1hOiBEdXBsaWNhdGUgJ1wiLmNvbmNhdChmaWVsZCwgXCInIGRlZmluaXRpb24gb24gJ1wiKS5jb25jYXQoY29uc3RydWN0b3IubmFtZSwgXCInLlxcbkNoZWNrIEB0eXBlKCkgYW5ub3RhdGlvblwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWZpbml0aW9uQXRMaW5lID0gZS5zdGFjay5zcGxpdChcIlxcblwiKVs0XS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlwiLmNvbmNhdChlLm1lc3NhZ2UsIFwiIFwiKS5jb25jYXQoZGVmaW5pdGlvbkF0TGluZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB2YXIgaXNBcnJheSA9IEFycmF5U2NoZW1hLmlzKHR5cGUpO1xuICAgICAgICAgICAgICAgICB2YXIgaXNNYXAgPSAhaXNBcnJheSAmJiBNYXBTY2hlbWEuaXModHlwZSk7XG4gICAgICAgICAgICAgICAgIC8vIFRPRE86IHJlZmFjdG9yIG1lLlxuICAgICAgICAgICAgICAgICAvLyBBbGxvdyBhYnN0cmFjdCBpbnRlcm1lZGlhcnkgY2xhc3NlcyB3aXRoIG5vIGZpZWxkcyB0byBiZSBzZXJpYWxpemVkXG4gICAgICAgICAgICAgICAgIC8vIChTZWUgXCJzaG91bGQgc3VwcG9ydCBhbiBpbmhlcml0YW5jZSB3aXRoIGEgU2NoZW1hIHR5cGUgd2l0aG91dCBmaWVsZHNcIiB0ZXN0KVxuICAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh0eXBlKSAhPT0gXCJzdHJpbmdcIiAmJiAhU2NoZW1hLmlzKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRUeXBlID0gT2JqZWN0LnZhbHVlcyh0eXBlKVswXTtcbiAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGNoaWxkVHlwZSkgIT09IFwic3RyaW5nXCIgJiYgIWNvbnRleHQuaGFzKGNoaWxkVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFkZChjaGlsZFR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1hbnVhbCkge1xuICAgICAgICAgICAgICAgICAgICAgLy8gZG8gbm90IGRlY2xhcmUgZ2V0dGVyL3NldHRlciBkZXNjcmlwdG9yXG4gICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uLmRlc2NyaXB0b3JzW2ZpZWxkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgdmFyIGZpZWxkQ2FjaGVkID0gXCJfXCIuY29uY2F0KGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5kZXNjcmlwdG9yc1tmaWVsZENhY2hlZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5kZXNjcmlwdG9yc1tmaWVsZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tmaWVsZENhY2hlZF07XG4gICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDcmVhdGUgUHJveHkgZm9yIGFycmF5IG9yIG1hcCBpdGVtc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNraXAgaWYgdmFsdWUgaXMgdGhlIHNhbWUgYXMgY2FjaGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpc1tmaWVsZENhY2hlZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhdXRvbWF0aWNhbGx0eSB0cmFuc2Zvcm0gQXJyYXkgaW50byBBcnJheVNjaGVtYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBcnJheSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlTY2hlbWEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyAoQXJyYXlTY2hlbWEuYmluZC5hcHBseShBcnJheVNjaGVtYSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgdmFsdWUsIGZhbHNlKSkpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXV0b21hdGljYWxsdHkgdHJhbnNmb3JtIE1hcCBpbnRvIE1hcFNjaGVtYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXAgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIE1hcFNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IE1hcFNjaGVtYSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IHRvIHR1cm4gcHJvdmlkZWQgc3RydWN0dXJlIGludG8gYSBQcm94eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbJyRwcm94eSddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0TWFwUHJveHkodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0QXJyYXlQcm94eSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmxhZyB0aGUgY2hhbmdlIGZvciBlbmNvZGluZy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5jaGFuZ2UoZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIHNldFBhcmVudCgpIHJlY3Vyc2l2ZWx5IGZvciB0aGlzIGFuZCBpdHMgY2hpbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RydWN0dXJlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWyckY2hhbmdlcyddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVsnJGNoYW5nZXMnXS5zZXRQYXJlbnQodGhpcywgdGhpcy4kY2hhbmdlcy5yb290LCB0aGlzLl9kZWZpbml0aW9uLmluZGV4ZXNbZmllbGRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzW2ZpZWxkQ2FjaGVkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXR0aW5nIGEgZmllbGQgdG8gYG51bGxgIG9yIGB1bmRlZmluZWRgIHdpbGwgZGVsZXRlIGl0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmRlbGV0ZShmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbZmllbGRDYWNoZWRdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH07XG4gICAgICAgICB9XG4gICAgICAgICAvKipcbiAgICAgICAgICAqIGBAZmlsdGVyKClgIGRlY29yYXRvciBmb3IgZGVmaW5pbmcgZGF0YSBmaWx0ZXJzIHBlciBjbGllbnRcbiAgICAgICAgICAqL1xuICAgICAgICAgZnVuY3Rpb24gZmlsdGVyKGNiKSB7XG4gICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgICAgICAgdmFyIGRlZmluaXRpb24gPSBjb25zdHJ1Y3Rvci5fZGVmaW5pdGlvbjtcbiAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb24uYWRkRmlsdGVyKGZpZWxkLCBjYikpIHtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yLl9jb250ZXh0LnVzZUZpbHRlcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIGZpbHRlckNoaWxkcmVuKGNiKSB7XG4gICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgICAgICAgdmFyIGRlZmluaXRpb24gPSBjb25zdHJ1Y3Rvci5fZGVmaW5pdGlvbjtcbiAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb24uYWRkQ2hpbGRyZW5GaWx0ZXIoZmllbGQsIGNiKSkge1xuICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IuX2NvbnRleHQudXNlRmlsdGVycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9O1xuICAgICAgICAgfVxuICAgICAgICAgLyoqXG4gICAgICAgICAgKiBgQGRlcHJlY2F0ZWQoKWAgZmxhZyBhIGZpZWxkIGFzIGRlcHJlY2F0ZWQuXG4gICAgICAgICAgKiBUaGUgcHJldmlvdXMgYEB0eXBlKClgIGFubm90YXRpb24gc2hvdWxkIHJlbWFpbiBhbG9uZyB3aXRoIHRoaXMgb25lLlxuICAgICAgICAgICovXG4gICAgICAgICBmdW5jdGlvbiBkZXByZWNhdGVkKHRocm93cykge1xuICAgICAgICAgICAgIGlmICh0aHJvd3MgPT09IHZvaWQgMCkgeyB0aHJvd3MgPSB0cnVlOyB9XG4gICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgICAgICAgdmFyIGRlZmluaXRpb24gPSBjb25zdHJ1Y3Rvci5fZGVmaW5pdGlvbjtcbiAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5kZXByZWNhdGVkW2ZpZWxkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgIGlmICh0aHJvd3MpIHtcbiAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb24uZGVzY3JpcHRvcnNbZmllbGRdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQoZmllbGQsIFwiIGlzIGRlcHJlY2F0ZWQuXCIpKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH07XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBkZWZpbmVUeXBlcyh0YXJnZXQsIGZpZWxkcywgb3B0aW9ucykge1xuICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICAgaWYgKCFvcHRpb25zLmNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgb3B0aW9ucy5jb250ZXh0ID0gdGFyZ2V0Ll9jb250ZXh0IHx8IG9wdGlvbnMuY29udGV4dCB8fCBnbG9iYWxDb250ZXh0O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBmb3IgKHZhciBmaWVsZCBpbiBmaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgdHlwZShmaWVsZHNbZmllbGRdLCBvcHRpb25zKSh0YXJnZXQucHJvdG90eXBlLCBmaWVsZCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC8qKlxuICAgICAgICAgICogQ29weXJpZ2h0IChjKSAyMDE4IEVuZGVsIERyZXllclxuICAgICAgICAgICogQ29weXJpZ2h0IChjKSAyMDE0IElvbiBEcml2ZSBTb2Z0d2FyZSBMdGQuXG4gICAgICAgICAgKlxuICAgICAgICAgICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICAgICAgICAgICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICAgICAgICAgICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICAgICAgICAgICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICAgICAgICAgICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gICAgICAgICAgKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICAgICAgICAgICpcbiAgICAgICAgICAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICAgICAgICAgICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAgICAgICAgICAqXG4gICAgICAgICAgKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gICAgICAgICAgKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICAgICAgICAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICAgICAgICAgICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICAgICAgICAgICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICAgICAgICAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gICAgICAgICAgKiBTT0ZUV0FSRVxuICAgICAgICAgICovXG4gICAgICAgICAvKipcbiAgICAgICAgICAqIG1zZ3BhY2sgaW1wbGVtZW50YXRpb24gaGlnaGx5IGJhc2VkIG9uIG5vdGVwYWNrLmlvXG4gICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vZGFycmFjaGVxdWVzbmUvbm90ZXBhY2tcbiAgICAgICAgICAqL1xuICAgICAgICAgZnVuY3Rpb24gdXRmOExlbmd0aChzdHIpIHtcbiAgICAgICAgICAgICB2YXIgYyA9IDAsIGxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdHIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gMTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCArPSAyO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2UgaWYgKGMgPCAweGQ4MDAgfHwgYyA+PSAweGUwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCArPSAzO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IDQ7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHV0ZjhXcml0ZSh2aWV3LCBvZmZzZXQsIHN0cikge1xuICAgICAgICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHN0ci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgICAgICAgICAgICAgIHZpZXdbb2Zmc2V0KytdID0gYztcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgICAgICAgICAgIHZpZXdbb2Zmc2V0KytdID0gMHhjMCB8IChjID4+IDYpO1xuICAgICAgICAgICAgICAgICAgICAgdmlld1tvZmZzZXQrK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIGlmIChjIDwgMHhkODAwIHx8IGMgPj0gMHhlMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICB2aWV3W29mZnNldCsrXSA9IDB4ZTAgfCAoYyA+PiAxMik7XG4gICAgICAgICAgICAgICAgICAgICB2aWV3W29mZnNldCsrXSA9IDB4ODAgfCAoYyA+PiA2ICYgMHgzZik7XG4gICAgICAgICAgICAgICAgICAgICB2aWV3W29mZnNldCsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzZmYpIDw8IDEwKSB8IChzdHIuY2hhckNvZGVBdChpKSAmIDB4M2ZmKSk7XG4gICAgICAgICAgICAgICAgICAgICB2aWV3W29mZnNldCsrXSA9IDB4ZjAgfCAoYyA+PiAxOCk7XG4gICAgICAgICAgICAgICAgICAgICB2aWV3W29mZnNldCsrXSA9IDB4ODAgfCAoYyA+PiAxMiAmIDB4M2YpO1xuICAgICAgICAgICAgICAgICAgICAgdmlld1tvZmZzZXQrK10gPSAweDgwIHwgKGMgPj4gNiAmIDB4M2YpO1xuICAgICAgICAgICAgICAgICAgICAgdmlld1tvZmZzZXQrK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIGludDgkMShieXRlcywgdmFsdWUpIHtcbiAgICAgICAgICAgICBieXRlcy5wdXNoKHZhbHVlICYgMjU1KTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHVpbnQ4JDEoYnl0ZXMsIHZhbHVlKSB7XG4gICAgICAgICAgICAgYnl0ZXMucHVzaCh2YWx1ZSAmIDI1NSk7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBpbnQxNiQxKGJ5dGVzLCB2YWx1ZSkge1xuICAgICAgICAgICAgIGJ5dGVzLnB1c2godmFsdWUgJiAyNTUpO1xuICAgICAgICAgICAgIGJ5dGVzLnB1c2goKHZhbHVlID4+IDgpICYgMjU1KTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHVpbnQxNiQxKGJ5dGVzLCB2YWx1ZSkge1xuICAgICAgICAgICAgIGJ5dGVzLnB1c2godmFsdWUgJiAyNTUpO1xuICAgICAgICAgICAgIGJ5dGVzLnB1c2goKHZhbHVlID4+IDgpICYgMjU1KTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIGludDMyJDEoYnl0ZXMsIHZhbHVlKSB7XG4gICAgICAgICAgICAgYnl0ZXMucHVzaCh2YWx1ZSAmIDI1NSk7XG4gICAgICAgICAgICAgYnl0ZXMucHVzaCgodmFsdWUgPj4gOCkgJiAyNTUpO1xuICAgICAgICAgICAgIGJ5dGVzLnB1c2goKHZhbHVlID4+IDE2KSAmIDI1NSk7XG4gICAgICAgICAgICAgYnl0ZXMucHVzaCgodmFsdWUgPj4gMjQpICYgMjU1KTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHVpbnQzMiQxKGJ5dGVzLCB2YWx1ZSkge1xuICAgICAgICAgICAgIHZhciBiNCA9IHZhbHVlID4+IDI0O1xuICAgICAgICAgICAgIHZhciBiMyA9IHZhbHVlID4+IDE2O1xuICAgICAgICAgICAgIHZhciBiMiA9IHZhbHVlID4+IDg7XG4gICAgICAgICAgICAgdmFyIGIxID0gdmFsdWU7XG4gICAgICAgICAgICAgYnl0ZXMucHVzaChiMSAmIDI1NSk7XG4gICAgICAgICAgICAgYnl0ZXMucHVzaChiMiAmIDI1NSk7XG4gICAgICAgICAgICAgYnl0ZXMucHVzaChiMyAmIDI1NSk7XG4gICAgICAgICAgICAgYnl0ZXMucHVzaChiNCAmIDI1NSk7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBpbnQ2NCQxKGJ5dGVzLCB2YWx1ZSkge1xuICAgICAgICAgICAgIHZhciBoaWdoID0gTWF0aC5mbG9vcih2YWx1ZSAvIE1hdGgucG93KDIsIDMyKSk7XG4gICAgICAgICAgICAgdmFyIGxvdyA9IHZhbHVlID4+PiAwO1xuICAgICAgICAgICAgIHVpbnQzMiQxKGJ5dGVzLCBsb3cpO1xuICAgICAgICAgICAgIHVpbnQzMiQxKGJ5dGVzLCBoaWdoKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHVpbnQ2NCQxKGJ5dGVzLCB2YWx1ZSkge1xuICAgICAgICAgICAgIHZhciBoaWdoID0gKHZhbHVlIC8gTWF0aC5wb3coMiwgMzIpKSA+PiAwO1xuICAgICAgICAgICAgIHZhciBsb3cgPSB2YWx1ZSA+Pj4gMDtcbiAgICAgICAgICAgICB1aW50MzIkMShieXRlcywgbG93KTtcbiAgICAgICAgICAgICB1aW50MzIkMShieXRlcywgaGlnaCk7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBmbG9hdDMyJDEoYnl0ZXMsIHZhbHVlKSB7XG4gICAgICAgICAgICAgd3JpdGVGbG9hdDMyKGJ5dGVzLCB2YWx1ZSk7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBmbG9hdDY0JDEoYnl0ZXMsIHZhbHVlKSB7XG4gICAgICAgICAgICAgd3JpdGVGbG9hdDY0KGJ5dGVzLCB2YWx1ZSk7XG4gICAgICAgICB9XG4gICAgICAgICB2YXIgX2ludDMyJDEgPSBuZXcgSW50MzJBcnJheSgyKTtcbiAgICAgICAgIHZhciBfZmxvYXQzMiQxID0gbmV3IEZsb2F0MzJBcnJheShfaW50MzIkMS5idWZmZXIpO1xuICAgICAgICAgdmFyIF9mbG9hdDY0JDEgPSBuZXcgRmxvYXQ2NEFycmF5KF9pbnQzMiQxLmJ1ZmZlcik7XG4gICAgICAgICBmdW5jdGlvbiB3cml0ZUZsb2F0MzIoYnl0ZXMsIHZhbHVlKSB7XG4gICAgICAgICAgICAgX2Zsb2F0MzIkMVswXSA9IHZhbHVlO1xuICAgICAgICAgICAgIGludDMyJDEoYnl0ZXMsIF9pbnQzMiQxWzBdKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXQ2NChieXRlcywgdmFsdWUpIHtcbiAgICAgICAgICAgICBfZmxvYXQ2NCQxWzBdID0gdmFsdWU7XG4gICAgICAgICAgICAgaW50MzIkMShieXRlcywgX2ludDMyJDFbMCBdKTtcbiAgICAgICAgICAgICBpbnQzMiQxKGJ5dGVzLCBfaW50MzIkMVsxIF0pO1xuICAgICAgICAgfVxuICAgICAgICAgZnVuY3Rpb24gYm9vbGVhbiQxKGJ5dGVzLCB2YWx1ZSkge1xuICAgICAgICAgICAgIHJldHVybiB1aW50OCQxKGJ5dGVzLCB2YWx1ZSA/IDEgOiAwKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHN0cmluZyQxKGJ5dGVzLCB2YWx1ZSkge1xuICAgICAgICAgICAgIC8vIGVuY29kZSBgbnVsbGAgc3RyaW5ncyBhcyBlbXB0eS5cbiAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHV0ZjhMZW5ndGgodmFsdWUpO1xuICAgICAgICAgICAgIHZhciBzaXplID0gMDtcbiAgICAgICAgICAgICAvLyBmaXhzdHJcbiAgICAgICAgICAgICBpZiAobGVuZ3RoIDwgMHgyMCkge1xuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKGxlbmd0aCB8IDB4YTApO1xuICAgICAgICAgICAgICAgICBzaXplID0gMTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgLy8gc3RyIDhcbiAgICAgICAgICAgICBlbHNlIGlmIChsZW5ndGggPCAweDEwMCkge1xuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4ZDkpO1xuICAgICAgICAgICAgICAgICB1aW50OCQxKGJ5dGVzLCBsZW5ndGgpO1xuICAgICAgICAgICAgICAgICBzaXplID0gMjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgLy8gc3RyIDE2XG4gICAgICAgICAgICAgZWxzZSBpZiAobGVuZ3RoIDwgMHgxMDAwMCkge1xuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4ZGEpO1xuICAgICAgICAgICAgICAgICB1aW50MTYkMShieXRlcywgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgc2l6ZSA9IDM7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIC8vIHN0ciAzMlxuICAgICAgICAgICAgIGVsc2UgaWYgKGxlbmd0aCA8IDB4MTAwMDAwMDAwKSB7XG4gICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhkYik7XG4gICAgICAgICAgICAgICAgIHVpbnQzMiQxKGJ5dGVzLCBsZW5ndGgpO1xuICAgICAgICAgICAgICAgICBzaXplID0gNTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RyaW5nIHRvbyBsb25nJyk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHV0ZjhXcml0ZShieXRlcywgYnl0ZXMubGVuZ3RoLCB2YWx1ZSk7XG4gICAgICAgICAgICAgcmV0dXJuIHNpemUgKyBsZW5ndGg7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBudW1iZXIkMShieXRlcywgdmFsdWUpIHtcbiAgICAgICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIkMShieXRlcywgMCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKCFpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciQxKGJ5dGVzLCAodmFsdWUgPiAwKSA/IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIDogLU51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgIT09ICh2YWx1ZSB8IDApKSB7XG4gICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhjYik7XG4gICAgICAgICAgICAgICAgIHdyaXRlRmxvYXQ2NChieXRlcywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgICAgICAgICAgLy8gVE9ETzogZW5jb2RlIGZsb2F0IDMyP1xuICAgICAgICAgICAgICAgICAvLyBpcyBpdCBwb3NzaWJsZSB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gZmxvYXQzMiAvIGZsb2F0NjQgaGVyZT9cbiAgICAgICAgICAgICAgICAgLy8gLy8gZmxvYXQgMzJcbiAgICAgICAgICAgICAgICAgLy8gYnl0ZXMucHVzaCgweGNhKTtcbiAgICAgICAgICAgICAgICAgLy8gd3JpdGVGbG9hdDMyKGJ5dGVzLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgIC8vIHJldHVybiA1O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAodmFsdWUgPj0gMCkge1xuICAgICAgICAgICAgICAgICAvLyBwb3NpdGl2ZSBmaXhudW1cbiAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMHg4MCkge1xuICAgICAgICAgICAgICAgICAgICAgdWludDgkMShieXRlcywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy8gdWludCA4XG4gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDB4MTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4Y2MpO1xuICAgICAgICAgICAgICAgICAgICAgdWludDgkMShieXRlcywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy8gdWludCAxNlxuICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAweDEwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4Y2QpO1xuICAgICAgICAgICAgICAgICAgICAgdWludDE2JDEoYnl0ZXMsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIHVpbnQgMzJcbiAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhjZSk7XG4gICAgICAgICAgICAgICAgICAgICB1aW50MzIkMShieXRlcywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDU7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy8gdWludCA2NFxuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4Y2YpO1xuICAgICAgICAgICAgICAgICB1aW50NjQkMShieXRlcywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgIC8vIG5lZ2F0aXZlIGZpeG51bVxuICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gLTB4MjApIHtcbiAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMHhlMCB8ICh2YWx1ZSArIDB4MjApKTtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIGludCA4XG4gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAtMHg4MCkge1xuICAgICAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaCgweGQwKTtcbiAgICAgICAgICAgICAgICAgICAgIGludDgkMShieXRlcywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy8gaW50IDE2XG4gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAtMHg4MDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4ZDEpO1xuICAgICAgICAgICAgICAgICAgICAgaW50MTYkMShieXRlcywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy8gaW50IDMyXG4gICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAtMHg4MDAwMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaCgweGQyKTtcbiAgICAgICAgICAgICAgICAgICAgIGludDMyJDEoYnl0ZXMsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiA1O1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIGludCA2NFxuICAgICAgICAgICAgICAgICBieXRlcy5wdXNoKDB4ZDMpO1xuICAgICAgICAgICAgICAgICBpbnQ2NCQxKGJ5dGVzLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgIHJldHVybiA5O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cblxuICAgICAgICAgdmFyIGVuY29kZSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICAgICAgICAgICBfX3Byb3RvX186IG51bGwsXG4gICAgICAgICAgICAgdXRmOFdyaXRlOiB1dGY4V3JpdGUsXG4gICAgICAgICAgICAgaW50ODogaW50OCQxLFxuICAgICAgICAgICAgIHVpbnQ4OiB1aW50OCQxLFxuICAgICAgICAgICAgIGludDE2OiBpbnQxNiQxLFxuICAgICAgICAgICAgIHVpbnQxNjogdWludDE2JDEsXG4gICAgICAgICAgICAgaW50MzI6IGludDMyJDEsXG4gICAgICAgICAgICAgdWludDMyOiB1aW50MzIkMSxcbiAgICAgICAgICAgICBpbnQ2NDogaW50NjQkMSxcbiAgICAgICAgICAgICB1aW50NjQ6IHVpbnQ2NCQxLFxuICAgICAgICAgICAgIGZsb2F0MzI6IGZsb2F0MzIkMSxcbiAgICAgICAgICAgICBmbG9hdDY0OiBmbG9hdDY0JDEsXG4gICAgICAgICAgICAgd3JpdGVGbG9hdDMyOiB3cml0ZUZsb2F0MzIsXG4gICAgICAgICAgICAgd3JpdGVGbG9hdDY0OiB3cml0ZUZsb2F0NjQsXG4gICAgICAgICAgICAgYm9vbGVhbjogYm9vbGVhbiQxLFxuICAgICAgICAgICAgIHN0cmluZzogc3RyaW5nJDEsXG4gICAgICAgICAgICAgbnVtYmVyOiBudW1iZXIkMVxuICAgICAgICAgfSk7XG5cbiAgICAgICAgIC8qKlxuICAgICAgICAgICogQ29weXJpZ2h0IChjKSAyMDE4IEVuZGVsIERyZXllclxuICAgICAgICAgICogQ29weXJpZ2h0IChjKSAyMDE0IElvbiBEcml2ZSBTb2Z0d2FyZSBMdGQuXG4gICAgICAgICAgKlxuICAgICAgICAgICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICAgICAgICAgICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICAgICAgICAgICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICAgICAgICAgICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICAgICAgICAgICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gICAgICAgICAgKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICAgICAgICAgICpcbiAgICAgICAgICAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICAgICAgICAgICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAgICAgICAgICAqXG4gICAgICAgICAgKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gICAgICAgICAgKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICAgICAgICAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICAgICAgICAgICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICAgICAgICAgICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICAgICAgICAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gICAgICAgICAgKiBTT0ZUV0FSRVxuICAgICAgICAgICovXG4gICAgICAgICBmdW5jdGlvbiB1dGY4UmVhZChieXRlcywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgICAgICAgICB2YXIgc3RyaW5nID0gJycsIGNociA9IDA7XG4gICAgICAgICAgICAgZm9yICh2YXIgaSA9IG9mZnNldCwgZW5kID0gb2Zmc2V0ICsgbGVuZ3RoOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgdmFyIGJ5dGUgPSBieXRlc1tpXTtcbiAgICAgICAgICAgICAgICAgaWYgKChieXRlICYgMHg4MCkgPT09IDB4MDApIHtcbiAgICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUpO1xuICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgaWYgKChieXRlICYgMHhlMCkgPT09IDB4YzApIHtcbiAgICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYnl0ZSAmIDB4MWYpIDw8IDYpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAoYnl0ZXNbKytpXSAmIDB4M2YpKTtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGlmICgoYnl0ZSAmIDB4ZjApID09PSAweGUwKSB7XG4gICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGJ5dGUgJiAweDBmKSA8PCAxMikgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICgoYnl0ZXNbKytpXSAmIDB4M2YpIDw8IDYpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAoKGJ5dGVzWysraV0gJiAweDNmKSA8PCAwKSk7XG4gICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBpZiAoKGJ5dGUgJiAweGY4KSA9PT0gMHhmMCkge1xuICAgICAgICAgICAgICAgICAgICAgY2hyID0gKChieXRlICYgMHgwNykgPDwgMTgpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAoKGJ5dGVzWysraV0gJiAweDNmKSA8PCAxMikgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICgoYnl0ZXNbKytpXSAmIDB4M2YpIDw8IDYpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAoKGJ5dGVzWysraV0gJiAweDNmKSA8PCAwKTtcbiAgICAgICAgICAgICAgICAgICAgIGlmIChjaHIgPj0gMHgwMTAwMDApIHsgLy8gc3Vycm9nYXRlIHBhaXJcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaHIgLT0gMHgwMTAwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGNociA+Pj4gMTApICsgMHhEODAwLCAoY2hyICYgMHgzRkYpICsgMHhEQzAwKTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocik7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGJ5dGUgJyArIGJ5dGUudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgICAgICAgICAgLy8gKGRvIG5vdCB0aHJvdyBlcnJvciB0byBhdm9pZCBzZXJ2ZXIvY2xpZW50IGZyb20gY3Jhc2hpbmcgZHVlIHRvIGhhY2sgYXR0ZW1wcylcbiAgICAgICAgICAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGUgJyArIGJ5dGUudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIGludDgoYnl0ZXMsIGl0KSB7XG4gICAgICAgICAgICAgcmV0dXJuIHVpbnQ4KGJ5dGVzLCBpdCkgPDwgMjQgPj4gMjQ7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiB1aW50OChieXRlcywgaXQpIHtcbiAgICAgICAgICAgICByZXR1cm4gYnl0ZXNbaXQub2Zmc2V0KytdO1xuICAgICAgICAgfVxuICAgICAgICAgZnVuY3Rpb24gaW50MTYoYnl0ZXMsIGl0KSB7XG4gICAgICAgICAgICAgcmV0dXJuIHVpbnQxNihieXRlcywgaXQpIDw8IDE2ID4+IDE2O1xuICAgICAgICAgfVxuICAgICAgICAgZnVuY3Rpb24gdWludDE2KGJ5dGVzLCBpdCkge1xuICAgICAgICAgICAgIHJldHVybiBieXRlc1tpdC5vZmZzZXQrK10gfCBieXRlc1tpdC5vZmZzZXQrK10gPDwgODtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIGludDMyKGJ5dGVzLCBpdCkge1xuICAgICAgICAgICAgIHJldHVybiBieXRlc1tpdC5vZmZzZXQrK10gfCBieXRlc1tpdC5vZmZzZXQrK10gPDwgOCB8IGJ5dGVzW2l0Lm9mZnNldCsrXSA8PCAxNiB8IGJ5dGVzW2l0Lm9mZnNldCsrXSA8PCAyNDtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHVpbnQzMihieXRlcywgaXQpIHtcbiAgICAgICAgICAgICByZXR1cm4gaW50MzIoYnl0ZXMsIGl0KSA+Pj4gMDtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIGZsb2F0MzIoYnl0ZXMsIGl0KSB7XG4gICAgICAgICAgICAgcmV0dXJuIHJlYWRGbG9hdDMyKGJ5dGVzLCBpdCk7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBmbG9hdDY0KGJ5dGVzLCBpdCkge1xuICAgICAgICAgICAgIHJldHVybiByZWFkRmxvYXQ2NChieXRlcywgaXQpO1xuICAgICAgICAgfVxuICAgICAgICAgZnVuY3Rpb24gaW50NjQoYnl0ZXMsIGl0KSB7XG4gICAgICAgICAgICAgdmFyIGxvdyA9IHVpbnQzMihieXRlcywgaXQpO1xuICAgICAgICAgICAgIHZhciBoaWdoID0gaW50MzIoYnl0ZXMsIGl0KSAqIE1hdGgucG93KDIsIDMyKTtcbiAgICAgICAgICAgICByZXR1cm4gaGlnaCArIGxvdztcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHVpbnQ2NChieXRlcywgaXQpIHtcbiAgICAgICAgICAgICB2YXIgbG93ID0gdWludDMyKGJ5dGVzLCBpdCk7XG4gICAgICAgICAgICAgdmFyIGhpZ2ggPSB1aW50MzIoYnl0ZXMsIGl0KSAqIE1hdGgucG93KDIsIDMyKTtcbiAgICAgICAgICAgICByZXR1cm4gaGlnaCArIGxvdztcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBfaW50MzIgPSBuZXcgSW50MzJBcnJheSgyKTtcbiAgICAgICAgIHZhciBfZmxvYXQzMiA9IG5ldyBGbG9hdDMyQXJyYXkoX2ludDMyLmJ1ZmZlcik7XG4gICAgICAgICB2YXIgX2Zsb2F0NjQgPSBuZXcgRmxvYXQ2NEFycmF5KF9pbnQzMi5idWZmZXIpO1xuICAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0MzIoYnl0ZXMsIGl0KSB7XG4gICAgICAgICAgICAgX2ludDMyWzBdID0gaW50MzIoYnl0ZXMsIGl0KTtcbiAgICAgICAgICAgICByZXR1cm4gX2Zsb2F0MzJbMF07XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiByZWFkRmxvYXQ2NChieXRlcywgaXQpIHtcbiAgICAgICAgICAgICBfaW50MzJbMCBdID0gaW50MzIoYnl0ZXMsIGl0KTtcbiAgICAgICAgICAgICBfaW50MzJbMSBdID0gaW50MzIoYnl0ZXMsIGl0KTtcbiAgICAgICAgICAgICByZXR1cm4gX2Zsb2F0NjRbMF07XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBib29sZWFuKGJ5dGVzLCBpdCkge1xuICAgICAgICAgICAgIHJldHVybiB1aW50OChieXRlcywgaXQpID4gMDtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHN0cmluZyhieXRlcywgaXQpIHtcbiAgICAgICAgICAgICB2YXIgcHJlZml4ID0gYnl0ZXNbaXQub2Zmc2V0KytdO1xuICAgICAgICAgICAgIHZhciBsZW5ndGg7XG4gICAgICAgICAgICAgaWYgKHByZWZpeCA8IDB4YzApIHtcbiAgICAgICAgICAgICAgICAgLy8gZml4c3RyXG4gICAgICAgICAgICAgICAgIGxlbmd0aCA9IHByZWZpeCAmIDB4MWY7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKHByZWZpeCA9PT0gMHhkOSkge1xuICAgICAgICAgICAgICAgICBsZW5ndGggPSB1aW50OChieXRlcywgaXQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChwcmVmaXggPT09IDB4ZGEpIHtcbiAgICAgICAgICAgICAgICAgbGVuZ3RoID0gdWludDE2KGJ5dGVzLCBpdCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKHByZWZpeCA9PT0gMHhkYikge1xuICAgICAgICAgICAgICAgICBsZW5ndGggPSB1aW50MzIoYnl0ZXMsIGl0KTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgdmFyIHZhbHVlID0gdXRmOFJlYWQoYnl0ZXMsIGl0Lm9mZnNldCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICBpdC5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ0NoZWNrKGJ5dGVzLCBpdCkge1xuICAgICAgICAgICAgIHZhciBwcmVmaXggPSBieXRlc1tpdC5vZmZzZXRdO1xuICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgLy8gZml4c3RyXG4gICAgICAgICAgICAgKHByZWZpeCA8IDB4YzAgJiYgcHJlZml4ID4gMHhhMCkgfHxcbiAgICAgICAgICAgICAgICAgLy8gc3RyIDhcbiAgICAgICAgICAgICAgICAgcHJlZml4ID09PSAweGQ5IHx8XG4gICAgICAgICAgICAgICAgIC8vIHN0ciAxNlxuICAgICAgICAgICAgICAgICBwcmVmaXggPT09IDB4ZGEgfHxcbiAgICAgICAgICAgICAgICAgLy8gc3RyIDMyXG4gICAgICAgICAgICAgICAgIHByZWZpeCA9PT0gMHhkYik7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBudW1iZXIoYnl0ZXMsIGl0KSB7XG4gICAgICAgICAgICAgdmFyIHByZWZpeCA9IGJ5dGVzW2l0Lm9mZnNldCsrXTtcbiAgICAgICAgICAgICBpZiAocHJlZml4IDwgMHg4MCkge1xuICAgICAgICAgICAgICAgICAvLyBwb3NpdGl2ZSBmaXhpbnRcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSBpZiAocHJlZml4ID09PSAweGNhKSB7XG4gICAgICAgICAgICAgICAgIC8vIGZsb2F0IDMyXG4gICAgICAgICAgICAgICAgIHJldHVybiByZWFkRmxvYXQzMihieXRlcywgaXQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChwcmVmaXggPT09IDB4Y2IpIHtcbiAgICAgICAgICAgICAgICAgLy8gZmxvYXQgNjRcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRGbG9hdDY0KGJ5dGVzLCBpdCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKHByZWZpeCA9PT0gMHhjYykge1xuICAgICAgICAgICAgICAgICAvLyB1aW50IDhcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHVpbnQ4KGJ5dGVzLCBpdCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKHByZWZpeCA9PT0gMHhjZCkge1xuICAgICAgICAgICAgICAgICAvLyB1aW50IDE2XG4gICAgICAgICAgICAgICAgIHJldHVybiB1aW50MTYoYnl0ZXMsIGl0KTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSBpZiAocHJlZml4ID09PSAweGNlKSB7XG4gICAgICAgICAgICAgICAgIC8vIHVpbnQgMzJcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHVpbnQzMihieXRlcywgaXQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChwcmVmaXggPT09IDB4Y2YpIHtcbiAgICAgICAgICAgICAgICAgLy8gdWludCA2NFxuICAgICAgICAgICAgICAgICByZXR1cm4gdWludDY0KGJ5dGVzLCBpdCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKHByZWZpeCA9PT0gMHhkMCkge1xuICAgICAgICAgICAgICAgICAvLyBpbnQgOFxuICAgICAgICAgICAgICAgICByZXR1cm4gaW50OChieXRlcywgaXQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChwcmVmaXggPT09IDB4ZDEpIHtcbiAgICAgICAgICAgICAgICAgLy8gaW50IDE2XG4gICAgICAgICAgICAgICAgIHJldHVybiBpbnQxNihieXRlcywgaXQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChwcmVmaXggPT09IDB4ZDIpIHtcbiAgICAgICAgICAgICAgICAgLy8gaW50IDMyXG4gICAgICAgICAgICAgICAgIHJldHVybiBpbnQzMihieXRlcywgaXQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChwcmVmaXggPT09IDB4ZDMpIHtcbiAgICAgICAgICAgICAgICAgLy8gaW50IDY0XG4gICAgICAgICAgICAgICAgIHJldHVybiBpbnQ2NChieXRlcywgaXQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChwcmVmaXggPiAweGRmKSB7XG4gICAgICAgICAgICAgICAgIC8vIG5lZ2F0aXZlIGZpeGludFxuICAgICAgICAgICAgICAgICByZXR1cm4gKDB4ZmYgLSBwcmVmaXggKyAxKSAqIC0xO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIG51bWJlckNoZWNrKGJ5dGVzLCBpdCkge1xuICAgICAgICAgICAgIHZhciBwcmVmaXggPSBieXRlc1tpdC5vZmZzZXRdO1xuICAgICAgICAgICAgIC8vIHBvc2l0aXZlIGZpeGludCAtIDB4MDAgLSAweDdmXG4gICAgICAgICAgICAgLy8gZmxvYXQgMzIgICAgICAgIC0gMHhjYVxuICAgICAgICAgICAgIC8vIGZsb2F0IDY0ICAgICAgICAtIDB4Y2JcbiAgICAgICAgICAgICAvLyB1aW50IDggICAgICAgICAgLSAweGNjXG4gICAgICAgICAgICAgLy8gdWludCAxNiAgICAgICAgIC0gMHhjZFxuICAgICAgICAgICAgIC8vIHVpbnQgMzIgICAgICAgICAtIDB4Y2VcbiAgICAgICAgICAgICAvLyB1aW50IDY0ICAgICAgICAgLSAweGNmXG4gICAgICAgICAgICAgLy8gaW50IDggICAgICAgICAgIC0gMHhkMFxuICAgICAgICAgICAgIC8vIGludCAxNiAgICAgICAgICAtIDB4ZDFcbiAgICAgICAgICAgICAvLyBpbnQgMzIgICAgICAgICAgLSAweGQyXG4gICAgICAgICAgICAgLy8gaW50IDY0ICAgICAgICAgIC0gMHhkM1xuICAgICAgICAgICAgIHJldHVybiAocHJlZml4IDwgMHg4MCB8fFxuICAgICAgICAgICAgICAgICAocHJlZml4ID49IDB4Y2EgJiYgcHJlZml4IDw9IDB4ZDMpKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGZ1bmN0aW9uIGFycmF5Q2hlY2soYnl0ZXMsIGl0KSB7XG4gICAgICAgICAgICAgcmV0dXJuIGJ5dGVzW2l0Lm9mZnNldF0gPCAweGEwO1xuICAgICAgICAgICAgIC8vIGNvbnN0IHByZWZpeCA9IGJ5dGVzW2l0Lm9mZnNldF0gO1xuICAgICAgICAgICAgIC8vIGlmIChwcmVmaXggPCAweGEwKSB7XG4gICAgICAgICAgICAgLy8gICByZXR1cm4gcHJlZml4O1xuICAgICAgICAgICAgIC8vIC8vIGFycmF5XG4gICAgICAgICAgICAgLy8gfSBlbHNlIGlmIChwcmVmaXggPT09IDB4ZGMpIHtcbiAgICAgICAgICAgICAvLyAgIGl0Lm9mZnNldCArPSAyO1xuICAgICAgICAgICAgIC8vIH0gZWxzZSBpZiAoMHhkZCkge1xuICAgICAgICAgICAgIC8vICAgaXQub2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgIC8vIHJldHVybiBwcmVmaXg7XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBzd2l0Y2hTdHJ1Y3R1cmVDaGVjayhieXRlcywgaXQpIHtcbiAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgIC8vIHByZXZpb3VzIGJ5dGUgc2hvdWxkIGJlIGBTV0lUQ0hfVE9fU1RSVUNUVVJFYFxuICAgICAgICAgICAgIGJ5dGVzW2l0Lm9mZnNldCAtIDFdID09PSBTV0lUQ0hfVE9fU1RSVUNUVVJFICYmXG4gICAgICAgICAgICAgICAgIC8vIG5leHQgYnl0ZSBzaG91bGQgYmUgYSBudW1iZXJcbiAgICAgICAgICAgICAgICAgKGJ5dGVzW2l0Lm9mZnNldF0gPCAweDgwIHx8IChieXRlc1tpdC5vZmZzZXRdID49IDB4Y2EgJiYgYnl0ZXNbaXQub2Zmc2V0XSA8PSAweGQzKSkpO1xuICAgICAgICAgfVxuXG4gICAgICAgICB2YXIgZGVjb2RlID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgICAgICAgICBpbnQ4OiBpbnQ4LFxuICAgICAgICAgICAgIHVpbnQ4OiB1aW50OCxcbiAgICAgICAgICAgICBpbnQxNjogaW50MTYsXG4gICAgICAgICAgICAgdWludDE2OiB1aW50MTYsXG4gICAgICAgICAgICAgaW50MzI6IGludDMyLFxuICAgICAgICAgICAgIHVpbnQzMjogdWludDMyLFxuICAgICAgICAgICAgIGZsb2F0MzI6IGZsb2F0MzIsXG4gICAgICAgICAgICAgZmxvYXQ2NDogZmxvYXQ2NCxcbiAgICAgICAgICAgICBpbnQ2NDogaW50NjQsXG4gICAgICAgICAgICAgdWludDY0OiB1aW50NjQsXG4gICAgICAgICAgICAgcmVhZEZsb2F0MzI6IHJlYWRGbG9hdDMyLFxuICAgICAgICAgICAgIHJlYWRGbG9hdDY0OiByZWFkRmxvYXQ2NCxcbiAgICAgICAgICAgICBib29sZWFuOiBib29sZWFuLFxuICAgICAgICAgICAgIHN0cmluZzogc3RyaW5nLFxuICAgICAgICAgICAgIHN0cmluZ0NoZWNrOiBzdHJpbmdDaGVjayxcbiAgICAgICAgICAgICBudW1iZXI6IG51bWJlcixcbiAgICAgICAgICAgICBudW1iZXJDaGVjazogbnVtYmVyQ2hlY2ssXG4gICAgICAgICAgICAgYXJyYXlDaGVjazogYXJyYXlDaGVjayxcbiAgICAgICAgICAgICBzd2l0Y2hTdHJ1Y3R1cmVDaGVjazogc3dpdGNoU3RydWN0dXJlQ2hlY2tcbiAgICAgICAgIH0pO1xuXG4gICAgICAgICB2YXIgQ29sbGVjdGlvblNjaGVtYSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICBmdW5jdGlvbiBDb2xsZWN0aW9uU2NoZW1hKGluaXRpYWxWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcyA9IG5ldyBDaGFuZ2VUcmVlKHRoaXMpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRpdGVtcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kcmVmSWQgPSAwO1xuICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7IHJldHVybiBfdGhpcy5hZGQodik7IH0pO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIENvbGxlY3Rpb25TY2hlbWEucHJvdG90eXBlLm9uQWRkID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0cmlnZ2VyQWxsKSB7XG4gICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyQWxsID09PSB2b2lkIDApIHsgdHJpZ2dlckFsbCA9IHRydWU7IH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIGFkZENhbGxiYWNrKCh0aGlzLiRjYWxsYmFja3MgfHwgKHRoaXMuJGNhbGxiYWNrcyA9IFtdKSksIGV4cG9ydHMuT1BFUkFUSU9OLkFERCwgY2FsbGJhY2ssICh0cmlnZ2VyQWxsKVxuICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLiRpdGVtc1xuICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUub25SZW1vdmUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIGFkZENhbGxiYWNrKHRoaXMuJGNhbGxiYWNrcyB8fCAodGhpcy4kY2FsbGJhY2tzID0gW10pLCBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEUsIGNhbGxiYWNrKTsgfTtcbiAgICAgICAgICAgICBDb2xsZWN0aW9uU2NoZW1hLnByb3RvdHlwZS5vbkNoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gYWRkQ2FsbGJhY2sodGhpcy4kY2FsbGJhY2tzIHx8ICh0aGlzLiRjYWxsYmFja3MgPSBbXSksIGV4cG9ydHMuT1BFUkFUSU9OLlJFUExBQ0UsIGNhbGxiYWNrKTsgfTtcbiAgICAgICAgICAgICBDb2xsZWN0aW9uU2NoZW1hLmlzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVbJ2NvbGxlY3Rpb24nXSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgIC8vIHNldCBcImluZGV4XCIgZm9yIHJlZmVyZW5jZS5cbiAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy4kcmVmSWQrKztcbiAgICAgICAgICAgICAgICAgdmFyIGlzUmVmID0gKHZhbHVlWyckY2hhbmdlcyddKSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICBpZiAoaXNSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgIHZhbHVlWyckY2hhbmdlcyddLnNldFBhcmVudCh0aGlzLCB0aGlzLiRjaGFuZ2VzLnJvb3QsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmluZGV4ZXNbaW5kZXhdID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGluZGV4ZXMuc2V0KGluZGV4LCBpbmRleCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLnNldChpbmRleCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmNoYW5nZShpbmRleCk7XG4gICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIENvbGxlY3Rpb25TY2hlbWEucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgIHZhciBrZXkgPSBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLmtleXMoKSlbaW5kZXhdO1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBDb2xsZWN0aW9uU2NoZW1hLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuZW50cmllcygpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLiRpdGVtcy5lbnRyaWVzKCk7XG4gICAgICAgICAgICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgICAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICAgICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyaWVzLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSBlbnRyeS52YWx1ZVsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gZW50cnkudmFsdWVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmRlbGV0ZShpbmRleCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGluZGV4ZXMuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmRlbGV0ZShpbmRleCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBDb2xsZWN0aW9uU2NoZW1hLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgIC8vIGRpc2NhcmQgcHJldmlvdXMgb3BlcmF0aW9ucy5cbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5kaXNjYXJkKHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmluZGV4ZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgLy8gY2xlYXIgcHJldmlvdXMgaW5kZXhlc1xuICAgICAgICAgICAgICAgICB0aGlzLiRpbmRleGVzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIC8vIFdoZW4gZGVjb2Rpbmc6XG4gICAgICAgICAgICAgICAgIC8vIC0gZW5xdWV1ZSBpdGVtcyBmb3IgREVMRVRFIGNhbGxiYWNrLlxuICAgICAgICAgICAgICAgICAvLyAtIGZsYWcgY2hpbGQgaXRlbXMgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNoaWxkUmVmcy5jYWxsKHRoaXMsIGNoYW5nZXMpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIGNsZWFyIGl0ZW1zXG4gICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMub3BlcmF0aW9uKHsgaW5kZXg6IDAsIG9wOiBleHBvcnRzLk9QRVJBVElPTi5DTEVBUiB9KTtcbiAgICAgICAgICAgICAgICAgLy8gdG91Y2ggYWxsIHN0cnVjdHVyZXMgdW50aWwgcmVhY2ggcm9vdFxuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLnRvdWNoUGFyZW50cygpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuJGl0ZW1zLnZhbHVlcygpKS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2ID09PSB2YWx1ZTsgfSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBDb2xsZWN0aW9uU2NoZW1hLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgdGhpcy4kaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSwgXykgeyByZXR1cm4gY2FsbGJhY2tmbih2YWx1ZSwga2V5LCBfdGhpcyk7IH0pO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMudmFsdWVzKCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLnNpemU7XG4gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICBDb2xsZWN0aW9uU2NoZW1hLnByb3RvdHlwZS5zZXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwga2V5KSB7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGluZGV4ZXMuc2V0KGluZGV4LCBrZXkpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGluZGV4ZXMuZ2V0KGluZGV4KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIENvbGxlY3Rpb25TY2hlbWEucHJvdG90eXBlLmdldEJ5SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmdldCh0aGlzLiRpbmRleGVzLmdldChpbmRleCkpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUuZGVsZXRlQnlJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy4kaW5kZXhlcy5nZXQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRpdGVtcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcy5kZWxldGUoaW5kZXgpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy4kaXRlbXMudmFsdWVzKCkpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goKHR5cGVvZiAodmFsdWVbJ3RvSlNPTiddKSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsdWVbJ3RvSlNPTiddKClcbiAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgIC8vIERlY29kaW5nIHV0aWxpdGllc1xuICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgQ29sbGVjdGlvblNjaGVtYS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoaXNEZWNvZGluZykge1xuICAgICAgICAgICAgICAgICB2YXIgY2xvbmVkO1xuICAgICAgICAgICAgICAgICBpZiAoaXNEZWNvZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgLy8gY2xpZW50LXNpZGVcbiAgICAgICAgICAgICAgICAgICAgIGNsb25lZCA9IE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb25TY2hlbWEoKSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyBzZXJ2ZXItc2lkZVxuICAgICAgICAgICAgICAgICAgICAgY2xvbmVkID0gbmV3IENvbGxlY3Rpb25TY2hlbWEoKTtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbJyRjaGFuZ2VzJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkLmFkZCh2YWx1ZVsnY2xvbmUnXSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZC5hZGQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICByZXR1cm4gQ29sbGVjdGlvblNjaGVtYTtcbiAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgIHZhciBTZXRTY2hlbWEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgZnVuY3Rpb24gU2V0U2NoZW1hKGluaXRpYWxWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcyA9IG5ldyBDaGFuZ2VUcmVlKHRoaXMpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRpdGVtcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaW5kZXhlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kcmVmSWQgPSAwO1xuICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7IHJldHVybiBfdGhpcy5hZGQodik7IH0pO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUub25BZGQgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHRyaWdnZXJBbGwpIHtcbiAgICAgICAgICAgICAgICAgaWYgKHRyaWdnZXJBbGwgPT09IHZvaWQgMCkgeyB0cmlnZ2VyQWxsID0gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgICByZXR1cm4gYWRkQ2FsbGJhY2soKHRoaXMuJGNhbGxiYWNrcyB8fCAodGhpcy4kY2FsbGJhY2tzID0gW10pKSwgZXhwb3J0cy5PUEVSQVRJT04uQURELCBjYWxsYmFjaywgKHRyaWdnZXJBbGwpXG4gICAgICAgICAgICAgICAgICAgICA/IHRoaXMuJGl0ZW1zXG4gICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTZXRTY2hlbWEucHJvdG90eXBlLm9uUmVtb3ZlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBhZGRDYWxsYmFjayh0aGlzLiRjYWxsYmFja3MgfHwgKHRoaXMuJGNhbGxiYWNrcyA9IFtdKSwgZXhwb3J0cy5PUEVSQVRJT04uREVMRVRFLCBjYWxsYmFjayk7IH07XG4gICAgICAgICAgICAgU2V0U2NoZW1hLnByb3RvdHlwZS5vbkNoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gYWRkQ2FsbGJhY2sodGhpcy4kY2FsbGJhY2tzIHx8ICh0aGlzLiRjYWxsYmFja3MgPSBbXSksIGV4cG9ydHMuT1BFUkFUSU9OLlJFUExBQ0UsIGNhbGxiYWNrKTsgfTtcbiAgICAgICAgICAgICBTZXRTY2hlbWEuaXMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZVsnc2V0J10gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgIC8vIGltbWVkaWF0ZWxseSByZXR1cm4gZmFsc2UgaWYgdmFsdWUgYWxyZWFkeSBhZGRlZC5cbiAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIC8vIHNldCBcImluZGV4XCIgZm9yIHJlZmVyZW5jZS5cbiAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy4kcmVmSWQrKztcbiAgICAgICAgICAgICAgICAgaWYgKCh2YWx1ZVsnJGNoYW5nZXMnXSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgdmFsdWVbJyRjaGFuZ2VzJ10uc2V0UGFyZW50KHRoaXMsIHRoaXMuJGNoYW5nZXMucm9vdCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHZhciBvcGVyYXRpb24gPSAoX2IgPSAoX2EgPSB0aGlzLiRjaGFuZ2VzLmluZGV4ZXNbaW5kZXhdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3ApICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGV4cG9ydHMuT1BFUkFUSU9OLkFERDtcbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5pbmRleGVzW2luZGV4XSA9IGluZGV4O1xuICAgICAgICAgICAgICAgICB0aGlzLiRpbmRleGVzLnNldChpbmRleCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICB0aGlzLiRpdGVtcy5zZXQoaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5jaGFuZ2UoaW5kZXgsIG9wZXJhdGlvbik7XG4gICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmVudHJpZXMoKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLiRpdGVtcy5lbnRyaWVzKCk7XG4gICAgICAgICAgICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgICAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICAgICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyaWVzLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSBlbnRyeS52YWx1ZVsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gZW50cnkudmFsdWVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmRlbGV0ZShpbmRleCk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGluZGV4ZXMuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmRlbGV0ZShpbmRleCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTZXRTY2hlbWEucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgLy8gZGlzY2FyZCBwcmV2aW91cyBvcGVyYXRpb25zLlxuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmRpc2NhcmQodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMuaW5kZXhlcyA9IHt9O1xuICAgICAgICAgICAgICAgICAvLyBjbGVhciBwcmV2aW91cyBpbmRleGVzXG4gICAgICAgICAgICAgICAgIHRoaXMuJGluZGV4ZXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgLy8gV2hlbiBkZWNvZGluZzpcbiAgICAgICAgICAgICAgICAgLy8gLSBlbnF1ZXVlIGl0ZW1zIGZvciBERUxFVEUgY2FsbGJhY2suXG4gICAgICAgICAgICAgICAgIC8vIC0gZmxhZyBjaGlsZCBpdGVtcyBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlcykge1xuICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2hpbGRSZWZzLmNhbGwodGhpcywgY2hhbmdlcyk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy8gY2xlYXIgaXRlbXNcbiAgICAgICAgICAgICAgICAgdGhpcy4kaXRlbXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kY2hhbmdlcy5vcGVyYXRpb24oeyBpbmRleDogMCwgb3A6IGV4cG9ydHMuT1BFUkFUSU9OLkNMRUFSIH0pO1xuICAgICAgICAgICAgICAgICAvLyB0b3VjaCBhbGwgc3RydWN0dXJlcyB1bnRpbCByZWFjaCByb290XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMudG91Y2hQYXJlbnRzKCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTZXRTY2hlbWEucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy4kaXRlbXMudmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgIHZhciBoYXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICAgICAgICAgICB3aGlsZSAoZW50cnkgPSB2YWx1ZXMubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBlbnRyeS52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGhhcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIGhhcztcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXksIF8pIHsgcmV0dXJuIGNhbGxiYWNrZm4odmFsdWUsIGtleSwgX3RoaXMpOyB9KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMudmFsdWVzKCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2V0U2NoZW1hLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuc2l6ZTtcbiAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUuc2V0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgsIGtleSkge1xuICAgICAgICAgICAgICAgICB0aGlzLiRpbmRleGVzLnNldChpbmRleCwga2V5KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGluZGV4ZXMuZ2V0KGluZGV4KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUuZ2V0QnlJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kaXRlbXMuZ2V0KHRoaXMuJGluZGV4ZXMuZ2V0KGluZGV4KSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTZXRTY2hlbWEucHJvdG90eXBlLmRlbGV0ZUJ5SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuJGluZGV4ZXMuZ2V0KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgdGhpcy4kaXRlbXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGluZGV4ZXMuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNldFNjaGVtYS5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy4kaXRlbXMudmFsdWVzKCkpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2V0U2NoZW1hLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCgodHlwZW9mICh2YWx1ZVsndG9KU09OJ10pID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVsndG9KU09OJ10oKVxuICAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUpO1xuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgLy8gRGVjb2RpbmcgdXRpbGl0aWVzXG4gICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICBTZXRTY2hlbWEucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKGlzRGVjb2RpbmcpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGNsb25lZDtcbiAgICAgICAgICAgICAgICAgaWYgKGlzRGVjb2RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgIC8vIGNsaWVudC1zaWRlXG4gICAgICAgICAgICAgICAgICAgICBjbG9uZWQgPSBPYmplY3QuYXNzaWduKG5ldyBTZXRTY2hlbWEoKSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyBzZXJ2ZXItc2lkZVxuICAgICAgICAgICAgICAgICAgICAgY2xvbmVkID0gbmV3IFNldFNjaGVtYSgpO1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVsnJGNoYW5nZXMnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWQuYWRkKHZhbHVlWydjbG9uZSddKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkLmFkZCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIHJldHVybiBTZXRTY2hlbWE7XG4gICAgICAgICB9KCkpO1xuXG4gICAgICAgICB2YXIgQ2xpZW50U3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgZnVuY3Rpb24gQ2xpZW50U3RhdGUoKSB7XG4gICAgICAgICAgICAgICAgIHRoaXMucmVmSWRzID0gbmV3IFdlYWtTZXQoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJJbmRleGVzID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgLy8gY29udGFpbmVySW5kZXhlcyA9IG5ldyBNYXA8Q2hhbmdlVHJlZSwgU2V0PG51bWJlcj4+KCk7XG4gICAgICAgICAgICAgQ2xpZW50U3RhdGUucHJvdG90eXBlLmFkZFJlZklkID0gZnVuY3Rpb24gKGNoYW5nZVRyZWUpIHtcbiAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlZklkcy5oYXMoY2hhbmdlVHJlZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmSWRzLmFkZChjaGFuZ2VUcmVlKTtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVySW5kZXhlcy5zZXQoY2hhbmdlVHJlZSwgbmV3IFNldCgpKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgQ2xpZW50U3RhdGUuZ2V0ID0gZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICAgICAgICAgICBpZiAoY2xpZW50LiRmaWx0ZXJTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICBjbGllbnQuJGZpbHRlclN0YXRlID0gbmV3IENsaWVudFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC4kZmlsdGVyU3RhdGU7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICByZXR1cm4gQ2xpZW50U3RhdGU7XG4gICAgICAgICB9KCkpO1xuXG4gICAgICAgICB2YXIgUmVmZXJlbmNlVHJhY2tlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICBmdW5jdGlvbiBSZWZlcmVuY2VUcmFja2VyKCkge1xuICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAvLyBSZWxhdGlvbiBvZiByZWZJZCA9PiBTY2hlbWEgc3RydWN0dXJlXG4gICAgICAgICAgICAgICAgIC8vIEZvciBkaXJlY3QgYWNjZXNzIG9mIHN0cnVjdHVyZXMgZHVyaW5nIGRlY29kaW5nIHRpbWUuXG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIHRoaXMucmVmcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy5yZWZDb3VudHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVkUmVmcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VW5pcXVlSWQgPSAwO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBSZWZlcmVuY2VUcmFja2VyLnByb3RvdHlwZS5nZXROZXh0VW5pcXVlSWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHRVbmlxdWVJZCsrO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgLy8gZm9yIGRlY29kaW5nXG4gICAgICAgICAgICAgUmVmZXJlbmNlVHJhY2tlci5wcm90b3R5cGUuYWRkUmVmID0gZnVuY3Rpb24gKHJlZklkLCByZWYsIGluY3JlbWVudENvdW50KSB7XG4gICAgICAgICAgICAgICAgIGlmIChpbmNyZW1lbnRDb3VudCA9PT0gdm9pZCAwKSB7IGluY3JlbWVudENvdW50ID0gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgICB0aGlzLnJlZnMuc2V0KHJlZklkLCByZWYpO1xuICAgICAgICAgICAgICAgICBpZiAoaW5jcmVtZW50Q291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmQ291bnRzW3JlZklkXSA9ICh0aGlzLnJlZkNvdW50c1tyZWZJZF0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAvLyBmb3IgZGVjb2RpbmdcbiAgICAgICAgICAgICBSZWZlcmVuY2VUcmFja2VyLnByb3RvdHlwZS5yZW1vdmVSZWYgPSBmdW5jdGlvbiAocmVmSWQpIHtcbiAgICAgICAgICAgICAgICAgdGhpcy5yZWZDb3VudHNbcmVmSWRdID0gdGhpcy5yZWZDb3VudHNbcmVmSWRdIC0gMTtcbiAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVkUmVmcy5hZGQocmVmSWQpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgUmVmZXJlbmNlVHJhY2tlci5wcm90b3R5cGUuY2xlYXJSZWZzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB0aGlzLnJlZnMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVkUmVmcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgICB0aGlzLnJlZkNvdW50cyA9IHt9O1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgLy8gZm9yIGRlY29kaW5nXG4gICAgICAgICAgICAgUmVmZXJlbmNlVHJhY2tlci5wcm90b3R5cGUuZ2FyYmFnZUNvbGxlY3REZWxldGVkUmVmcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVkUmVmcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWZJZCkge1xuICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgIC8vIFNraXAgYWN0aXZlIHJlZmVyZW5jZXMuXG4gICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnJlZkNvdW50c1tyZWZJZF0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IF90aGlzLnJlZnMuZ2V0KHJlZklkKTtcbiAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAvLyBFbnN1cmUgY2hpbGQgc2NoZW1hIGluc3RhbmNlcyBoYXZlIHRoZWlyIHJlZmVyZW5jZXMgcmVtb3ZlZCBhcyB3ZWxsLlxuICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgIGlmIChyZWYgaW5zdGFuY2VvZiBTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmaWVsZE5hbWUgaW4gcmVmWydfZGVmaW5pdGlvbiddLnNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChyZWZbJ19kZWZpbml0aW9uJ10uc2NoZW1hW2ZpZWxkTmFtZV0pICE9PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZbZmllbGROYW1lXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmW2ZpZWxkTmFtZV1bJyRjaGFuZ2VzJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZVJlZihyZWZbZmllbGROYW1lXVsnJGNoYW5nZXMnXS5yZWZJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IHJlZlsnJGNoYW5nZXMnXS5wYXJlbnQuX2RlZmluaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBkZWZpbml0aW9uLnNjaGVtYVtkZWZpbml0aW9uLmZpZWxkc0J5SW5kZXhbcmVmWyckY2hhbmdlcyddLnBhcmVudEluZGV4XV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoT2JqZWN0LnZhbHVlcyh0eXBlKVswXSkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKHJlZi52YWx1ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gX3RoaXMucmVtb3ZlUmVmKGNoaWxkWyckY2hhbmdlcyddLnJlZklkKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVmcy5kZWxldGUocmVmSWQpO1xuICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLnJlZkNvdW50c1tyZWZJZF07XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAvLyBjbGVhciBkZWxldGVkIHJlZnMuXG4gICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlZFJlZnMuY2xlYXIoKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIHJldHVybiBSZWZlcmVuY2VUcmFja2VyO1xuICAgICAgICAgfSgpKTtcblxuICAgICAgICAgdmFyIEVuY29kZVNjaGVtYUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgIF9fZXh0ZW5kcyhFbmNvZGVTY2hlbWFFcnJvciwgX3N1cGVyKTtcbiAgICAgICAgICAgICBmdW5jdGlvbiBFbmNvZGVTY2hlbWFFcnJvcigpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICByZXR1cm4gRW5jb2RlU2NoZW1hRXJyb3I7XG4gICAgICAgICB9KEVycm9yKSk7XG4gICAgICAgICBmdW5jdGlvbiBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlLCBrbGFzcywgZmllbGQpIHtcbiAgICAgICAgICAgICB2YXIgdHlwZW9mVGFyZ2V0O1xuICAgICAgICAgICAgIHZhciBhbGxvd051bGwgPSBmYWxzZTtcbiAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgICBjYXNlIFwiaW50OFwiOlxuICAgICAgICAgICAgICAgICBjYXNlIFwidWludDhcIjpcbiAgICAgICAgICAgICAgICAgY2FzZSBcImludDE2XCI6XG4gICAgICAgICAgICAgICAgIGNhc2UgXCJ1aW50MTZcIjpcbiAgICAgICAgICAgICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgICAgICAgICAgIGNhc2UgXCJ1aW50MzJcIjpcbiAgICAgICAgICAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgICAgICAgICAgIGNhc2UgXCJ1aW50NjRcIjpcbiAgICAgICAgICAgICAgICAgY2FzZSBcImZsb2F0MzJcIjpcbiAgICAgICAgICAgICAgICAgY2FzZSBcImZsb2F0NjRcIjpcbiAgICAgICAgICAgICAgICAgICAgIHR5cGVvZlRhcmdldCA9IFwibnVtYmVyXCI7XG4gICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0cnlpbmcgdG8gZW5jb2RlIFxcXCJOYU5cXFwiIGluIFwiLmNvbmNhdChrbGFzcy5jb25zdHJ1Y3Rvci5uYW1lLCBcIiNcIikuY29uY2F0KGZpZWxkKSk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgICAgICAgdHlwZW9mVGFyZ2V0ID0gXCJzdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgIGFsbG93TnVsbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgICAgICAgICAgIC8vIGJvb2xlYW4gaXMgYWx3YXlzIGVuY29kZWQgYXMgdHJ1ZS9mYWxzZSBiYXNlZCBvbiB0cnV0aGluZXNzXG4gICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSAhPT0gdHlwZW9mVGFyZ2V0ICYmICghYWxsb3dOdWxsIHx8IChhbGxvd051bGwgJiYgdmFsdWUgIT09IG51bGwpKSkge1xuICAgICAgICAgICAgICAgICB2YXIgZm91bmRWYWx1ZSA9IFwiJ1wiLmNvbmNhdChKU09OLnN0cmluZ2lmeSh2YWx1ZSksIFwiJ1wiKS5jb25jYXQoKHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yICYmIFwiIChcIi5jb25jYXQodmFsdWUuY29uc3RydWN0b3IubmFtZSwgXCIpXCIpKSB8fCAnJyk7XG4gICAgICAgICAgICAgICAgIHRocm93IG5ldyBFbmNvZGVTY2hlbWFFcnJvcihcImEgJ1wiLmNvbmNhdCh0eXBlb2ZUYXJnZXQsIFwiJyB3YXMgZXhwZWN0ZWQsIGJ1dCBcIikuY29uY2F0KGZvdW5kVmFsdWUsIFwiIHdhcyBwcm92aWRlZCBpbiBcIikuY29uY2F0KGtsYXNzLmNvbnN0cnVjdG9yLm5hbWUsIFwiI1wiKS5jb25jYXQoZmllbGQpKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBmdW5jdGlvbiBhc3NlcnRJbnN0YW5jZVR5cGUodmFsdWUsIHR5cGUsIGtsYXNzLCBmaWVsZCkge1xuICAgICAgICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVuY29kZVNjaGVtYUVycm9yKFwiYSAnXCIuY29uY2F0KHR5cGUubmFtZSwgXCInIHdhcyBleHBlY3RlZCwgYnV0ICdcIikuY29uY2F0KHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUsIFwiJyB3YXMgcHJvdmlkZWQgaW4gXCIpLmNvbmNhdChrbGFzcy5jb25zdHJ1Y3Rvci5uYW1lLCBcIiNcIikuY29uY2F0KGZpZWxkKSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgZnVuY3Rpb24gZW5jb2RlUHJpbWl0aXZlVHlwZSh0eXBlLCBieXRlcywgdmFsdWUsIGtsYXNzLCBmaWVsZCkge1xuICAgICAgICAgICAgIGFzc2VydFR5cGUodmFsdWUsIHR5cGUsIGtsYXNzLCBmaWVsZCk7XG4gICAgICAgICAgICAgdmFyIGVuY29kZUZ1bmMgPSBlbmNvZGVbdHlwZV07XG4gICAgICAgICAgICAgaWYgKGVuY29kZUZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgZW5jb2RlRnVuYyhieXRlcywgdmFsdWUpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVuY29kZVNjaGVtYUVycm9yKFwiYSAnXCIuY29uY2F0KHR5cGUsIFwiJyB3YXMgZXhwZWN0ZWQsIGJ1dCBcIikuY29uY2F0KHZhbHVlLCBcIiB3YXMgcHJvdmlkZWQgaW4gXCIpLmNvbmNhdChrbGFzcy5jb25zdHJ1Y3Rvci5uYW1lLCBcIiNcIikuY29uY2F0KGZpZWxkKSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgZnVuY3Rpb24gZGVjb2RlUHJpbWl0aXZlVHlwZSh0eXBlLCBieXRlcywgaXQpIHtcbiAgICAgICAgICAgICByZXR1cm4gZGVjb2RlW3R5cGVdKGJ5dGVzLCBpdCk7XG4gICAgICAgICB9XG4gICAgICAgICAvKipcbiAgICAgICAgICAqIFNjaGVtYSBlbmNvZGVyIC8gZGVjb2RlclxuICAgICAgICAgICovXG4gICAgICAgICB2YXIgU2NoZW1hID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIC8vIGFsbG93IGluaGVyaXRlZCBjbGFzc2VzIHRvIGhhdmUgYSBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgIGZ1bmN0aW9uIFNjaGVtYSgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAvLyBmaXggZW51bWVyYWJpbGl0eSBvZiBmaWVsZHMgZm9yIGVuZC11c2VyXG4gICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICRjaGFuZ2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBDaGFuZ2VUcmVlKHRoaXMsIHVuZGVmaW5lZCwgbmV3IFJlZmVyZW5jZVRyYWNrZXIoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAvLyAkbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAvLyAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgIC8vICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgIC8vICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgICRjYWxsYmFja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3JzID0gdGhpcy5fZGVmaW5pdGlvbi5kZXNjcmlwdG9ycztcbiAgICAgICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCBkZXNjcmlwdG9ycyk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgLy8gQXNzaWduIGluaXRpYWwgdmFsdWVzXG4gICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgIGlmIChhcmdzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2lnbihhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBTY2hlbWEub25FcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTY2hlbWEuaXMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gKHR5cGVbJ19kZWZpbml0aW9uJ10gJiZcbiAgICAgICAgICAgICAgICAgICAgIHR5cGVbJ19kZWZpbml0aW9uJ10uc2NoZW1hICE9PSB1bmRlZmluZWQpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS5vbkNoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICByZXR1cm4gYWRkQ2FsbGJhY2soKHRoaXMuJGNhbGxiYWNrcyB8fCAodGhpcy4kY2FsbGJhY2tzID0gW10pKSwgZXhwb3J0cy5PUEVSQVRJT04uUkVQTEFDRSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICByZXR1cm4gYWRkQ2FsbGJhY2soKHRoaXMuJGNhbGxiYWNrcyB8fCAodGhpcy4kY2FsbGJhY2tzID0gW10pKSwgZXhwb3J0cy5PUEVSQVRJT04uREVMRVRFLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTY2hlbWEucHJvdG90eXBlLmFzc2lnbiA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BzKTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2NoZW1hLnByb3RvdHlwZSwgXCJfZGVmaW5pdGlvblwiLCB7XG4gICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5fZGVmaW5pdGlvbjsgfSxcbiAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIChTZXJ2ZXItc2lkZSk6IEZsYWcgYSBwcm9wZXJ0eSB0byBiZSBlbmNvZGVkIGZvciB0aGUgbmV4dCBwYXRjaC5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gaW5zdGFuY2UgU2NoZW1hIGluc3RhbmNlXG4gICAgICAgICAgICAgICogQHBhcmFtIHByb3BlcnR5IHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHByb3BlcnR5IG5hbWUsIG9yIG51bWJlciByZXByZXNlbnRpbmcgdGhlIGluZGV4IG9mIHRoZSBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgKiBAcGFyYW0gb3BlcmF0aW9uIE9QRVJBVElPTiB0byBwZXJmb3JtIChkZXRlY3RlZCBhdXRvbWF0aWNhbGx5KVxuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgIFNjaGVtYS5wcm90b3R5cGUuc2V0RGlydHkgPSBmdW5jdGlvbiAocHJvcGVydHksIG9wZXJhdGlvbikge1xuICAgICAgICAgICAgICAgICB0aGlzLiRjaGFuZ2VzLmNoYW5nZShwcm9wZXJ0eSwgb3BlcmF0aW9uKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAqIENsaWVudC1zaWRlOiBsaXN0ZW4gZm9yIGNoYW5nZXMgb24gcHJvcGVydHkuXG4gICAgICAgICAgICAgICogQHBhcmFtIHByb3AgdGhlIHByb3BlcnR5IG5hbWVcbiAgICAgICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIG9uIHByb3BlcnR5IGNoYW5nZVxuICAgICAgICAgICAgICAqIEBwYXJhbSBpbW1lZGlhdGUgdHJpZ2dlciBpbW1lZGlhdGVsbHkgaWYgcHJvcGVydHkgaGFzIGJlZW4gYWxyZWFkeSBzZXQuXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAocHJvcCwgY2FsbGJhY2ssIGltbWVkaWF0ZSkge1xuICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICBpZiAoaW1tZWRpYXRlID09PSB2b2lkIDApIHsgaW1tZWRpYXRlID0gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuJGNhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FsbGJhY2tzID0ge307XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLiRjYWxsYmFja3NbcHJvcF0pIHtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhbGxiYWNrc1twcm9wXSA9IFtdO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNhbGxiYWNrc1twcm9wXS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgaWYgKGltbWVkaWF0ZSAmJiB0aGlzW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXNbcHJvcF0sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHVuLXJlZ2lzdGVyIGNhbGxiYWNrLlxuICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3BsaWNlT25lKF90aGlzLiRjYWxsYmFja3NbcHJvcF0sIF90aGlzLiRjYWxsYmFja3NbcHJvcF0uaW5kZXhPZihjYWxsYmFjaykpOyB9O1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAoYnl0ZXMsIGl0LCByZWYpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICBpZiAoaXQgPT09IHZvaWQgMCkgeyBpdCA9IHsgb2Zmc2V0OiAwIH07IH1cbiAgICAgICAgICAgICAgICAgaWYgKHJlZiA9PT0gdm9pZCAwKSB7IHJlZiA9IHRoaXM7IH1cbiAgICAgICAgICAgICAgICAgdmFyIGFsbENoYW5nZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgdmFyICRyb290ID0gdGhpcy4kY2hhbmdlcy5yb290O1xuICAgICAgICAgICAgICAgICB2YXIgdG90YWxCeXRlcyA9IGJ5dGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgdmFyIHJlZklkID0gMDtcbiAgICAgICAgICAgICAgICAgJHJvb3QucmVmcy5zZXQocmVmSWQsIHRoaXMpO1xuICAgICAgICAgICAgICAgICB3aGlsZSAoaXQub2Zmc2V0IDwgdG90YWxCeXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGJ5dGUgPSBieXRlc1tpdC5vZmZzZXQrK107XG4gICAgICAgICAgICAgICAgICAgICBpZiAoYnl0ZSA9PSBTV0lUQ0hfVE9fU1RSVUNUVVJFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgcmVmSWQgPSBudW1iZXIoYnl0ZXMsIGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFJlZiA9ICRyb290LnJlZnMuZ2V0KHJlZklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyeWluZyB0byBhY2Nlc3MgYSByZWZlcmVuY2UgdGhhdCBoYXZlbid0IGJlZW4gZGVjb2RlZCB5ZXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXFxcInJlZklkXFxcIiBub3QgZm91bmQ6IFwiLmNvbmNhdChyZWZJZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBuZXh0UmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZVRyZWUgPSByZWZbJyRjaGFuZ2VzJ107XG4gICAgICAgICAgICAgICAgICAgICB2YXIgaXNTY2hlbWEgPSAocmVmWydfZGVmaW5pdGlvbiddICE9PSB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IChpc1NjaGVtYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICA/IChieXRlID4+IDYpIDw8IDYgLy8gXCJjb21wcmVzc2VkXCIgaW5kZXggKyBvcGVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICA6IGJ5dGU7IC8vIFwidW5jb21wcmVzc2VkXCIgaW5kZXggKyBvcGVyYXRpb24gKGFycmF5L21hcCBpdGVtcylcbiAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVyYXRpb24gPT09IGV4cG9ydHMuT1BFUkFUSU9OLkNMRUFSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiByZWZhY3RvciBtZSFcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgYC5jbGVhcigpYCBtZXRob2QgaXMgY2FsbGluZyBgJHJvb3QucmVtb3ZlUmVmKHJlZklkKWAgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWFjaCBpdGVtIGluc2lkZSB0aGlzIGNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgIHJlZi5jbGVhcihhbGxDaGFuZ2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZEluZGV4ID0gKGlzU2NoZW1hKVxuICAgICAgICAgICAgICAgICAgICAgICAgID8gYnl0ZSAlIChvcGVyYXRpb24gfHwgMjU1KSAvLyBpZiBcIlJFUExBQ0VcIiBvcGVyYXRpb24gKDApLCB1c2UgMjU1XG4gICAgICAgICAgICAgICAgICAgICAgICAgOiBudW1iZXIoYnl0ZXMsIGl0KTtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSAoaXNTY2hlbWEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgPyAocmVmWydfZGVmaW5pdGlvbiddLmZpZWxkc0J5SW5kZXhbZmllbGRJbmRleF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBjaGFuZ2VUcmVlLmdldFR5cGUoZmllbGRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBkeW5hbWljSW5kZXggPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IHJlZlsnZ2V0QnlJbmRleCddKGZpZWxkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgob3BlcmF0aW9uICYgZXhwb3J0cy5PUEVSQVRJT04uQUREKSA9PT0gZXhwb3J0cy5PUEVSQVRJT04uQUREKSB7IC8vIEFERCBvciBERUxFVEVfQU5EX0FERFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljSW5kZXggPSAocmVmIGluc3RhbmNlb2YgTWFwU2NoZW1hKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzdHJpbmcoYnl0ZXMsIGl0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmaWVsZEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZbJ3NldEluZGV4J10oZmllbGRJbmRleCwgZHluYW1pY0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY0luZGV4ID0gcmVmWydnZXRJbmRleCddKGZpZWxkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSByZWZbXCJfXCIuY29uY2F0KGZpZWxkTmFtZSldO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBvcGVyYXRpb25zXG4gICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgaWYgKChvcGVyYXRpb24gJiBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEUpID09PSBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlcmF0aW9uICE9PSBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEVfQU5EX0FERCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZbJ2RlbGV0ZUJ5SW5kZXgnXShmaWVsZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmxhZyBgcmVmSWRgIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzVmFsdWUgJiYgcHJldmlvdXNWYWx1ZVsnJGNoYW5nZXMnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdC5yZW1vdmVSZWYocHJldmlvdXNWYWx1ZVsnJGNoYW5nZXMnXS5yZWZJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZE5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkBjb2x5c2V1cy9zY2hlbWE6IGRlZmluaXRpb24gbWlzbWF0Y2hcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIHNraXBwaW5nIG5leHQgYnl0ZXMgdW50aWwgcmVhY2hlcyBhIGtub3duIHN0cnVjdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5IGxvY2FsIGRlY29kZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dEl0ZXJhdG9yID0geyBvZmZzZXQ6IGl0Lm9mZnNldCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpdC5vZmZzZXQgPCB0b3RhbEJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzd2l0Y2hTdHJ1Y3R1cmVDaGVjayhieXRlcywgaXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SXRlcmF0b3Iub2Zmc2V0ID0gaXQub2Zmc2V0ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcm9vdC5yZWZzLmhhcyhudW1iZXIoYnl0ZXMsIG5leHRJdGVyYXRvcikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQub2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob3BlcmF0aW9uID09PSBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEUpIDtcbiAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKFNjaGVtYS5pcyh0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZJZF8xID0gbnVtYmVyKGJ5dGVzLCBpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAkcm9vdC5yZWZzLmdldChyZWZJZF8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlcmF0aW9uICE9PSBleHBvcnRzLk9QRVJBVElPTi5SRVBMQUNFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZFR5cGUgPSB0aGlzLmdldFNjaGVtYVR5cGUoYnl0ZXMsIGl0LCB0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmNyZWF0ZVR5cGVJbnN0YW5jZShjaGlsZFR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuJGNoYW5nZXMucmVmSWQgPSByZWZJZF8xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS4kY2FsbGJhY2tzID0gcHJldmlvdXNWYWx1ZS4kY2FsbGJhY2tzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlLiRsaXN0ZW5lcnMgPSBwcmV2aW91c1ZhbHVlLiRsaXN0ZW5lcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzVmFsdWVbJyRjaGFuZ2VzJ10ucmVmSWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmSWRfMSAhPT0gcHJldmlvdXNWYWx1ZVsnJGNoYW5nZXMnXS5yZWZJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdC5yZW1vdmVSZWYocHJldmlvdXNWYWx1ZVsnJGNoYW5nZXMnXS5yZWZJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290LmFkZFJlZihyZWZJZF8xLCB2YWx1ZSwgKHZhbHVlICE9PSBwcmV2aW91c1ZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mICh0eXBlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJpbWl0aXZlIHZhbHVlIChudW1iZXIsIHN0cmluZywgYm9vbGVhbiwgZXRjKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBkZWNvZGVQcmltaXRpdmVUeXBlKHR5cGUsIGJ5dGVzLCBpdCk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZURlZiA9IGdldFR5cGUoT2JqZWN0LmtleXModHlwZSlbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZJZF8yID0gbnVtYmVyKGJ5dGVzLCBpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUmVmID0gKCRyb290LnJlZnMuaGFzKHJlZklkXzIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHByZXZpb3VzVmFsdWUgfHwgJHJvb3QucmVmcy5nZXQocmVmSWRfMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgdHlwZURlZi5jb25zdHJ1Y3RvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVSZWYuY2xvbmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuJGNoYW5nZXMucmVmSWQgPSByZWZJZF8yO1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXNlcnZlIHNjaGVtYSBjYWxsYmFja3NcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVsnJGNhbGxiYWNrcyddID0gcHJldmlvdXNWYWx1ZVsnJGNhbGxiYWNrcyddO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNWYWx1ZVsnJGNoYW5nZXMnXS5yZWZJZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmSWRfMiAhPT0gcHJldmlvdXNWYWx1ZVsnJGNoYW5nZXMnXS5yZWZJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3QucmVtb3ZlUmVmKHByZXZpb3VzVmFsdWVbJyRjaGFuZ2VzJ10ucmVmSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgb25SZW1vdmUgaWYgc3RydWN0dXJlIGhhcyBiZWVuIHJlcGxhY2VkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbnRyaWVzID0gcHJldmlvdXNWYWx1ZS5lbnRyaWVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlciA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgoaXRlciA9IGVudHJpZXMubmV4dCgpKSAmJiAhaXRlci5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IChfYSA9IGl0ZXIudmFsdWUsIF9hWzBdKSwgdmFsdWVfMSA9IF9hWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbENoYW5nZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZklkOiByZWZJZF8yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogZXhwb3J0cy5PUEVSQVRJT04uREVMRVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDoga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlOiB2YWx1ZV8xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICRyb290LmFkZFJlZihyZWZJZF8yLCB2YWx1ZSwgKHZhbHVlUmVmICE9PSBwcmV2aW91c1ZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWyckY2hhbmdlcyddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlWyckY2hhbmdlcyddLnNldFBhcmVudChjaGFuZ2VUcmVlLnJlZiwgY2hhbmdlVHJlZS5yb290LCBmaWVsZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZiBpbnN0YW5jZW9mIFNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZbZmllbGROYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWZbYF8ke2ZpZWxkTmFtZX1gXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWYgaW5zdGFuY2VvZiBNYXBTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3Qga2V5ID0gcmVmWyckaW5kZXhlcyddLmdldChmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBkeW5hbWljSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZi5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZlsnJGl0ZW1zJ10uc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZbJyRjaGFuZ2VzJ10uYWxsQ2hhbmdlcy5hZGQoZmllbGRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlZiBpbnN0YW5jZW9mIEFycmF5U2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGtleSA9IHJlZlsnJGluZGV4ZXMnXVtmaWVsZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU0VUVElORyBGT1IgQXJyYXlTY2hlbWEgPT5cIiwgeyBmaWVsZCwga2V5LCB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVmW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmLnNldEF0KGZpZWxkSW5kZXgsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVmIGluc3RhbmNlb2YgQ29sbGVjdGlvblNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSByZWYuYWRkKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmWydzZXRJbmRleCddKGZpZWxkSW5kZXgsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVmIGluc3RhbmNlb2YgU2V0U2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHJlZi5hZGQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZbJ3NldEluZGV4J10oZmllbGRJbmRleCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmSWQ6IHJlZklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogb3BlcmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljSW5kZXg6IGR5bmFtaWNJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlOiBwcmV2aW91c1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJDaGFuZ2VzKGFsbENoYW5nZXMpO1xuICAgICAgICAgICAgICAgICAvLyBkcm9wIHJlZmVyZW5jZXMgb2YgdW51c2VkIHNjaGVtYXNcbiAgICAgICAgICAgICAgICAgJHJvb3QuZ2FyYmFnZUNvbGxlY3REZWxldGVkUmVmcygpO1xuICAgICAgICAgICAgICAgICByZXR1cm4gYWxsQ2hhbmdlcztcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNjaGVtYS5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKGVuY29kZUFsbCwgYnl0ZXMsIHVzZUZpbHRlcnMpIHtcbiAgICAgICAgICAgICAgICAgaWYgKGVuY29kZUFsbCA9PT0gdm9pZCAwKSB7IGVuY29kZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgICAgICAgICAgIGlmIChieXRlcyA9PT0gdm9pZCAwKSB7IGJ5dGVzID0gW107IH1cbiAgICAgICAgICAgICAgICAgaWYgKHVzZUZpbHRlcnMgPT09IHZvaWQgMCkgeyB1c2VGaWx0ZXJzID0gZmFsc2U7IH1cbiAgICAgICAgICAgICAgICAgdmFyIHJvb3RDaGFuZ2VUcmVlID0gdGhpcy4kY2hhbmdlcztcbiAgICAgICAgICAgICAgICAgdmFyIHJlZklkc1Zpc2l0ZWQgPSBuZXcgV2Vha1NldCgpO1xuICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlVHJlZXMgPSBbcm9vdENoYW5nZVRyZWVdO1xuICAgICAgICAgICAgICAgICB2YXIgbnVtQ2hhbmdlVHJlZXMgPSAxO1xuICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUNoYW5nZVRyZWVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VUcmVlID0gY2hhbmdlVHJlZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gY2hhbmdlVHJlZS5yZWY7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgaXNTY2hlbWEgPSAocmVmIGluc3RhbmNlb2YgU2NoZW1hKTtcbiAgICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIHVuaXF1ZSByZWZJZCBmb3IgdGhlIENoYW5nZVRyZWUuXG4gICAgICAgICAgICAgICAgICAgICBjaGFuZ2VUcmVlLmVuc3VyZVJlZklkKCk7XG4gICAgICAgICAgICAgICAgICAgICAvLyBtYXJrIHRoaXMgQ2hhbmdlVHJlZSBhcyB2aXNpdGVkLlxuICAgICAgICAgICAgICAgICAgICAgcmVmSWRzVmlzaXRlZC5hZGQoY2hhbmdlVHJlZSk7XG4gICAgICAgICAgICAgICAgICAgICAvLyByb290IGByZWZJZGAgaXMgc2tpcHBlZC5cbiAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VUcmVlICE9PSByb290Q2hhbmdlVHJlZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIChjaGFuZ2VUcmVlLmNoYW5nZWQgfHwgZW5jb2RlQWxsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4JDEoYnl0ZXMsIFNXSVRDSF9UT19TVFJVQ1RVUkUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlciQxKGJ5dGVzLCBjaGFuZ2VUcmVlLnJlZklkKTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VzID0gKGVuY29kZUFsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICA/IEFycmF5LmZyb20oY2hhbmdlVHJlZS5hbGxDaGFuZ2VzKVxuICAgICAgICAgICAgICAgICAgICAgICAgIDogQXJyYXkuZnJvbShjaGFuZ2VUcmVlLmNoYW5nZXMudmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGNsID0gY2hhbmdlcy5sZW5ndGg7IGogPCBjbDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IChlbmNvZGVBbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgID8geyBvcDogZXhwb3J0cy5PUEVSQVRJT04uQURELCBpbmRleDogY2hhbmdlc1tqXSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY2hhbmdlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRJbmRleCA9IG9wZXJhdGlvbi5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSAoaXNTY2hlbWEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcmVmWydfZGVmaW5pdGlvbiddLmZpZWxkc0J5SW5kZXggJiYgcmVmWydfZGVmaW5pdGlvbiddLmZpZWxkc0J5SW5kZXhbZmllbGRJbmRleF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmaWVsZEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhY2hlIGJlZ2luIGluZGV4IGlmIGB1c2VGaWx0ZXJzYFxuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZWdpbkluZGV4ID0gYnl0ZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuY29kZSBmaWVsZCBpbmRleCArIG9wZXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVyYXRpb24ub3AgIT09IGV4cG9ydHMuT1BFUkFUSU9OLlRPVUNIKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1NjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbXByZXNzIGBmaWVsZEluZGV4YCArIGBvcGVyYXRpb25gIGludG8gYSBzaW5nbGUgYnl0ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgYWRkcyBhIGxpbWl0YWlvbiBvZiA2NCBmaWVsZHMgcGVyIFNjaGVtYSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50OCQxKGJ5dGVzLCAoZmllbGRJbmRleCB8IG9wZXJhdGlvbi5vcCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDgkMShieXRlcywgb3BlcmF0aW9uLm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGN1c3RvbSBvcGVyYXRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlcmF0aW9uLm9wID09PSBleHBvcnRzLk9QRVJBVElPTi5DTEVBUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5kZXhlZCBvcGVyYXRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIkMShieXRlcywgZmllbGRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmNvZGUgXCJhbGlhc1wiIGZvciBkeW5hbWljIGZpZWxkcyAobWFwcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNTY2hlbWEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9wZXJhdGlvbi5vcCAmIGV4cG9ydHMuT1BFUkFUSU9OLkFERCkgPT0gZXhwb3J0cy5PUEVSQVRJT04uQUREIC8vIEFERCBvciBERUxFVEVfQU5EX0FERFxuICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmIGluc3RhbmNlb2YgTWFwU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFwU2NoZW1hIGR5bmFtaWMga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR5bmFtaWNJbmRleCA9IGNoYW5nZVRyZWUucmVmWyckaW5kZXhlcyddLmdldChmaWVsZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyQxKGJ5dGVzLCBkeW5hbWljSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVyYXRpb24ub3AgPT09IGV4cG9ydHMuT1BFUkFUSU9OLkRFTEVURSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBkZWxldGUgZnJvbSBmaWx0ZXIgY2FjaGUgZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHVzZUZpbHRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGRlbGV0ZSBjaGFuZ2VUcmVlLmNhY2hlc1tmaWVsZEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgdHlwZSA9IGNoYW5nZVRyZWUuY2hpbGRUeXBlIHx8IHJlZi5fc2NoZW1hW2ZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGNoYW5nZVRyZWUuZ2V0VHlwZShmaWVsZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCB0eXBlID0gY2hhbmdlVHJlZS5nZXRUeXBlKGZpZWxkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNoYW5nZVRyZWUuZ2V0VmFsdWUoZmllbGRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5xdWV1ZSBDaGFuZ2VUcmVlIHRvIGJlIHZpc2l0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVbJyRjaGFuZ2VzJ10gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXJlZklkc1Zpc2l0ZWQuaGFzKHZhbHVlWyckY2hhbmdlcyddKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VUcmVlcy5wdXNoKHZhbHVlWyckY2hhbmdlcyddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVbJyRjaGFuZ2VzJ10uZW5zdXJlUmVmSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtQ2hhbmdlVHJlZXMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZXJhdGlvbi5vcCA9PT0gZXhwb3J0cy5PUEVSQVRJT04uVE9VQ0gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTY2hlbWEuaXModHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0SW5zdGFuY2VUeXBlKHZhbHVlLCB0eXBlLCByZWYsIGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5jb2RlIHJlZklkIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgYWN0dWFsIGluc3RhbmNlIGlzIGdvaW5nIHRvIGJlIGVuY29kZWQgb24gbmV4dCBgY2hhbmdlVHJlZWAgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIkMShieXRlcywgdmFsdWUuJGNoYW5nZXMucmVmSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZW5jb2RlIGluaGVyaXRlZCBUWVBFX0lEIGlmIGl0J3MgYW4gQUREIG9wZXJhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChvcGVyYXRpb24ub3AgJiBleHBvcnRzLk9QRVJBVElPTi5BREQpID09PSBleHBvcnRzLk9QRVJBVElPTi5BREQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJ5RW5jb2RlVHlwZUlkKGJ5dGVzLCB0eXBlLCB2YWx1ZS5jb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mICh0eXBlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmltaXRpdmUgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVByaW1pdGl2ZVR5cGUodHlwZSwgYnl0ZXMsIHZhbHVlLCByZWYsIGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEN1c3RvbSB0eXBlIChNYXBTY2hlbWEsIEFycmF5U2NoZW1hLCBldGMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWZpbml0aW9uID0gZ2V0VHlwZShPYmplY3Qua2V5cyh0eXBlKVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSBhIEFycmF5U2NoZW1hIGhhcyBiZWVuIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydEluc3RhbmNlVHlwZShyZWZbXCJfXCIuY29uY2F0KGZpZWxkKV0sIGRlZmluaXRpb24uY29uc3RydWN0b3IsIHJlZiwgZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmNvZGUgcmVmSWQgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBhY3R1YWwgaW5zdGFuY2UgaXMgZ29pbmcgdG8gYmUgZW5jb2RlZCBvbiBuZXh0IGBjaGFuZ2VUcmVlYCBpdGVyYXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlciQxKGJ5dGVzLCB2YWx1ZS4kY2hhbmdlcy5yZWZJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VGaWx0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhY2hlIGJlZ2luIC8gZW5kIGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVRyZWUuY2FjaGUoZmllbGRJbmRleCwgYnl0ZXMuc2xpY2UoYmVnaW5JbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGlmICghZW5jb2RlQWxsICYmICF1c2VGaWx0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlVHJlZS5kaXNjYXJkKCk7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS5lbmNvZGVBbGwgPSBmdW5jdGlvbiAodXNlRmlsdGVycykge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUodHJ1ZSwgW10sIHVzZUZpbHRlcnMpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS5hcHBseUZpbHRlcnMgPSBmdW5jdGlvbiAoY2xpZW50LCBlbmNvZGVBbGwpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICAgaWYgKGVuY29kZUFsbCA9PT0gdm9pZCAwKSB7IGVuY29kZUFsbCA9IGZhbHNlOyB9XG4gICAgICAgICAgICAgICAgIHZhciByb290ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgdmFyIHJlZklkc0Rpc3NhbGxvd2VkID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgICB2YXIgJGZpbHRlclN0YXRlID0gQ2xpZW50U3RhdGUuZ2V0KGNsaWVudCk7XG4gICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VUcmVlcyA9IFt0aGlzLiRjaGFuZ2VzXTtcbiAgICAgICAgICAgICAgICAgdmFyIG51bUNoYW5nZVRyZWVzID0gMTtcbiAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkQnl0ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZVRyZWUgPSBjaGFuZ2VUcmVlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgIGlmIChyZWZJZHNEaXNzYWxsb3dlZC5oYXMoY2hhbmdlVHJlZS5yZWZJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IGNoYW5nZVRyZWUucmVmO1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGlzU2NoZW1hID0gcmVmIGluc3RhbmNlb2YgU2NoZW1hO1xuICAgICAgICAgICAgICAgICAgICAgdWludDgkMShmaWx0ZXJlZEJ5dGVzLCBTV0lUQ0hfVE9fU1RSVUNUVVJFKTtcbiAgICAgICAgICAgICAgICAgICAgIG51bWJlciQxKGZpbHRlcmVkQnl0ZXMsIGNoYW5nZVRyZWUucmVmSWQpO1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGNsaWVudEhhc1JlZklkID0gJGZpbHRlclN0YXRlLnJlZklkcy5oYXMoY2hhbmdlVHJlZSk7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgaXNFbmNvZGVBbGwgPSAoZW5jb2RlQWxsIHx8ICFjbGllbnRIYXNSZWZJZCk7XG4gICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlJFRjpcIiwgcmVmLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJFbmNvZGUgYWxsP1wiLCBpc0VuY29kZUFsbCk7XG4gICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgLy8gaW5jbHVkZSBgY2hhbmdlVHJlZWAgb24gbGlzdCBvZiBrbm93biByZWZJZHMgYnkgdGhpcyBjbGllbnQuXG4gICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgJGZpbHRlclN0YXRlLmFkZFJlZklkKGNoYW5nZVRyZWUpO1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckluZGV4ZXMgPSAkZmlsdGVyU3RhdGUuY29udGFpbmVySW5kZXhlcy5nZXQoY2hhbmdlVHJlZSk7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlcyA9IChpc0VuY29kZUFsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICA/IEFycmF5LmZyb20oY2hhbmdlVHJlZS5hbGxDaGFuZ2VzKVxuICAgICAgICAgICAgICAgICAgICAgICAgIDogQXJyYXkuZnJvbShjaGFuZ2VUcmVlLmNoYW5nZXMudmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgIC8vIFdPUktBUk9VTkQ6IHRyaWVzIHRvIHJlLWV2YWx1YXRlIHByZXZpb3VzbHkgbm90IGluY2x1ZGVkIEBmaWx0ZXIoKSBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgICAgICAvLyAtIHNlZSBcIkRFTEVURSBhIGZpZWxkIG9mIFNjaGVtYVwiIHRlc3QgY2FzZS5cbiAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICBpZiAoIWVuY29kZUFsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2NoZW1hICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgcmVmLl9kZWZpbml0aW9uLmluZGV4ZXNXaXRoRmlsdGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleGVzV2l0aEZpbHRlcnMgPSByZWYuX2RlZmluaXRpb24uaW5kZXhlc1dpdGhGaWx0ZXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZXNXaXRoRmlsdGVycy5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleFdpdGhGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250YWluZXJJbmRleGVzLmhhcyhpbmRleFdpdGhGaWx0ZXIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VUcmVlLmFsbENoYW5nZXMuaGFzKGluZGV4V2l0aEZpbHRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0VuY29kZUFsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaChpbmRleFdpdGhGaWx0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHsgb3A6IGV4cG9ydHMuT1BFUkFUSU9OLkFERCwgaW5kZXg6IGluZGV4V2l0aEZpbHRlciwgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBjbCA9IGNoYW5nZXMubGVuZ3RoOyBqIDwgY2w7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2UgPSAoaXNFbmNvZGVBbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgID8geyBvcDogZXhwb3J0cy5PUEVSQVRJT04uQURELCBpbmRleDogY2hhbmdlc1tqXSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY2hhbmdlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXN0b20gb3BlcmF0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2Uub3AgPT09IGV4cG9ydHMuT1BFUkFUSU9OLkNMRUFSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4JDEoZmlsdGVyZWRCeXRlcywgY2hhbmdlLm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZEluZGV4ID0gY2hhbmdlLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRpbmcgZmllbGRzOiBlbmNvZGUgdGhlIG9wZXJhdGlvbiArIGZpZWxkIGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLm9wID09PSBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gREVMRVRFIG9wZXJhdGlvbnMgYWxzbyBuZWVkIHRvIGdvIHRocm91Z2ggZmlsdGVyaW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBjYWNoZSB0aGUgcHJldmlvdXMgdmFsdWUgc28gd2UgY2FuIGFjY2VzcyB0aGUgdmFsdWUgKHByaW1pdGl2ZSBvciBgcmVmSWRgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAoY2hlY2sgYWdhaW5zdCBgJGZpbHRlclN0YXRlLnJlZklkc2ApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1NjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDgkMShmaWx0ZXJlZEJ5dGVzLCBjaGFuZ2Uub3AgfCBmaWVsZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4JDEoZmlsdGVyZWRCeXRlcywgY2hhbmdlLm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlciQxKGZpbHRlcmVkQnl0ZXMsIGZpZWxkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmRleGVkIG9wZXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNoYW5nZVRyZWUuZ2V0VmFsdWUoZmllbGRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBjaGFuZ2VUcmVlLmdldFR5cGUoZmllbGRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElzIGEgU2NoZW1hIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gKHJlZi5fZGVmaW5pdGlvbi5maWx0ZXJzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYuX2RlZmluaXRpb24uZmlsdGVyc1tmaWVsZEluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIgJiYgIWZpbHRlci5jYWxsKHJlZiwgY2xpZW50LCB2YWx1ZSwgcm9vdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZVsnJGNoYW5nZXMnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZklkc0Rpc3NhbGxvd2VkLmFkZCh2YWx1ZVsnJGNoYW5nZXMnXS5yZWZJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXMgYSBjb2xsZWN0aW9uISAobWFwLCBhcnJheSwgZXRjLilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGNoYW5nZVRyZWUucGFyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gY2hhbmdlVHJlZS5nZXRDaGlsZHJlbkZpbHRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyICYmICFmaWx0ZXIuY2FsbChwYXJlbnQsIGNsaWVudCwgcmVmWyckaW5kZXhlcyddLmdldChmaWVsZEluZGV4KSwgdmFsdWUsIHJvb3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWVbJyRjaGFuZ2VzJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZJZHNEaXNzYWxsb3dlZC5hZGQodmFsdWVbJyRjaGFuZ2VzJ10ucmVmSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmlzaXQgY2hpbGQgQ2hhbmdlVHJlZSBvbiBmdXJ0aGVyIGl0ZXJhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbJyRjaGFuZ2VzJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlVHJlZXMucHVzaCh2YWx1ZVsnJGNoYW5nZXMnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bUNoYW5nZVRyZWVzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29weSBjYWNoZWQgYnl0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2Uub3AgIT09IGV4cG9ydHMuT1BFUkFUSU9OLlRPVUNIKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHJlZmFjdG9yIG1lIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLm9wID09PSBleHBvcnRzLk9QRVJBVElPTi5BREQgfHwgaXNTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2UgY2FjaGVkIGJ5dGVzIGRpcmVjdGx5IGlmIGlzIGZyb20gU2NoZW1hIHR5cGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRCeXRlcy5wdXNoLmFwcGx5KGZpbHRlcmVkQnl0ZXMsIChfYSA9IGNoYW5nZVRyZWUuY2FjaGVzW2ZpZWxkSW5kZXhdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJJbmRleGVzLmFkZChmaWVsZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJJbmRleGVzLmhhcyhmaWVsZEluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIGNhY2hlZCBieXRlcyBpZiBhbHJlYWR5IGhhcyB0aGUgZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkQnl0ZXMucHVzaC5hcHBseShmaWx0ZXJlZEJ5dGVzLCAoX2IgPSBjaGFuZ2VUcmVlLmNhY2hlc1tmaWVsZEluZGV4XSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JjZSBBREQgb3BlcmF0aW9uIGlmIGZpZWxkIGlzIG5vdCBrbm93biBieSB0aGlzIGNsaWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckluZGV4ZXMuYWRkKGZpZWxkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4JDEoZmlsdGVyZWRCeXRlcywgZXhwb3J0cy5PUEVSQVRJT04uQUREKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIkMShmaWx0ZXJlZEJ5dGVzLCBmaWVsZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmIGluc3RhbmNlb2YgTWFwU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcFNjaGVtYSBkeW5hbWljIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHluYW1pY0luZGV4ID0gY2hhbmdlVHJlZS5yZWZbJyRpbmRleGVzJ10uZ2V0KGZpZWxkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmckMShmaWx0ZXJlZEJ5dGVzLCBkeW5hbWljSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbJyRjaGFuZ2VzJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyJDEoZmlsdGVyZWRCeXRlcywgdmFsdWVbJyRjaGFuZ2VzJ10ucmVmSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXCJlbmNvZGVQcmltaXRpdmVUeXBlXCIgd2l0aG91dCB0eXBlIGNoZWNraW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgdHlwZSBjaGVja2luZyBoYXMgYmVlbiBkb25lIG9uIHRoZSBmaXJzdCAuZW5jb2RlKCkgY2FsbC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlW3R5cGVdKGZpbHRlcmVkQnl0ZXMsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWVbJyRjaGFuZ2VzJ10gJiYgIWlzU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0gdHJhY2sgQUREL1JFUExBQ0UvREVMRVRFIGluc3RhbmNlcyBvbiBgJGZpbHRlclN0YXRlYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIGRvIE5PVCBhbHdheXMgZW5jb2RlIGR5bmFtaWNJbmRleCBmb3IgTWFwU2NoZW1hLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIChJZiBjbGllbnQgYWxyZWFkeSBoYXMgdGhhdCBrZXksIG9ubHkgdGhlIGZpcnN0IGluZGV4IGlzIG5lY2Vzc2FyeS4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4JDEoZmlsdGVyZWRCeXRlcywgZXhwb3J0cy5PUEVSQVRJT04uQUREKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyJDEoZmlsdGVyZWRCeXRlcywgZmllbGRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWYgaW5zdGFuY2VvZiBNYXBTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXBTY2hlbWEgZHluYW1pYyBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHluYW1pY0luZGV4ID0gY2hhbmdlVHJlZS5yZWZbJyRpbmRleGVzJ10uZ2V0KGZpZWxkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nJDEoZmlsdGVyZWRCeXRlcywgZHluYW1pY0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIkMShmaWx0ZXJlZEJ5dGVzLCB2YWx1ZVsnJGNoYW5nZXMnXS5yZWZJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUNoYW5nZVRyZWVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkQnl0ZXM7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTY2hlbWEucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgIHZhciBjbG9uZWQgPSBuZXcgKHRoaXMuY29uc3RydWN0b3IpO1xuICAgICAgICAgICAgICAgICB2YXIgc2NoZW1hID0gdGhpcy5fZGVmaW5pdGlvbi5zY2hlbWE7XG4gICAgICAgICAgICAgICAgIGZvciAodmFyIGZpZWxkIGluIHNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodGhpc1tmaWVsZF0pID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mICgoX2EgPSB0aGlzW2ZpZWxkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsb25lKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVlcCBjbG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZFtmaWVsZF0gPSB0aGlzW2ZpZWxkXS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJpbWl0aXZlIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZFtmaWVsZF0gPSB0aGlzW2ZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHZhciBzY2hlbWEgPSB0aGlzLl9kZWZpbml0aW9uLnNjaGVtYTtcbiAgICAgICAgICAgICAgICAgdmFyIGRlcHJlY2F0ZWQgPSB0aGlzLl9kZWZpbml0aW9uLmRlcHJlY2F0ZWQ7XG4gICAgICAgICAgICAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgZmllbGQgaW4gc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICBpZiAoIWRlcHJlY2F0ZWRbZmllbGRdICYmIHRoaXNbZmllbGRdICE9PSBudWxsICYmIHR5cGVvZiAodGhpc1tmaWVsZF0pICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2ZpZWxkXSA9ICh0eXBlb2YgKHRoaXNbZmllbGRdWyd0b0pTT04nXSkgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzW2ZpZWxkXVsndG9KU09OJ10oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXNbXCJfXCIuY29uY2F0KGZpZWxkKV07XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNjaGVtYS5wcm90b3R5cGUuZGlzY2FyZEFsbENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHRoaXMuJGNoYW5nZXMuZGlzY2FyZEFsbCgpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS5nZXRCeUluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3RoaXMuX2RlZmluaXRpb24uZmllbGRzQnlJbmRleFtpbmRleF1dO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS5kZWxldGVCeUluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgIHRoaXNbdGhpcy5fZGVmaW5pdGlvbi5maWVsZHNCeUluZGV4W2luZGV4XV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTY2hlbWEucHJvdG90eXBlLnRyeUVuY29kZVR5cGVJZCA9IGZ1bmN0aW9uIChieXRlcywgdHlwZSwgdGFyZ2V0VHlwZSkge1xuICAgICAgICAgICAgICAgICBpZiAodHlwZS5fdHlwZWlkICE9PSB0YXJnZXRUeXBlLl90eXBlaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIHVpbnQ4JDEoYnl0ZXMsIFRZUEVfSUQpO1xuICAgICAgICAgICAgICAgICAgICAgbnVtYmVyJDEoYnl0ZXMsIHRhcmdldFR5cGUuX3R5cGVpZCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNjaGVtYS5wcm90b3R5cGUuZ2V0U2NoZW1hVHlwZSA9IGZ1bmN0aW9uIChieXRlcywgaXQsIGRlZmF1bHRUeXBlKSB7XG4gICAgICAgICAgICAgICAgIHZhciB0eXBlO1xuICAgICAgICAgICAgICAgICBpZiAoYnl0ZXNbaXQub2Zmc2V0XSA9PT0gVFlQRV9JRCkge1xuICAgICAgICAgICAgICAgICAgICAgaXQub2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgICB0eXBlID0gdGhpcy5jb25zdHJ1Y3Rvci5fY29udGV4dC5nZXQobnVtYmVyKGJ5dGVzLCBpdCkpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHJldHVybiB0eXBlIHx8IGRlZmF1bHRUeXBlO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgU2NoZW1hLnByb3RvdHlwZS5jcmVhdGVUeXBlSW5zdGFuY2UgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgdHlwZSgpO1xuICAgICAgICAgICAgICAgICAvLyBhc3NpZ24gcm9vdCBvbiAkY2hhbmdlc1xuICAgICAgICAgICAgICAgICBpbnN0YW5jZS4kY2hhbmdlcy5yb290ID0gdGhpcy4kY2hhbmdlcy5yb290O1xuICAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBTY2hlbWEucHJvdG90eXBlLl90cmlnZ2VyQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qO1xuICAgICAgICAgICAgICAgICB2YXIgdW5pcXVlUmVmSWRzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgICB2YXIgJHJlZnMgPSB0aGlzLiRjaGFuZ2VzLnJvb3QucmVmcztcbiAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzIgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGNoYW5nZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICB2YXIgcmVmSWQgPSBjaGFuZ2UucmVmSWQ7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gJHJlZnMuZ2V0KHJlZklkKTtcbiAgICAgICAgICAgICAgICAgICAgIHZhciAkY2FsbGJhY2tzID0gcmVmWyckY2FsbGJhY2tzJ107XG4gICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBvblJlbW92ZSBvbiBjaGlsZCBzdHJ1Y3R1cmUuXG4gICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgaWYgKChjaGFuZ2Uub3AgJiBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEUpID09PSBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UucHJldmlvdXNWYWx1ZSBpbnN0YW5jZW9mIFNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIChfYiA9IChfYSA9IGNoYW5nZS5wcmV2aW91c1ZhbHVlWyckY2FsbGJhY2tzJ10pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtleHBvcnRzLk9QRVJBVElPTi5ERUxFVEVdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIGNhbGxiYWNrKCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgLy8gbm8gY2FsbGJhY2tzIGRlZmluZWQsIHNraXAgdGhpcyBzdHJ1Y3R1cmUhXG4gICAgICAgICAgICAgICAgICAgICBpZiAoISRjYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZiBpbnN0YW5jZW9mIFNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdW5pcXVlUmVmSWRzLmhhcyhyZWZJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgb25DaGFuZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYyA9ICRjYWxsYmFja3MgPT09IG51bGwgfHwgJGNhbGxiYWNrcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogJGNhbGxiYWNrc1tleHBvcnRzLk9QRVJBVElPTi5SRVBMQUNFXSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoYW5nZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNjaGVtYS5vbkVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkY2FsbGJhY2tzLmhhc093blByb3BlcnR5KGNoYW5nZS5maWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfZCA9ICRjYWxsYmFja3NbY2hhbmdlLmZpZWxkXSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoYW5nZS52YWx1ZSwgY2hhbmdlLnByZXZpb3VzVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2NoZW1hLm9uRXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXMgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zXG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZS5vcCA9PT0gZXhwb3J0cy5PUEVSQVRJT04uQUREICYmIGNoYW5nZS5wcmV2aW91c1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2VyIG9uQWRkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfZSA9ICRjYWxsYmFja3NbZXhwb3J0cy5PUEVSQVRJT04uQUREXSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHZhciBfYTsgcmV0dXJuIGNhbGxiYWNrKGNoYW5nZS52YWx1ZSwgKF9hID0gY2hhbmdlLmR5bmFtaWNJbmRleCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY2hhbmdlLmZpZWxkKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoYW5nZS5vcCA9PT0gZXhwb3J0cy5PUEVSQVRJT04uREVMRVRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBgcHJldmlvdXNWYWx1ZWAgc2hvdWxkIGFsd2F5cyBiZSBhdmFpbGFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFERCArIERFTEVURSBvcGVyYXRpb25zIGFyZSBzdGlsbCBlbmNvZGluZyBERUxFVEUgb3BlcmF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLnByZXZpb3VzVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2VyIG9uUmVtb3ZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2YgPSAkY2FsbGJhY2tzW2V4cG9ydHMuT1BFUkFUSU9OLkRFTEVURV0pID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykgeyB2YXIgX2E7IHJldHVybiBjYWxsYmFjayhjaGFuZ2UucHJldmlvdXNWYWx1ZSwgKF9hID0gY2hhbmdlLmR5bmFtaWNJbmRleCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY2hhbmdlLmZpZWxkKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhbmdlLm9wID09PSBleHBvcnRzLk9QRVJBVElPTi5ERUxFVEVfQU5EX0FERCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZXIgb25SZW1vdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZS5wcmV2aW91c1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfZyA9ICRjYWxsYmFja3NbZXhwb3J0cy5PUEVSQVRJT04uREVMRVRFXSkgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHZhciBfYTsgcmV0dXJuIGNhbGxiYWNrKGNoYW5nZS5wcmV2aW91c1ZhbHVlLCAoX2EgPSBjaGFuZ2UuZHluYW1pY0luZGV4KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjaGFuZ2UuZmllbGQpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZXIgb25BZGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9oID0gJGNhbGxiYWNrc1tleHBvcnRzLk9QRVJBVElPTi5BRERdKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2guZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHsgdmFyIF9hOyByZXR1cm4gY2FsbGJhY2soY2hhbmdlLnZhbHVlLCAoX2EgPSBjaGFuZ2UuZHluYW1pY0luZGV4KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjaGFuZ2UuZmllbGQpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBvbkNoYW5nZVxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2UudmFsdWUgIT09IGNoYW5nZS5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfaiA9ICRjYWxsYmFja3NbZXhwb3J0cy5PUEVSQVRJT04uUkVQTEFDRV0pID09PSBudWxsIHx8IF9qID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfai5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykgeyB2YXIgX2E7IHJldHVybiBjYWxsYmFjayhjaGFuZ2UudmFsdWUsIChfYSA9IGNoYW5nZS5keW5hbWljSW5kZXgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGNoYW5nZS5maWVsZCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZVJlZklkcy5hZGQocmVmSWQpO1xuICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgIF9sb29wXzIoaSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIFNjaGVtYS5fZGVmaW5pdGlvbiA9IFNjaGVtYURlZmluaXRpb24uY3JlYXRlKCk7XG4gICAgICAgICAgICAgcmV0dXJuIFNjaGVtYTtcbiAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgIGZ1bmN0aW9uIGR1bXBDaGFuZ2VzKHNjaGVtYSkge1xuICAgICAgICAgICAgIHZhciBjaGFuZ2VUcmVlcyA9IFtzY2hlbWFbJyRjaGFuZ2VzJ11dO1xuICAgICAgICAgICAgIHZhciBudW1DaGFuZ2VUcmVlcyA9IDE7XG4gICAgICAgICAgICAgdmFyIGR1bXAgPSB7fTtcbiAgICAgICAgICAgICB2YXIgY3VycmVudFN0cnVjdHVyZSA9IGR1bXA7XG4gICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlVHJlZSA9IGNoYW5nZVRyZWVzW2ldO1xuICAgICAgICAgICAgICAgICBjaGFuZ2VUcmVlLmNoYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gY2hhbmdlVHJlZS5yZWY7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRJbmRleCA9IGNoYW5nZS5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZCA9IChyZWZbJ19kZWZpbml0aW9uJ10pXG4gICAgICAgICAgICAgICAgICAgICAgICAgPyByZWZbJ19kZWZpbml0aW9uJ10uZmllbGRzQnlJbmRleFtmaWVsZEluZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgIDogcmVmWyckaW5kZXhlcyddLmdldChmaWVsZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdHJ1Y3R1cmVbZmllbGRdID0gY2hhbmdlVHJlZS5nZXRWYWx1ZShmaWVsZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUNoYW5nZVRyZWVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgcmV0dXJuIGR1bXA7XG4gICAgICAgICB9XG5cbiAgICAgICAgIHZhciByZWZsZWN0aW9uQ29udGV4dCA9IHsgY29udGV4dDogbmV3IENvbnRleHQoKSB9O1xuICAgICAgICAgLyoqXG4gICAgICAgICAgKiBSZWZsZWN0aW9uXG4gICAgICAgICAgKi9cbiAgICAgICAgIHZhciBSZWZsZWN0aW9uRmllbGQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgX19leHRlbmRzKFJlZmxlY3Rpb25GaWVsZCwgX3N1cGVyKTtcbiAgICAgICAgICAgICBmdW5jdGlvbiBSZWZsZWN0aW9uRmllbGQoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgX19kZWNvcmF0ZShbXG4gICAgICAgICAgICAgICAgIHR5cGUoXCJzdHJpbmdcIiwgcmVmbGVjdGlvbkNvbnRleHQpXG4gICAgICAgICAgICAgXSwgUmVmbGVjdGlvbkZpZWxkLnByb3RvdHlwZSwgXCJuYW1lXCIsIHZvaWQgMCk7XG4gICAgICAgICAgICAgX19kZWNvcmF0ZShbXG4gICAgICAgICAgICAgICAgIHR5cGUoXCJzdHJpbmdcIiwgcmVmbGVjdGlvbkNvbnRleHQpXG4gICAgICAgICAgICAgXSwgUmVmbGVjdGlvbkZpZWxkLnByb3RvdHlwZSwgXCJ0eXBlXCIsIHZvaWQgMCk7XG4gICAgICAgICAgICAgX19kZWNvcmF0ZShbXG4gICAgICAgICAgICAgICAgIHR5cGUoXCJudW1iZXJcIiwgcmVmbGVjdGlvbkNvbnRleHQpXG4gICAgICAgICAgICAgXSwgUmVmbGVjdGlvbkZpZWxkLnByb3RvdHlwZSwgXCJyZWZlcmVuY2VkVHlwZVwiLCB2b2lkIDApO1xuICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0aW9uRmllbGQ7XG4gICAgICAgICB9KFNjaGVtYSkpO1xuICAgICAgICAgdmFyIFJlZmxlY3Rpb25UeXBlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgIF9fZXh0ZW5kcyhSZWZsZWN0aW9uVHlwZSwgX3N1cGVyKTtcbiAgICAgICAgICAgICBmdW5jdGlvbiBSZWZsZWN0aW9uVHlwZSgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICAgICAgIF90aGlzLmZpZWxkcyA9IG5ldyBBcnJheVNjaGVtYSgpO1xuICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICAgICAgICAgICB0eXBlKFwibnVtYmVyXCIsIHJlZmxlY3Rpb25Db250ZXh0KVxuICAgICAgICAgICAgIF0sIFJlZmxlY3Rpb25UeXBlLnByb3RvdHlwZSwgXCJpZFwiLCB2b2lkIDApO1xuICAgICAgICAgICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICAgICAgICAgICB0eXBlKFtSZWZsZWN0aW9uRmllbGRdLCByZWZsZWN0aW9uQ29udGV4dClcbiAgICAgICAgICAgICBdLCBSZWZsZWN0aW9uVHlwZS5wcm90b3R5cGUsIFwiZmllbGRzXCIsIHZvaWQgMCk7XG4gICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3Rpb25UeXBlO1xuICAgICAgICAgfShTY2hlbWEpKTtcbiAgICAgICAgIHZhciBSZWZsZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgIF9fZXh0ZW5kcyhSZWZsZWN0aW9uLCBfc3VwZXIpO1xuICAgICAgICAgICAgIGZ1bmN0aW9uIFJlZmxlY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgICAgICBfdGhpcy50eXBlcyA9IG5ldyBBcnJheVNjaGVtYSgpO1xuICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIFJlZmxlY3Rpb24uZW5jb2RlID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgIHZhciByb290U2NoZW1hVHlwZSA9IGluc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgICAgICB2YXIgcmVmbGVjdGlvbiA9IG5ldyBSZWZsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgIHJlZmxlY3Rpb24ucm9vdFR5cGUgPSByb290U2NoZW1hVHlwZS5fdHlwZWlkO1xuICAgICAgICAgICAgICAgICB2YXIgYnVpbGRUeXBlID0gZnVuY3Rpb24gKGN1cnJlbnRUeXBlLCBzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGZpZWxkTmFtZSBpbiBzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSBuZXcgUmVmbGVjdGlvbkZpZWxkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQubmFtZSA9IGZpZWxkTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRUeXBlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHNjaGVtYVtmaWVsZE5hbWVdKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFR5cGUgPSBzY2hlbWFbZmllbGROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlXzEgPSBzY2hlbWFbZmllbGROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkVHlwZVNjaGVtYSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogcmVmYWN0b3IgYmVsb3cuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTY2hlbWEuaXModHlwZV8xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRUeXBlID0gXCJyZWZcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkVHlwZVNjaGVtYSA9IHNjaGVtYVtmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRUeXBlID0gT2JqZWN0LmtleXModHlwZV8xKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHR5cGVfMVtmaWVsZFR5cGVdKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkVHlwZSArPSBcIjpcIiArIHR5cGVfMVtmaWVsZFR5cGVdOyAvLyBhcnJheTpzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkVHlwZVNjaGVtYSA9IHR5cGVfMVtmaWVsZFR5cGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnJlZmVyZW5jZWRUeXBlID0gKGNoaWxkVHlwZVNjaGVtYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2hpbGRUeXBlU2NoZW1hLl90eXBlaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnR5cGUgPSBmaWVsZFR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFR5cGUuZmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGlvbi50eXBlcy5wdXNoKGN1cnJlbnRUeXBlKTtcbiAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgdmFyIHR5cGVzID0gcm9vdFNjaGVtYVR5cGUuX2NvbnRleHQudHlwZXM7XG4gICAgICAgICAgICAgICAgIGZvciAodmFyIHR5cGVpZCBpbiB0eXBlcykge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGVfMiA9IG5ldyBSZWZsZWN0aW9uVHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICAgdHlwZV8yLmlkID0gTnVtYmVyKHR5cGVpZCk7XG4gICAgICAgICAgICAgICAgICAgICBidWlsZFR5cGUodHlwZV8yLCB0eXBlc1t0eXBlaWRdLl9kZWZpbml0aW9uLnNjaGVtYSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZmxlY3Rpb24uZW5jb2RlQWxsKCk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBSZWZsZWN0aW9uLmRlY29kZSA9IGZ1bmN0aW9uIChieXRlcywgaXQpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgICB2YXIgcmVmbGVjdGlvbiA9IG5ldyBSZWZsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgIHJlZmxlY3Rpb24uZGVjb2RlKGJ5dGVzLCBpdCk7XG4gICAgICAgICAgICAgICAgIHZhciBzY2hlbWFUeXBlcyA9IHJlZmxlY3Rpb24udHlwZXMucmVkdWNlKGZ1bmN0aW9uICh0eXBlcywgcmVmbGVjdGlvblR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBzY2hlbWEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgX19leHRlbmRzKF8sIF9zdXBlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gXygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXztcbiAgICAgICAgICAgICAgICAgICAgIH0oU2NoZW1hKSk7XG4gICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZWlkID0gcmVmbGVjdGlvblR5cGUuaWQ7XG4gICAgICAgICAgICAgICAgICAgICB0eXBlc1t0eXBlaWRdID0gc2NoZW1hO1xuICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5hZGQoc2NoZW1hLCB0eXBlaWQpO1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgICAgICAgIHJlZmxlY3Rpb24udHlwZXMuZm9yRWFjaChmdW5jdGlvbiAocmVmbGVjdGlvblR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgIHZhciBzY2hlbWFUeXBlID0gc2NoZW1hVHlwZXNbcmVmbGVjdGlvblR5cGUuaWRdO1xuICAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGlvblR5cGUuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5yZWZlcmVuY2VkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZFR5cGUgPSBmaWVsZC50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmVHlwZSA9IHNjaGVtYVR5cGVzW2ZpZWxkLnJlZmVyZW5jZWRUeXBlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFwIG9yIGFycmF5IG9mIHByaW1pdGl2ZSB0eXBlICgtMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWZUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZUluZm8gPSBmaWVsZC50eXBlLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkVHlwZSA9IHR5cGVJbmZvWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmVHlwZSA9IHR5cGVJbmZvWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZFR5cGUgPT09IFwicmVmXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUocmVmVHlwZSwgeyBjb250ZXh0OiBjb250ZXh0IH0pKHNjaGVtYVR5cGUucHJvdG90eXBlLCBmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUoKF9hID0ge30sIF9hW2ZpZWxkVHlwZV0gPSByZWZUeXBlLCBfYSksIHsgY29udGV4dDogY29udGV4dCB9KShzY2hlbWFUeXBlLnByb3RvdHlwZSwgZmllbGQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUoZmllbGQudHlwZSwgeyBjb250ZXh0OiBjb250ZXh0IH0pKHNjaGVtYVR5cGUucHJvdG90eXBlLCBmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIHZhciByb290VHlwZSA9IHNjaGVtYVR5cGVzW3JlZmxlY3Rpb24ucm9vdFR5cGVdO1xuICAgICAgICAgICAgICAgICB2YXIgcm9vdEluc3RhbmNlID0gbmV3IHJvb3RUeXBlKCk7XG4gICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgKiBhdXRvLWluaXRpYWxpemUgcmVmZXJlbmNlZCB0eXBlcyBvbiByb290IHR5cGVcbiAgICAgICAgICAgICAgICAgICogdG8gYWxsb3cgcmVnaXN0ZXJpbmcgbGlzdGVuZXJzIGltbWVkaWF0ZWxseSBvbiBjbGllbnQtc2lkZVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgZm9yICh2YXIgZmllbGROYW1lIGluIHJvb3RUeXBlLl9kZWZpbml0aW9uLnNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkVHlwZSA9IHJvb3RUeXBlLl9kZWZpbml0aW9uLnNjaGVtYVtmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoZmllbGRUeXBlKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RJbnN0YW5jZVtmaWVsZE5hbWVdID0gKHR5cGVvZiAoZmllbGRUeXBlKSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBmaWVsZFR5cGUoKSAvLyBpcyBhIHNjaGVtYSByZWZlcmVuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgKGdldFR5cGUoT2JqZWN0LmtleXMoZmllbGRUeXBlKVswXSkpLmNvbnN0cnVjdG9yKCk7IC8vIGlzIGEgXCJjb2xsZWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICByZXR1cm4gcm9vdEluc3RhbmNlO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgX19kZWNvcmF0ZShbXG4gICAgICAgICAgICAgICAgIHR5cGUoW1JlZmxlY3Rpb25UeXBlXSwgcmVmbGVjdGlvbkNvbnRleHQpXG4gICAgICAgICAgICAgXSwgUmVmbGVjdGlvbi5wcm90b3R5cGUsIFwidHlwZXNcIiwgdm9pZCAwKTtcbiAgICAgICAgICAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgICAgICAgICAgdHlwZShcIm51bWJlclwiLCByZWZsZWN0aW9uQ29udGV4dClcbiAgICAgICAgICAgICBdLCBSZWZsZWN0aW9uLnByb3RvdHlwZSwgXCJyb290VHlwZVwiLCB2b2lkIDApO1xuICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0aW9uO1xuICAgICAgICAgfShTY2hlbWEpKTtcblxuICAgICAgICAgcmVnaXN0ZXJUeXBlKFwibWFwXCIsIHsgY29uc3RydWN0b3I6IE1hcFNjaGVtYSB9KTtcbiAgICAgICAgIHJlZ2lzdGVyVHlwZShcImFycmF5XCIsIHsgY29uc3RydWN0b3I6IEFycmF5U2NoZW1hIH0pO1xuICAgICAgICAgcmVnaXN0ZXJUeXBlKFwic2V0XCIsIHsgY29uc3RydWN0b3I6IFNldFNjaGVtYSB9KTtcbiAgICAgICAgIHJlZ2lzdGVyVHlwZShcImNvbGxlY3Rpb25cIiwgeyBjb25zdHJ1Y3RvcjogQ29sbGVjdGlvblNjaGVtYSwgfSk7XG5cbiAgICAgICAgIGV4cG9ydHMuQXJyYXlTY2hlbWEgPSBBcnJheVNjaGVtYTtcbiAgICAgICAgIGV4cG9ydHMuQ29sbGVjdGlvblNjaGVtYSA9IENvbGxlY3Rpb25TY2hlbWE7XG4gICAgICAgICBleHBvcnRzLkNvbnRleHQgPSBDb250ZXh0O1xuICAgICAgICAgZXhwb3J0cy5NYXBTY2hlbWEgPSBNYXBTY2hlbWE7XG4gICAgICAgICBleHBvcnRzLlJlZmxlY3Rpb24gPSBSZWZsZWN0aW9uO1xuICAgICAgICAgZXhwb3J0cy5SZWZsZWN0aW9uRmllbGQgPSBSZWZsZWN0aW9uRmllbGQ7XG4gICAgICAgICBleHBvcnRzLlJlZmxlY3Rpb25UeXBlID0gUmVmbGVjdGlvblR5cGU7XG4gICAgICAgICBleHBvcnRzLlNjaGVtYSA9IFNjaGVtYTtcbiAgICAgICAgIGV4cG9ydHMuU2NoZW1hRGVmaW5pdGlvbiA9IFNjaGVtYURlZmluaXRpb247XG4gICAgICAgICBleHBvcnRzLlNldFNjaGVtYSA9IFNldFNjaGVtYTtcbiAgICAgICAgIGV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuICAgICAgICAgZXhwb3J0cy5kZWZpbmVUeXBlcyA9IGRlZmluZVR5cGVzO1xuICAgICAgICAgZXhwb3J0cy5kZXByZWNhdGVkID0gZGVwcmVjYXRlZDtcbiAgICAgICAgIGV4cG9ydHMuZHVtcENoYW5nZXMgPSBkdW1wQ2hhbmdlcztcbiAgICAgICAgIGV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuICAgICAgICAgZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgICBleHBvcnRzLmZpbHRlckNoaWxkcmVuID0gZmlsdGVyQ2hpbGRyZW47XG4gICAgICAgICBleHBvcnRzLmhhc0ZpbHRlciA9IGhhc0ZpbHRlcjtcbiAgICAgICAgIGV4cG9ydHMucmVnaXN0ZXJUeXBlID0gcmVnaXN0ZXJUeXBlO1xuICAgICAgICAgZXhwb3J0cy50eXBlID0gdHlwZTtcblxuICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuICAgICB9KSk7XG4gICAgIH0pO1xuXG4gICAgIHZhciBSb29tID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgZnVuY3Rpb24gUm9vbShuYW1lLCByb290U2NoZW1hKSB7XG4gICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAvLyBQdWJsaWMgc2lnbmFsc1xuICAgICAgICAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IGNyZWF0ZVNpZ25hbCgpO1xuICAgICAgICAgICAgIHRoaXMub25FcnJvciA9IGNyZWF0ZVNpZ25hbCgpO1xuICAgICAgICAgICAgIHRoaXMub25MZWF2ZSA9IGNyZWF0ZVNpZ25hbCgpO1xuICAgICAgICAgICAgIHRoaXMub25Kb2luID0gY3JlYXRlU2lnbmFsKCk7XG4gICAgICAgICAgICAgdGhpcy5oYXNKb2luZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICB0aGlzLm9uTWVzc2FnZUhhbmRsZXJzID0gY3JlYXRlTmFub0V2ZW50cygpO1xuICAgICAgICAgICAgIHRoaXMucm9vbUlkID0gbnVsbDtcbiAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgIGlmIChyb290U2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplciA9IG5ldyAoZ2V0U2VyaWFsaXplcihcInNjaGVtYVwiKSk7XG4gICAgICAgICAgICAgICAgIHRoaXMucm9vdFNjaGVtYSA9IHJvb3RTY2hlbWE7XG4gICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplci5zdGF0ZSA9IG5ldyByb290U2NoZW1hKCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHRoaXMub25FcnJvcihmdW5jdGlvbiAoY29kZSwgbWVzc2FnZSkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBjb25zb2xlLndhcm4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGNvbnNvbGUsIFwiY29seXNldXMuanMgLSBvbkVycm9yID0+IChcIi5jb25jYXQoY29kZSwgXCIpIFwiKS5jb25jYXQobWVzc2FnZSkpOyB9KTtcbiAgICAgICAgICAgICB0aGlzLm9uTGVhdmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7IH0pO1xuICAgICAgICAgfVxuICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJvb20ucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgICAgICAvLyBUT0RPOiBkZXByZWNhdGUgbWUgb24gdmVyc2lvbiAxLjBcbiAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucm9vbUlkOyB9LFxuICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgfSk7XG4gICAgICAgICBSb29tLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGVuZHBvaW50LCBkZXZNb2RlQ2xvc2VDYWxsYmFjaywgcm9vbSAvLyB3aGVuIHJlY29ubmVjdGluZyBvbiBkZXZNb2RlLCByZS11c2UgcHJldmlvdXMgcm9vbSBpbnRhbmNlIGZvciBoYW5kbGluZyBldmVudHMuXG4gICAgICAgICApIHtcbiAgICAgICAgICAgICBpZiAocm9vbSA9PT0gdm9pZCAwKSB7IHJvb20gPSB0aGlzOyB9XG4gICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBuZXcgQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgIHJvb20uY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgICAgICAgY29ubmVjdGlvbi5ldmVudHMub25tZXNzYWdlID0gUm9vbS5wcm90b3R5cGUub25NZXNzYWdlQ2FsbGJhY2suYmluZChyb29tKTtcbiAgICAgICAgICAgICBjb25uZWN0aW9uLmV2ZW50cy5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICBpZiAoIXJvb20uaGFzSm9pbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAoX2EgPSBjb25zb2xlLndhcm4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGNvbnNvbGUsIFwiUm9vbSBjb25uZWN0aW9uIHdhcyBjbG9zZWQgdW5leHBlY3RlZGx5IChcIi5jb25jYXQoZS5jb2RlLCBcIik6IFwiKS5jb25jYXQoZS5yZWFzb24pKTtcbiAgICAgICAgICAgICAgICAgICAgIHJvb20ub25FcnJvci5pbnZva2UoZS5jb2RlLCBlLnJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgaWYgKGUuY29kZSA9PT0gQ2xvc2VDb2RlLkRFVk1PREVfUkVTVEFSVCAmJiBkZXZNb2RlQ2xvc2VDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgZGV2TW9kZUNsb3NlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIHJvb20ub25MZWF2ZS5pbnZva2UoZS5jb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgIHJvb20uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBjb25uZWN0aW9uLmV2ZW50cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAoX2EgPSBjb25zb2xlLndhcm4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGNvbnNvbGUsIFwiUm9vbSwgb25FcnJvciAoXCIuY29uY2F0KGUuY29kZSwgXCIpOiBcIikuY29uY2F0KGUucmVhc29uKSk7XG4gICAgICAgICAgICAgICAgIHJvb20ub25FcnJvci5pbnZva2UoZS5jb2RlLCBlLnJlYXNvbik7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoZW5kcG9pbnQpO1xuICAgICAgICAgfTtcbiAgICAgICAgIFJvb20ucHJvdG90eXBlLmxlYXZlID0gZnVuY3Rpb24gKGNvbnNlbnRlZCkge1xuICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgaWYgKGNvbnNlbnRlZCA9PT0gdm9pZCAwKSB7IGNvbnNlbnRlZCA9IHRydWU7IH1cbiAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgX3RoaXMub25MZWF2ZShmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gcmVzb2x2ZShjb2RlKTsgfSk7XG4gICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICBpZiAoY29uc2VudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29ubmVjdGlvbi5zZW5kKFtleHBvcnRzLlByb3RvY29sLkxFQVZFX1JPT01dKTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uTGVhdmUuaW52b2tlKENsb3NlQ29kZS5DT05TRU5URUQpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICB9O1xuICAgICAgICAgUm9vbS5wcm90b3R5cGUub25NZXNzYWdlID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgcmV0dXJuIHRoaXMub25NZXNzYWdlSGFuZGxlcnMub24odGhpcy5nZXRNZXNzYWdlSGFuZGxlcktleSh0eXBlKSwgY2FsbGJhY2spO1xuICAgICAgICAgfTtcbiAgICAgICAgIFJvb20ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAodHlwZSwgbWVzc2FnZSkge1xuICAgICAgICAgICAgIHZhciBpbml0aWFsQnl0ZXMgPSBbZXhwb3J0cy5Qcm90b2NvbC5ST09NX0RBVEFdO1xuICAgICAgICAgICAgIGlmICh0eXBlb2YgKHR5cGUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgIHVtZC5lbmNvZGUuc3RyaW5nKGluaXRpYWxCeXRlcywgdHlwZSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICB1bWQuZW5jb2RlLm51bWJlcihpbml0aWFsQnl0ZXMsIHR5cGUpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB2YXIgYXJyO1xuICAgICAgICAgICAgIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGVuY29kZWQgPSBlbmNvZGUobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgIGFyciA9IG5ldyBVaW50OEFycmF5KGluaXRpYWxCeXRlcy5sZW5ndGggKyBlbmNvZGVkLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgICBhcnIuc2V0KG5ldyBVaW50OEFycmF5KGluaXRpYWxCeXRlcyksIDApO1xuICAgICAgICAgICAgICAgICBhcnIuc2V0KG5ldyBVaW50OEFycmF5KGVuY29kZWQpLCBpbml0aWFsQnl0ZXMubGVuZ3RoKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgIGFyciA9IG5ldyBVaW50OEFycmF5KGluaXRpYWxCeXRlcyk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5zZW5kKGFyci5idWZmZXIpO1xuICAgICAgICAgfTtcbiAgICAgICAgIFJvb20ucHJvdG90eXBlLnNlbmRCeXRlcyA9IGZ1bmN0aW9uICh0eXBlLCBieXRlcykge1xuICAgICAgICAgICAgIHZhciBpbml0aWFsQnl0ZXMgPSBbZXhwb3J0cy5Qcm90b2NvbC5ST09NX0RBVEFfQllURVNdO1xuICAgICAgICAgICAgIGlmICh0eXBlb2YgKHR5cGUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgIHVtZC5lbmNvZGUuc3RyaW5nKGluaXRpYWxCeXRlcywgdHlwZSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICB1bWQuZW5jb2RlLm51bWJlcihpbml0aWFsQnl0ZXMsIHR5cGUpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB2YXIgYXJyO1xuICAgICAgICAgICAgIGFyciA9IG5ldyBVaW50OEFycmF5KGluaXRpYWxCeXRlcy5sZW5ndGggKyAoYnl0ZXMuYnl0ZUxlbmd0aCB8fCBieXRlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgICBhcnIuc2V0KG5ldyBVaW50OEFycmF5KGluaXRpYWxCeXRlcyksIDApO1xuICAgICAgICAgICAgIGFyci5zZXQobmV3IFVpbnQ4QXJyYXkoYnl0ZXMpLCBpbml0aWFsQnl0ZXMubGVuZ3RoKTtcbiAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uc2VuZChhcnIuYnVmZmVyKTtcbiAgICAgICAgIH07XG4gICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUm9vbS5wcm90b3R5cGUsIFwic3RhdGVcIiwge1xuICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVyLmdldFN0YXRlKCk7XG4gICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgIH0pO1xuICAgICAgICAgUm9vbS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIHRoaXMub25Kb2luLmNsZWFyKCk7XG4gICAgICAgICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlLmNsZWFyKCk7XG4gICAgICAgICAgICAgdGhpcy5vbkVycm9yLmNsZWFyKCk7XG4gICAgICAgICAgICAgdGhpcy5vbkxlYXZlLmNsZWFyKCk7XG4gICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2VIYW5kbGVycy5ldmVudHMgPSB7fTtcbiAgICAgICAgIH07XG4gICAgICAgICBSb29tLnByb3RvdHlwZS5vbk1lc3NhZ2VDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgIHZhciBieXRlcyA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoZXZlbnQuZGF0YSkpO1xuICAgICAgICAgICAgIHZhciBjb2RlID0gYnl0ZXNbMF07XG4gICAgICAgICAgICAgaWYgKGNvZGUgPT09IGV4cG9ydHMuUHJvdG9jb2wuSk9JTl9ST09NKSB7XG4gICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAxO1xuICAgICAgICAgICAgICAgICB2YXIgcmVjb25uZWN0aW9uVG9rZW4gPSB1dGY4UmVhZChieXRlcywgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IHV0ZjhMZW5ndGgocmVjb25uZWN0aW9uVG9rZW4pO1xuICAgICAgICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZXJJZCA9IHV0ZjhSZWFkKGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gdXRmOExlbmd0aCh0aGlzLnNlcmlhbGl6ZXJJZCk7XG4gICAgICAgICAgICAgICAgIC8vIEluc3RhbnRpYXRlIHNlcmlhbGl6ZXIgaWYgbm90IGxvY2FsbHkgYXZhaWxhYmxlLlxuICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VyaWFsaXplcikge1xuICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcmlhbGl6ZXIgPSBnZXRTZXJpYWxpemVyKHRoaXMuc2VyaWFsaXplcklkKTtcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplciA9IG5ldyBzZXJpYWxpemVyKCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCA+IG9mZnNldCAmJiB0aGlzLnNlcmlhbGl6ZXIuaGFuZHNoYWtlKSB7XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZXIuaGFuZHNoYWtlKGJ5dGVzLCB7IG9mZnNldDogb2Zmc2V0IH0pO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0aW9uVG9rZW4gPSBcIlwiLmNvbmNhdCh0aGlzLnJvb21JZCwgXCI6XCIpLmNvbmNhdChyZWNvbm5lY3Rpb25Ub2tlbik7XG4gICAgICAgICAgICAgICAgIHRoaXMuaGFzSm9pbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgdGhpcy5vbkpvaW4uaW52b2tlKCk7XG4gICAgICAgICAgICAgICAgIC8vIGFja25vd2xlZGdlIHN1Y2Nlc3NmdWxsIEpPSU5fUk9PTVxuICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uc2VuZChbZXhwb3J0cy5Qcm90b2NvbC5KT0lOX1JPT01dKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA9PT0gZXhwb3J0cy5Qcm90b2NvbC5FUlJPUikge1xuICAgICAgICAgICAgICAgICB2YXIgaXRfMSA9IHsgb2Zmc2V0OiAxIH07XG4gICAgICAgICAgICAgICAgIHZhciBjb2RlXzEgPSB1bWQuZGVjb2RlLm51bWJlcihieXRlcywgaXRfMSk7XG4gICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gdW1kLmRlY29kZS5zdHJpbmcoYnl0ZXMsIGl0XzEpO1xuICAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IuaW52b2tlKGNvZGVfMSwgbWVzc2FnZSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IGV4cG9ydHMuUHJvdG9jb2wuTEVBVkVfUk9PTSkge1xuICAgICAgICAgICAgICAgICB0aGlzLmxlYXZlKCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IGV4cG9ydHMuUHJvdG9jb2wuUk9PTV9EQVRBX1NDSEVNQSkge1xuICAgICAgICAgICAgICAgICB2YXIgaXRfMiA9IHsgb2Zmc2V0OiAxIH07XG4gICAgICAgICAgICAgICAgIHZhciBjb250ZXh0XzEgPSB0aGlzLnNlcmlhbGl6ZXIuZ2V0U3RhdGUoKS5jb25zdHJ1Y3Rvci5fY29udGV4dDtcbiAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBjb250ZXh0XzEuZ2V0KHVtZC5kZWNvZGUubnVtYmVyKGJ5dGVzLCBpdF8yKSk7XG4gICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IHR5cGUoKTtcbiAgICAgICAgICAgICAgICAgbWVzc2FnZS5kZWNvZGUoYnl0ZXMsIGl0XzIpO1xuICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoTWVzc2FnZSh0eXBlLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA9PT0gZXhwb3J0cy5Qcm90b2NvbC5ST09NX1NUQVRFKSB7XG4gICAgICAgICAgICAgICAgIGJ5dGVzLnNoaWZ0KCk7IC8vIGRyb3AgYGNvZGVgIGJ5dGVcbiAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShieXRlcyk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IGV4cG9ydHMuUHJvdG9jb2wuUk9PTV9TVEFURV9QQVRDSCkge1xuICAgICAgICAgICAgICAgICBieXRlcy5zaGlmdCgpOyAvLyBkcm9wIGBjb2RlYCBieXRlXG4gICAgICAgICAgICAgICAgIHRoaXMucGF0Y2goYnl0ZXMpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChjb2RlID09PSBleHBvcnRzLlByb3RvY29sLlJPT01fREFUQSkge1xuICAgICAgICAgICAgICAgICB2YXIgaXRfMyA9IHsgb2Zmc2V0OiAxIH07XG4gICAgICAgICAgICAgICAgIHZhciB0eXBlID0gKHVtZC5kZWNvZGUuc3RyaW5nQ2hlY2soYnl0ZXMsIGl0XzMpKVxuICAgICAgICAgICAgICAgICAgICAgPyB1bWQuZGVjb2RlLnN0cmluZyhieXRlcywgaXRfMylcbiAgICAgICAgICAgICAgICAgICAgIDogdW1kLmRlY29kZS5udW1iZXIoYnl0ZXMsIGl0XzMpO1xuICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IChieXRlcy5sZW5ndGggPiBpdF8zLm9mZnNldClcbiAgICAgICAgICAgICAgICAgICAgID8gZGVjb2RlKGV2ZW50LmRhdGEsIGl0XzMub2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hNZXNzYWdlKHR5cGUsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmIChjb2RlID09PSBleHBvcnRzLlByb3RvY29sLlJPT01fREFUQV9CWVRFUykge1xuICAgICAgICAgICAgICAgICB2YXIgaXRfNCA9IHsgb2Zmc2V0OiAxIH07XG4gICAgICAgICAgICAgICAgIHZhciB0eXBlID0gKHVtZC5kZWNvZGUuc3RyaW5nQ2hlY2soYnl0ZXMsIGl0XzQpKVxuICAgICAgICAgICAgICAgICAgICAgPyB1bWQuZGVjb2RlLnN0cmluZyhieXRlcywgaXRfNClcbiAgICAgICAgICAgICAgICAgICAgIDogdW1kLmRlY29kZS5udW1iZXIoYnl0ZXMsIGl0XzQpO1xuICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoTWVzc2FnZSh0eXBlLCBuZXcgVWludDhBcnJheShieXRlcy5zbGljZShpdF80Lm9mZnNldCkpKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9O1xuICAgICAgICAgUm9vbS5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoZW5jb2RlZFN0YXRlKSB7XG4gICAgICAgICAgICAgdGhpcy5zZXJpYWxpemVyLnNldFN0YXRlKGVuY29kZWRTdGF0ZSk7XG4gICAgICAgICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlLmludm9rZSh0aGlzLnNlcmlhbGl6ZXIuZ2V0U3RhdGUoKSk7XG4gICAgICAgICB9O1xuICAgICAgICAgUm9vbS5wcm90b3R5cGUucGF0Y2ggPSBmdW5jdGlvbiAoYmluYXJ5UGF0Y2gpIHtcbiAgICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZXIucGF0Y2goYmluYXJ5UGF0Y2gpO1xuICAgICAgICAgICAgIHRoaXMub25TdGF0ZUNoYW5nZS5pbnZva2UodGhpcy5zZXJpYWxpemVyLmdldFN0YXRlKCkpO1xuICAgICAgICAgfTtcbiAgICAgICAgIFJvb20ucHJvdG90eXBlLmRpc3BhdGNoTWVzc2FnZSA9IGZ1bmN0aW9uICh0eXBlLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgIHZhciBtZXNzYWdlVHlwZSA9IHRoaXMuZ2V0TWVzc2FnZUhhbmRsZXJLZXkodHlwZSk7XG4gICAgICAgICAgICAgaWYgKHRoaXMub25NZXNzYWdlSGFuZGxlcnMuZXZlbnRzW21lc3NhZ2VUeXBlXSkge1xuICAgICAgICAgICAgICAgICB0aGlzLm9uTWVzc2FnZUhhbmRsZXJzLmVtaXQobWVzc2FnZVR5cGUsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLm9uTWVzc2FnZUhhbmRsZXJzLmV2ZW50c1snKiddKSB7XG4gICAgICAgICAgICAgICAgIHRoaXMub25NZXNzYWdlSGFuZGxlcnMuZW1pdCgnKicsIHR5cGUsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgKF9hID0gY29uc29sZS53YXJuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChjb25zb2xlLCBcImNvbHlzZXVzLmpzOiBvbk1lc3NhZ2UoKSBub3QgcmVnaXN0ZXJlZCBmb3IgdHlwZSAnXCIuY29uY2F0KHR5cGUsIFwiJy5cIikpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH07XG4gICAgICAgICBSb29tLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIGlmICh0aGlzLnNlcmlhbGl6ZXIpIHtcbiAgICAgICAgICAgICAgICAgdGhpcy5zZXJpYWxpemVyLnRlYXJkb3duKCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgfTtcbiAgICAgICAgIFJvb20ucHJvdG90eXBlLmdldE1lc3NhZ2VIYW5kbGVyS2V5ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiAodHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgLy8gdHlwZW9mIFNjaGVtYVxuICAgICAgICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjogcmV0dXJuIFwiJFwiLmNvbmNhdCh0eXBlLl90eXBlaWQpO1xuICAgICAgICAgICAgICAgICAvLyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgICAgICAgLy8gbnVtYmVyXG4gICAgICAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjogcmV0dXJuIFwiaVwiLmNvbmNhdCh0eXBlKTtcbiAgICAgICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBtZXNzYWdlIHR5cGUuXCIpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH07XG4gICAgICAgICByZXR1cm4gUm9vbTtcbiAgICAgfSgpKTtcblxuICAgICBmdW5jdGlvbiBhcHBseShzcmMsIHRhcikge1xuICAgICBcdHRhci5oZWFkZXJzID0gc3JjLmhlYWRlcnMgfHwge307XG4gICAgIFx0dGFyLnN0YXR1c01lc3NhZ2UgPSBzcmMuc3RhdHVzVGV4dDtcbiAgICAgXHR0YXIuc3RhdHVzQ29kZSA9IHNyYy5zdGF0dXM7XG4gICAgIFx0dGFyLmRhdGEgPSBzcmMucmVzcG9uc2U7XG4gICAgIH1cblxuICAgICBmdW5jdGlvbiBzZW5kKG1ldGhvZCwgdXJpLCBvcHRzKSB7XG4gICAgIFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xuICAgICBcdFx0b3B0cyA9IG9wdHMgfHwge307XG4gICAgIFx0XHR2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0O1xuICAgICBcdFx0dmFyIGssIHRtcCwgYXJyLCBzdHI9b3B0cy5ib2R5O1xuICAgICBcdFx0dmFyIGhlYWRlcnMgPSBvcHRzLmhlYWRlcnMgfHwge307XG5cbiAgICAgXHRcdC8vIElFIGNvbXBhdGlibGVcbiAgICAgXHRcdGlmIChvcHRzLnRpbWVvdXQpIHJlcS50aW1lb3V0ID0gb3B0cy50aW1lb3V0O1xuICAgICBcdFx0cmVxLm9udGltZW91dCA9IHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICBcdFx0XHRlcnIudGltZW91dCA9IGVyci50eXBlID09ICd0aW1lb3V0JztcbiAgICAgXHRcdFx0cmVqKGVycik7XG4gICAgIFx0XHR9O1xuXG4gICAgIFx0XHRyZXEub3BlbihtZXRob2QsIHVyaS5ocmVmIHx8IHVyaSk7XG5cbiAgICAgXHRcdHJlcS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgIFx0XHRcdGFyciA9IHJlcS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS50cmltKCkuc3BsaXQoL1tcXHJcXG5dKy8pO1xuICAgICBcdFx0XHRhcHBseShyZXEsIHJlcSk7IC8vPT4gcmVxLmhlYWRlcnNcblxuICAgICBcdFx0XHR3aGlsZSAodG1wID0gYXJyLnNoaWZ0KCkpIHtcbiAgICAgXHRcdFx0XHR0bXAgPSB0bXAuc3BsaXQoJzogJyk7XG4gICAgIFx0XHRcdFx0cmVxLmhlYWRlcnNbdG1wLnNoaWZ0KCkudG9Mb3dlckNhc2UoKV0gPSB0bXAuam9pbignOiAnKTtcbiAgICAgXHRcdFx0fVxuXG4gICAgIFx0XHRcdHRtcCA9IHJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgICAgXHRcdFx0aWYgKHRtcCAmJiAhIX50bXAuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgIFx0XHRcdFx0dHJ5IHtcbiAgICAgXHRcdFx0XHRcdHJlcS5kYXRhID0gSlNPTi5wYXJzZShyZXEuZGF0YSwgb3B0cy5yZXZpdmVyKTtcbiAgICAgXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiAgICAgXHRcdFx0XHRcdGFwcGx5KHJlcSwgZXJyKTtcbiAgICAgXHRcdFx0XHRcdHJldHVybiByZWooZXJyKTtcbiAgICAgXHRcdFx0XHR9XG4gICAgIFx0XHRcdH1cblxuICAgICBcdFx0XHQocmVxLnN0YXR1cyA+PSA0MDAgPyByZWogOiByZXMpKHJlcSk7XG4gICAgIFx0XHR9O1xuXG4gICAgIFx0XHRpZiAodHlwZW9mIEZvcm1EYXRhIDwgJ3UnICYmIHN0ciBpbnN0YW5jZW9mIEZvcm1EYXRhKSA7IGVsc2UgaWYgKHN0ciAmJiB0eXBlb2Ygc3RyID09ICdvYmplY3QnKSB7XG4gICAgIFx0XHRcdGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICBcdFx0XHRzdHIgPSBKU09OLnN0cmluZ2lmeShzdHIpO1xuICAgICBcdFx0fVxuXG4gICAgIFx0XHRyZXEud2l0aENyZWRlbnRpYWxzID0gISFvcHRzLndpdGhDcmVkZW50aWFscztcblxuICAgICBcdFx0Zm9yIChrIGluIGhlYWRlcnMpIHtcbiAgICAgXHRcdFx0cmVxLnNldFJlcXVlc3RIZWFkZXIoaywgaGVhZGVyc1trXSk7XG4gICAgIFx0XHR9XG5cbiAgICAgXHRcdHJlcS5zZW5kKHN0cik7XG4gICAgIFx0fSk7XG4gICAgIH1cblxuICAgICB2YXIgZ2V0ID0gLyojX19QVVJFX18qLyBzZW5kLmJpbmQoc2VuZCwgJ0dFVCcpO1xuICAgICB2YXIgcG9zdCA9IC8qI19fUFVSRV9fKi8gc2VuZC5iaW5kKHNlbmQsICdQT1NUJyk7XG4gICAgIHZhciBwYXRjaCA9IC8qI19fUFVSRV9fKi8gc2VuZC5iaW5kKHNlbmQsICdQQVRDSCcpO1xuICAgICB2YXIgZGVsID0gLyojX19QVVJFX18qLyBzZW5kLmJpbmQoc2VuZCwgJ0RFTEVURScpO1xuICAgICB2YXIgcHV0ID0gLyojX19QVVJFX18qLyBzZW5kLmJpbmQoc2VuZCwgJ1BVVCcpO1xuXG4gICAgIHZhciBkZWxfMSA9IGRlbDtcbiAgICAgdmFyIGdldF8xID0gZ2V0O1xuICAgICB2YXIgcGF0Y2hfMSA9IHBhdGNoO1xuICAgICB2YXIgcG9zdF8xID0gcG9zdDtcbiAgICAgdmFyIHB1dF8xID0gcHV0O1xuICAgICB2YXIgc2VuZF8xID0gc2VuZDtcblxuICAgICB2YXIgeGhyID0ge1xuICAgICBcdGRlbDogZGVsXzEsXG4gICAgIFx0Z2V0OiBnZXRfMSxcbiAgICAgXHRwYXRjaDogcGF0Y2hfMSxcbiAgICAgXHRwb3N0OiBwb3N0XzEsXG4gICAgIFx0cHV0OiBwdXRfMSxcbiAgICAgXHRzZW5kOiBzZW5kXzFcbiAgICAgfTtcblxuICAgICB2YXIgaHR0cGllID0gLyojX19QVVJFX18qL19tZXJnZU5hbWVzcGFjZXMoe1xuICAgICAgICAgX19wcm90b19fOiBudWxsLFxuICAgICAgICAgJ2RlZmF1bHQnOiB4aHIsXG4gICAgICAgICBkZWw6IGRlbF8xLFxuICAgICAgICAgZ2V0OiBnZXRfMSxcbiAgICAgICAgIHBhdGNoOiBwYXRjaF8xLFxuICAgICAgICAgcG9zdDogcG9zdF8xLFxuICAgICAgICAgcHV0OiBwdXRfMSxcbiAgICAgICAgIHNlbmQ6IHNlbmRfMVxuICAgICB9LCBbeGhyXSk7XG5cbiAgICAgdmFyIEhUVFAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICBmdW5jdGlvbiBIVFRQKGNsaWVudCkge1xuICAgICAgICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgICAgICAgfVxuICAgICAgICAgSFRUUC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXCJnZXRcIiwgcGF0aCwgb3B0aW9ucyk7XG4gICAgICAgICB9O1xuICAgICAgICAgSFRUUC5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFwicG9zdFwiLCBwYXRoLCBvcHRpb25zKTtcbiAgICAgICAgIH07XG4gICAgICAgICBIVFRQLnByb3RvdHlwZS5kZWwgPSBmdW5jdGlvbiAocGF0aCwgb3B0aW9ucykge1xuICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcImRlbFwiLCBwYXRoLCBvcHRpb25zKTtcbiAgICAgICAgIH07XG4gICAgICAgICBIVFRQLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAocGF0aCwgb3B0aW9ucykge1xuICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChcInB1dFwiLCBwYXRoLCBvcHRpb25zKTtcbiAgICAgICAgIH07XG4gICAgICAgICBIVFRQLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG1ldGhvZCwgcGF0aCwgb3B0aW9ucykge1xuICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICAgcmV0dXJuIGh0dHBpZVttZXRob2RdKHRoaXMuY2xpZW50WydnZXRIdHRwRW5kcG9pbnQnXShwYXRoKSwgdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMpKS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgIHRocm93IG5ldyBTZXJ2ZXJFcnJvcihlLnN0YXR1c0NvZGUgfHwgLTEsICgoX2EgPSBlLmRhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lcnJvcikgfHwgZS5zdGF0dXNNZXNzYWdlIHx8IGUubWVzc2FnZSB8fCBcIm9mZmxpbmVcIik7XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICB9O1xuICAgICAgICAgSFRUUC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgaWYgKHRoaXMuYXV0aFRva2VuKSB7XG4gICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBvcHRpb25zLmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9IFwiQmVhcmVyIFwiLmNvbmNhdCh0aGlzLmF1dGhUb2tlbik7XG4gICAgICAgICAgICAgICAgIG9wdGlvbnMud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgICB9O1xuICAgICAgICAgcmV0dXJuIEhUVFA7XG4gICAgIH0oKSk7XG5cbiAgICAgLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvY29jb3MtY3JlYXRvci5kLnRzXCIgLz5cbiAgICAgLyoqXG4gICAgICAqIFdlIGRvIG5vdCBhc3NpZ24gJ3N0b3JhZ2UnIHRvIHdpbmRvdy5sb2NhbFN0b3JhZ2UgaW1tZWRpYXRlbGx5IGZvciBSZWFjdFxuICAgICAgKiBOYXRpdmUgY29tcGF0aWJpbGl0eS4gd2luZG93LmxvY2FsU3RvcmFnZSBpcyBub3QgcHJlc2VudCB3aGVuIHRoaXMgbW9kdWxlIGlzXG4gICAgICAqIGxvYWRlZC5cbiAgICAgICovXG4gICAgIHZhciBzdG9yYWdlO1xuICAgICBmdW5jdGlvbiBnZXRTdG9yYWdlKCkge1xuICAgICAgICAgaWYgKCFzdG9yYWdlKSB7XG4gICAgICAgICAgICAgc3RvcmFnZSA9ICh0eXBlb2YgKGNjKSAhPT0gJ3VuZGVmaW5lZCcgJiYgY2Muc3lzICYmIGNjLnN5cy5sb2NhbFN0b3JhZ2UpXG4gICAgICAgICAgICAgICAgID8gY2Muc3lzLmxvY2FsU3RvcmFnZSAvLyBjb21wYXRpYmlsaXR5IHdpdGggY29jb3MgY3JlYXRvclxuICAgICAgICAgICAgICAgICA6IHR5cGVvZiAod2luZG93KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYWxTdG9yYWdlIC8vUk4gZG9lcyBoYXZlIHdpbmRvdyBvYmplY3QgYXQgdGhpcyBwb2ludCwgYnV0IGxvY2FsU3RvcmFnZSBpcyBub3QgZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgPyB3aW5kb3cubG9jYWxTdG9yYWdlIC8vIHJlZ3VsYXIgYnJvd3NlciBlbnZpcm9ubWVudFxuICAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW06IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7IHRoaXMuY2FjaGVba2V5XSA9IHZhbHVlOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGdldEl0ZW06IGZ1bmN0aW9uIChrZXkpIHsgdGhpcy5jYWNoZVtrZXldOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUl0ZW06IGZ1bmN0aW9uIChrZXkpIHsgZGVsZXRlIHRoaXMuY2FjaGVba2V5XTsgfSxcbiAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gc3RvcmFnZTtcbiAgICAgfVxuICAgICBmdW5jdGlvbiBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICAgICAgIGdldFN0b3JhZ2UoKS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgICB9XG4gICAgIGZ1bmN0aW9uIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgICAgICBnZXRTdG9yYWdlKCkucmVtb3ZlSXRlbShrZXkpO1xuICAgICB9XG4gICAgIGZ1bmN0aW9uIGdldEl0ZW0oa2V5LCBjYWxsYmFjaykge1xuICAgICAgICAgdmFyIHZhbHVlID0gZ2V0U3RvcmFnZSgpLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgIGlmICh0eXBlb2YgKFByb21pc2UpID09PSAndW5kZWZpbmVkJyB8fCAvLyBvbGQgYnJvd3NlcnNcbiAgICAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAvLyBicm93c2VyIGhhcyBzeW5jaHJvbm91cyByZXR1cm5cbiAgICAgICAgICAgICBjYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAvLyByZWFjdC1uYXRpdmUgaXMgYXN5bmNocm9ub3VzXG4gICAgICAgICAgICAgdmFsdWUudGhlbihmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGNhbGxiYWNrKGlkKTsgfSk7XG4gICAgICAgICB9XG4gICAgIH1cblxuICAgICB2YXIgX0F1dGhfX2luaXRpYWxpemVkLCBfQXV0aF9faW5pdGlhbGl6YXRpb25Qcm9taXNlLCBfQXV0aF9fc2lnbkluV2luZG93LCBfQXV0aF9fZXZlbnRzO1xuICAgICB2YXIgQXV0aCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIGZ1bmN0aW9uIEF1dGgoaHR0cCkge1xuICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgdGhpcy5odHRwID0gaHR0cDtcbiAgICAgICAgICAgICB0aGlzLnNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgICBwYXRoOiBcIi9hdXRoXCIsXG4gICAgICAgICAgICAgICAgIGtleTogXCJjb2x5c2V1cy1hdXRoLXRva2VuXCIsXG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICBfQXV0aF9faW5pdGlhbGl6ZWQuc2V0KHRoaXMsIGZhbHNlKTtcbiAgICAgICAgICAgICBfQXV0aF9faW5pdGlhbGl6YXRpb25Qcm9taXNlLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICAgICAgIF9BdXRoX19zaWduSW5XaW5kb3cuc2V0KHRoaXMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgX0F1dGhfX2V2ZW50cy5zZXQodGhpcywgY3JlYXRlTmFub0V2ZW50cygpKTtcbiAgICAgICAgICAgICBnZXRJdGVtKHRoaXMuc2V0dGluZ3Mua2V5LCBmdW5jdGlvbiAodG9rZW4pIHsgcmV0dXJuIF90aGlzLnRva2VuID0gdG9rZW47IH0pO1xuICAgICAgICAgfVxuICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGgucHJvdG90eXBlLCBcInRva2VuXCIsIHtcbiAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5hdXRoVG9rZW47XG4gICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgICAgICB0aGlzLmh0dHAuYXV0aFRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgIH0pO1xuICAgICAgICAgQXV0aC5wcm90b3R5cGUub25DaGFuZ2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgIHZhciB1bmJpbmRDaGFuZ2UgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BdXRoX19ldmVudHMsIFwiZlwiKS5vbihcImNoYW5nZVwiLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgaWYgKCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BdXRoX19pbml0aWFsaXplZCwgXCJmXCIpKSB7XG4gICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0F1dGhfX2luaXRpYWxpemF0aW9uUHJvbWlzZSwgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ2V0VXNlckRhdGEoKS50aGVuKGZ1bmN0aW9uICh1c2VyRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXRDaGFuZ2UoX19hc3NpZ24oX19hc3NpZ24oe30sIHVzZXJEYXRhKSwgeyB0b2tlbjogX3RoaXMudG9rZW4gfSkpO1xuICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2VyIGlzIG5vdCBsb2dnZWQgaW4sIG9yIHNlcnZpY2UgaXMgZG93blxuICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXRDaGFuZ2UoeyB1c2VyOiBudWxsLCB0b2tlbjogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIH0pLCBcImZcIik7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0F1dGhfX2luaXRpYWxpemVkLCB0cnVlLCBcImZcIik7XG4gICAgICAgICAgICAgcmV0dXJuIHVuYmluZENoYW5nZTtcbiAgICAgICAgIH07XG4gICAgICAgICBBdXRoLnByb3RvdHlwZS5nZXRVc2VyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50b2tlbikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQoXCJcIi5jb25jYXQodGhpcy5zZXR0aW5ncy5wYXRoLCBcIi91c2VyZGF0YVwiKSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIChfYS5zZW50KCkpLmRhdGFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBhdXRoLnRva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH07XG4gICAgICAgICBBdXRoLnByb3RvdHlwZS5yZWdpc3RlcldpdGhFbWFpbEFuZFBhc3N3b3JkID0gZnVuY3Rpb24gKGVtYWlsLCBwYXNzd29yZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5wb3N0KFwiXCIuY29uY2F0KHRoaXMuc2V0dGluZ3MucGF0aCwgXCIvcmVnaXN0ZXJcIiksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgZW1haWw6IGVtYWlsLCBwYXNzd29yZDogcGFzc3dvcmQsIG9wdGlvbnM6IG9wdGlvbnMsIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAoX2Euc2VudCgpKS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBkYXRhXTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICB9O1xuICAgICAgICAgQXV0aC5wcm90b3R5cGUuc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQgPSBmdW5jdGlvbiAoZW1haWwsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLnBvc3QoXCJcIi5jb25jYXQodGhpcy5zZXR0aW5ncy5wYXRoLCBcIi9sb2dpblwiKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogeyBlbWFpbDogZW1haWwsIHBhc3N3b3JkOiBwYXNzd29yZCwgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IChfYS5zZW50KCkpLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdENoYW5nZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGRhdGFdO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH07XG4gICAgICAgICBBdXRoLnByb3RvdHlwZS5zaWduSW5Bbm9ueW1vdXNseSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLnBvc3QoXCJcIi5jb25jYXQodGhpcy5zZXR0aW5ncy5wYXRoLCBcIi9hbm9ueW1vdXNcIiksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgb3B0aW9uczogb3B0aW9ucywgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gKF9hLnNlbnQoKSkuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0Q2hhbmdlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZGF0YV07XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgfTtcbiAgICAgICAgIEF1dGgucHJvdG90eXBlLnNlbmRQYXNzd29yZFJlc2V0RW1haWwgPSBmdW5jdGlvbiAoZW1haWwpIHtcbiAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5wb3N0KFwiXCIuY29uY2F0KHRoaXMuc2V0dGluZ3MucGF0aCwgXCIvZm9yZ290LXBhc3N3b3JkXCIpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7IGVtYWlsOiBlbWFpbCwgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgKF9hLnNlbnQoKSkuZGF0YV07XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgfTtcbiAgICAgICAgIEF1dGgucHJvdG90eXBlLnNpZ25JbldpdGhQcm92aWRlciA9IGZ1bmN0aW9uIChwcm92aWRlck5hbWUsIHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgaWYgKHNldHRpbmdzID09PSB2b2lkIDApIHsgc2V0dGluZ3MgPSB7fTsgfVxuICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSBzZXR0aW5ncy53aWR0aCB8fCA0ODA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gc2V0dGluZ3MuaGVpZ2h0IHx8IDc2ODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yd2FyZCBleGlzdGluZyB0b2tlbiBmb3IgdXBncmFkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGdyYWRpbmdUb2tlbiA9IF90aGlzLnRva2VuID8gXCI/dG9rZW49XCIuY29uY2F0KF90aGlzLnRva2VuKSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhcGl0YWxpemUgZmlyc3QgbGV0dGVyIG9mIHByb3ZpZGVyTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBcIkxvZ2luIHdpdGggXCIuY29uY2F0KChwcm92aWRlck5hbWVbMF0udG9VcHBlckNhc2UoKSArIHByb3ZpZGVyTmFtZS5zdWJzdHJpbmcoMSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IF90aGlzLmh0dHBbJ2NsaWVudCddWydnZXRIdHRwRW5kcG9pbnQnXShcIlwiLmNvbmNhdCgoc2V0dGluZ3MucHJlZml4IHx8IFwiXCIuY29uY2F0KF90aGlzLnNldHRpbmdzLnBhdGgsIFwiL3Byb3ZpZGVyXCIpKSwgXCIvXCIpLmNvbmNhdChwcm92aWRlck5hbWUpLmNvbmNhdCh1cGdyYWRpbmdUb2tlbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IChzY3JlZW4ud2lkdGggLyAyKSAtICh3IC8gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSAoc2NyZWVuLmhlaWdodCAvIDIpIC0gKGggLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldChfdGhpcywgX0F1dGhfX3NpZ25JbldpbmRvdywgd2luZG93Lm9wZW4odXJsLCB0aXRsZSwgJ3Rvb2xiYXI9bm8sIGxvY2F0aW9uPW5vLCBkaXJlY3Rvcmllcz1ubywgc3RhdHVzPW5vLCBtZW51YmFyPW5vLCBzY3JvbGxiYXJzPW5vLCByZXNpemFibGU9bm8sIGNvcHloaXN0b3J5PW5vLCB3aWR0aD0nICsgdyArICcsIGhlaWdodD0nICsgaCArICcsIHRvcD0nICsgdG9wICsgJywgbGVmdD0nICsgbGVmdCksIFwiZlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9uTWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogaXQgaXMgYSBnb29kIGlkZWEgdG8gY2hlY2sgaWYgZXZlbnQub3JpZ2luIGNhbiBiZSB0cnVzdGVkIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGV2ZW50Lm9yaWdpbi5pbmRleE9mKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSkgPT09IC0xKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVxdWlyZSAndXNlcicgYW5kICd0b2tlbicgaW5zaWRlIHJlY2VpdmVkIGRhdGEuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0YS51c2VyID09PSB1bmRlZmluZWQgJiYgZXZlbnQuZGF0YS50b2tlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChyZWplY3Rpb25DaGVja2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQoX3RoaXMsIF9BdXRoX19zaWduSW5XaW5kb3csIFwiZlwiKS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldChfdGhpcywgX0F1dGhfX3NpZ25JbldpbmRvdywgdW5kZWZpbmVkLCBcImZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25NZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5kYXRhLmVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXZlbnQuZGF0YS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXRDaGFuZ2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWplY3Rpb25DaGVja2VyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KF90aGlzLCBfQXV0aF9fc2lnbkluV2luZG93LCBcImZcIikgfHwgX19jbGFzc1ByaXZhdGVGaWVsZEdldChfdGhpcywgX0F1dGhfX3NpZ25JbldpbmRvdywgXCJmXCIpLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQoX3RoaXMsIF9BdXRoX19zaWduSW5XaW5kb3csIHVuZGVmaW5lZCwgXCJmXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcImNhbmNlbGxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25NZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH07XG4gICAgICAgICBBdXRoLnByb3RvdHlwZS5zaWduT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0Q2hhbmdlKHsgdXNlcjogbnVsbCwgdG9rZW46IG51bGwgfSk7XG4gICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgfTtcbiAgICAgICAgIEF1dGgucHJvdG90eXBlLmVtaXRDaGFuZ2UgPSBmdW5jdGlvbiAoYXV0aERhdGEpIHtcbiAgICAgICAgICAgICBpZiAoYXV0aERhdGEudG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICB0aGlzLnRva2VuID0gYXV0aERhdGEudG9rZW47XG4gICAgICAgICAgICAgICAgIGlmIChhdXRoRGF0YS50b2tlbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSXRlbSh0aGlzLnNldHRpbmdzLmtleSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBrZXkgaW4gbG9jYWxTdG9yYWdlXG4gICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKHRoaXMuc2V0dGluZ3Mua2V5LCBhdXRoRGF0YS50b2tlbik7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXV0aF9fZXZlbnRzLCBcImZcIikuZW1pdChcImNoYW5nZVwiLCBhdXRoRGF0YSk7XG4gICAgICAgICB9O1xuICAgICAgICAgcmV0dXJuIEF1dGg7XG4gICAgIH0oKSk7XG4gICAgIF9BdXRoX19pbml0aWFsaXplZCA9IG5ldyBXZWFrTWFwKCksIF9BdXRoX19pbml0aWFsaXphdGlvblByb21pc2UgPSBuZXcgV2Vha01hcCgpLCBfQXV0aF9fc2lnbkluV2luZG93ID0gbmV3IFdlYWtNYXAoKSwgX0F1dGhfX2V2ZW50cyA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgICAgdmFyIF9hO1xuICAgICB2YXIgTWF0Y2hNYWtlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICBfX2V4dGVuZHMoTWF0Y2hNYWtlRXJyb3IsIF9zdXBlcik7XG4gICAgICAgICBmdW5jdGlvbiBNYXRjaE1ha2VFcnJvcihtZXNzYWdlLCBjb2RlKSB7XG4gICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgICAgICBfdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIE1hdGNoTWFrZUVycm9yLnByb3RvdHlwZSk7XG4gICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIE1hdGNoTWFrZUVycm9yO1xuICAgICB9KEVycm9yKSk7XG4gICAgIC8vIC0gUmVhY3QgTmF0aXZlIGRvZXMgbm90IHByb3ZpZGUgYHdpbmRvdy5sb2NhdGlvbmBcbiAgICAgLy8gLSBDb2NvcyBDcmVhdG9yIChOYXRpdmUpIGRvZXMgbm90IHByb3ZpZGUgYHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZWBcbiAgICAgdmFyIERFRkFVTFRfRU5EUE9JTlQgPSAodHlwZW9mICh3aW5kb3cpICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiAoKF9hID0gd2luZG93ID09PSBudWxsIHx8IHdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93LmxvY2F0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaG9zdG5hbWUpICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgPyBcIlwiLmNvbmNhdCh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wucmVwbGFjZShcImh0dHBcIiwgXCJ3c1wiKSwgXCIvL1wiKS5jb25jYXQod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKS5jb25jYXQoKHdpbmRvdy5sb2NhdGlvbi5wb3J0ICYmIFwiOlwiLmNvbmNhdCh3aW5kb3cubG9jYXRpb24ucG9ydCkpKVxuICAgICAgICAgOiBcIndzOi8vMTI3LjAuMC4xOjI1NjdcIjtcbiAgICAgdmFyIENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIGZ1bmN0aW9uIENsaWVudChzZXR0aW5ncykge1xuICAgICAgICAgICAgIGlmIChzZXR0aW5ncyA9PT0gdm9pZCAwKSB7IHNldHRpbmdzID0gREVGQVVMVF9FTkRQT0lOVDsgfVxuICAgICAgICAgICAgIGlmICh0eXBlb2YgKHNldHRpbmdzKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAvLyBlbmRwb2ludCBieSB1cmxcbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgdmFyIHVybCA9IG5ldyBVUkwoc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICB2YXIgc2VjdXJlID0gKHVybC5wcm90b2NvbCA9PT0gXCJodHRwczpcIiB8fCB1cmwucHJvdG9jb2wgPT09IFwid3NzOlwiKTtcbiAgICAgICAgICAgICAgICAgdmFyIHBvcnQgPSBOdW1iZXIodXJsLnBvcnQgfHwgKHNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICBob3N0bmFtZTogdXJsLmhvc3RuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IHVybC5wYXRobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgIHBvcnQ6IHBvcnQsXG4gICAgICAgICAgICAgICAgICAgICBzZWN1cmU6IHNlY3VyZVxuICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgLy8gZW5kcG9pbnQgYnkgc2V0dGluZ3NcbiAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnBvcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MucG9ydCA9IChzZXR0aW5ncy5zZWN1cmUpID8gNDQzIDogODA7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnBhdGhuYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBwYXRobmFtZSBkb2VzIG5vdCBlbmQgd2l0aCBcIi9cIlxuICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnBhdGhuYW1lID0gdGhpcy5zZXR0aW5ncy5wYXRobmFtZS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHRoaXMuaHR0cCA9IG5ldyBIVFRQKHRoaXMpO1xuICAgICAgICAgICAgIHRoaXMuYXV0aCA9IG5ldyBBdXRoKHRoaXMuaHR0cCk7XG4gICAgICAgICB9XG4gICAgICAgICBDbGllbnQucHJvdG90eXBlLmpvaW5PckNyZWF0ZSA9IGZ1bmN0aW9uIChyb29tTmFtZSwgb3B0aW9ucywgcm9vdFNjaGVtYSkge1xuICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNyZWF0ZU1hdGNoTWFrZVJlcXVlc3QoJ2pvaW5PckNyZWF0ZScsIHJvb21OYW1lLCBvcHRpb25zLCByb290U2NoZW1hKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcbiAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICB9O1xuICAgICAgICAgQ2xpZW50LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAocm9vbU5hbWUsIG9wdGlvbnMsIHJvb3RTY2hlbWEpIHtcbiAgICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jcmVhdGVNYXRjaE1ha2VSZXF1ZXN0KCdjcmVhdGUnLCByb29tTmFtZSwgb3B0aW9ucywgcm9vdFNjaGVtYSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgfTtcbiAgICAgICAgIENsaWVudC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIChyb29tTmFtZSwgb3B0aW9ucywgcm9vdFNjaGVtYSkge1xuICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNyZWF0ZU1hdGNoTWFrZVJlcXVlc3QoJ2pvaW4nLCByb29tTmFtZSwgb3B0aW9ucywgcm9vdFNjaGVtYSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgfTtcbiAgICAgICAgIENsaWVudC5wcm90b3R5cGUuam9pbkJ5SWQgPSBmdW5jdGlvbiAocm9vbUlkLCBvcHRpb25zLCByb290U2NoZW1hKSB7XG4gICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY3JlYXRlTWF0Y2hNYWtlUmVxdWVzdCgnam9pbkJ5SWQnLCByb29tSWQsIG9wdGlvbnMsIHJvb3RTY2hlbWEpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH07XG4gICAgICAgICAvKipcbiAgICAgICAgICAqIFJlLWVzdGFibGlzaCBjb25uZWN0aW9uIHdpdGggYSByb29tIHRoaXMgY2xpZW50IHdhcyBwcmV2aW91c2x5IGNvbm5lY3RlZCB0by5cbiAgICAgICAgICAqXG4gICAgICAgICAgKiBAcGFyYW0gcmVjb25uZWN0aW9uVG9rZW4gVGhlIGByb29tLnJlY29ubmVjdGlvblRva2VuYCBmcm9tIHByZXZpb3VzbHkgY29ubmVjdGVkIHJvb20uXG4gICAgICAgICAgKiBAcGFyYW0gcm9vdFNjaGVtYSAob3B0aW9uYWwpIENvbmNyZXRlIHJvb3Qgc2NoZW1hIGRlZmluaXRpb25cbiAgICAgICAgICAqIEByZXR1cm5zIFByb21pc2U8Um9vbT5cbiAgICAgICAgICAqL1xuICAgICAgICAgQ2xpZW50LnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAocmVjb25uZWN0aW9uVG9rZW4sIHJvb3RTY2hlbWEpIHtcbiAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHZhciBfYSwgcm9vbUlkLCB0b2tlbjtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocmVjb25uZWN0aW9uVG9rZW4pID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiAocm9vdFNjaGVtYSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRFUFJFQ0FURUQ6IC5yZWNvbm5lY3QoKSBub3cgb25seSBhY2NlcHRzICdyZWNvbm5lY3Rpb25Ub2tlbicgYXMgYXJndW1lbnQuXFxuWW91IGNhbiBnZXQgdGhpcyB0b2tlbiBmcm9tIHByZXZpb3VzbHkgY29ubmVjdGVkIGByb29tLnJlY29ubmVjdGlvblRva2VuYFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHJlY29ubmVjdGlvblRva2VuLnNwbGl0KFwiOlwiKSwgcm9vbUlkID0gX2FbMF0sIHRva2VuID0gX2FbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcm9vbUlkIHx8ICF0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByZWNvbm5lY3Rpb24gdG9rZW4gZm9ybWF0LlxcblRoZSBmb3JtYXQgc2hvdWxkIGJlIHJvb21JZDpyZWNvbm5lY3Rpb25Ub2tlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNyZWF0ZU1hdGNoTWFrZVJlcXVlc3QoJ3JlY29ubmVjdCcsIHJvb21JZCwgeyByZWNvbm5lY3Rpb25Ub2tlbjogdG9rZW4gfSwgcm9vdFNjaGVtYSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgfTtcbiAgICAgICAgIENsaWVudC5wcm90b3R5cGUuZ2V0QXZhaWxhYmxlUm9vbXMgPSBmdW5jdGlvbiAocm9vbU5hbWUpIHtcbiAgICAgICAgICAgICBpZiAocm9vbU5hbWUgPT09IHZvaWQgMCkgeyByb29tTmFtZSA9IFwiXCI7IH1cbiAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQoXCJtYXRjaG1ha2UvXCIuY29uY2F0KHJvb21OYW1lKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIChfYS5zZW50KCkpLmRhdGFdO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH07XG4gICAgICAgICBDbGllbnQucHJvdG90eXBlLmNvbnN1bWVTZWF0UmVzZXJ2YXRpb24gPSBmdW5jdGlvbiAocmVzcG9uc2UsIHJvb3RTY2hlbWEsIHJldXNlUm9vbUluc3RhbmNlIC8vIHVzZWQgaW4gZGV2TW9kZVxuICAgICAgICAgKSB7XG4gICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICB2YXIgcm9vbSwgb3B0aW9ucywgdGFyZ2V0Um9vbTtcbiAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgcm9vbSA9IHRoaXMuY3JlYXRlUm9vbShyZXNwb25zZS5yb29tLm5hbWUsIHJvb3RTY2hlbWEpO1xuICAgICAgICAgICAgICAgICAgICAgcm9vbS5yb29tSWQgPSByZXNwb25zZS5yb29tLnJvb21JZDtcbiAgICAgICAgICAgICAgICAgICAgIHJvb20uc2Vzc2lvbklkID0gcmVzcG9uc2Uuc2Vzc2lvbklkO1xuICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHsgc2Vzc2lvbklkOiByb29tLnNlc3Npb25JZCB9O1xuICAgICAgICAgICAgICAgICAgICAgLy8gZm9yd2FyZCBcInJlY29ubmVjdGlvbiB0b2tlblwiIGluIGNhc2Ugb2YgcmVjb25uZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlY29ubmVjdGlvblRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5yZWNvbm5lY3Rpb25Ub2tlbiA9IHJlc3BvbnNlLnJlY29ubmVjdGlvblRva2VuO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um9vbSA9IHJldXNlUm9vbUluc3RhbmNlIHx8IHJvb207XG4gICAgICAgICAgICAgICAgICAgICByb29tLmNvbm5lY3QodGhpcy5idWlsZEVuZHBvaW50KHJlc3BvbnNlLnJvb20sIG9wdGlvbnMpLCByZXNwb25zZS5kZXZNb2RlICYmIChmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldHJ5Q291bnQsIHJldHJ5TWF4UmV0cmllcywgcmV0cnlSZWNvbm5lY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIltDb2x5c2V1cyBkZXZNb2RlXTogXCIuY29uY2F0KFN0cmluZy5mcm9tQ29kZVBvaW50KDB4MUY1MDQpLCBcIiBSZS1lc3RhYmxpc2hpbmcgY29ubmVjdGlvbiB3aXRoIHJvb20gaWQgJ1wiKS5jb25jYXQocm9vbS5yb29tSWQsIFwiJy4uLlwiKSk7IC8vIPCflIRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5TWF4UmV0cmllcyA9IDg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5UmVjb25uZWN0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jb25zdW1lU2VhdFJlc2VydmF0aW9uKHJlc3BvbnNlLCByb290U2NoZW1hLCB0YXJnZXRSb29tKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIltDb2x5c2V1cyBkZXZNb2RlXTogXCIuY29uY2F0KFN0cmluZy5mcm9tQ29kZVBvaW50KDB4MjcwNSksIFwiIFN1Y2Nlc3NmdWxseSByZS1lc3RhYmxpc2hlZCBjb25uZWN0aW9uIHdpdGggcm9vbSAnXCIpLmNvbmNhdChyb29tLnJvb21JZCwgXCInXCIpKTsgLy8g4pyFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHJ5Q291bnQgPCByZXRyeU1heFJldHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJbQ29seXNldXMgZGV2TW9kZV06IFwiLmNvbmNhdChTdHJpbmcuZnJvbUNvZGVQb2ludCgweDFGNTA0KSwgXCIgcmV0cnlpbmcuLi4gKFwiKS5jb25jYXQocmV0cnlDb3VudCwgXCIgb3V0IG9mIFwiKS5jb25jYXQocmV0cnlNYXhSZXRyaWVzLCBcIilcIikpOyAvLyDwn5SEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChyZXRyeVJlY29ubmVjdGlvbiwgMjAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJbQ29seXNldXMgZGV2TW9kZV06IFwiLmNvbmNhdChTdHJpbmcuZnJvbUNvZGVQb2ludCgweDI3NEMpLCBcIiBGYWlsZWQgdG8gcmVjb25uZWN0LiBJcyB5b3VyIHNlcnZlciBydW5uaW5nPyBQbGVhc2UgY2hlY2sgc2VydmVyIGxvZ3MuXCIpKTsgLy8g4p2MXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHJldHJ5UmVjb25uZWN0aW9uLCAyMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgfSk7IH0pLCB0YXJnZXRSb29tKTtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbkVycm9yID0gZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2UpIHsgcmV0dXJuIHJlamVjdChuZXcgU2VydmVyRXJyb3IoY29kZSwgbWVzc2FnZSkpOyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb29tLm9uRXJyb3Iub25jZShvbkVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um9vbVsnb25Kb2luJ10ub25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb29tLm9uRXJyb3IucmVtb3ZlKG9uRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0YXJnZXRSb29tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH07XG4gICAgICAgICBDbGllbnQucHJvdG90eXBlLmNyZWF0ZU1hdGNoTWFrZVJlcXVlc3QgPSBmdW5jdGlvbiAobWV0aG9kLCByb29tTmFtZSwgb3B0aW9ucywgcm9vdFNjaGVtYSwgcmV1c2VSb29tSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAucG9zdChcIm1hdGNobWFrZS9cIi5jb25jYXQobWV0aG9kLCBcIi9cIikuY29uY2F0KHJvb21OYW1lKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gKF9hLnNlbnQoKSkuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRklYTUU6IEhUVFAgY2xhc3MgaXMgYWxyZWFkeSBoYW5kbGluZyB0aGlzIGFzIFNlcnZlckVycm9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNYXRjaE1ha2VFcnJvcihyZXNwb25zZS5lcnJvciwgcmVzcG9uc2UuY29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yd2FyZCByZWNvbm5lY3Rpb24gdG9rZW4gZHVyaW5nIFwicmVjb25uZWN0XCIgbWV0aG9kcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJyZWNvbm5lY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucmVjb25uZWN0aW9uVG9rZW4gPSBvcHRpb25zLnJlY29ubmVjdGlvblRva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY29uc3VtZVNlYXRSZXNlcnZhdGlvbihyZXNwb25zZSwgcm9vdFNjaGVtYSwgcmV1c2VSb29tSW5zdGFuY2UpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgIH07XG4gICAgICAgICBDbGllbnQucHJvdG90eXBlLmNyZWF0ZVJvb20gPSBmdW5jdGlvbiAocm9vbU5hbWUsIHJvb3RTY2hlbWEpIHtcbiAgICAgICAgICAgICByZXR1cm4gbmV3IFJvb20ocm9vbU5hbWUsIHJvb3RTY2hlbWEpO1xuICAgICAgICAgfTtcbiAgICAgICAgIENsaWVudC5wcm90b3R5cGUuYnVpbGRFbmRwb2ludCA9IGZ1bmN0aW9uIChyb29tLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICAgICAgICAgLy8gYXBwZW5kIHByb3ZpZGVkIG9wdGlvbnNcbiAgICAgICAgICAgICBmb3IgKHZhciBuYW1lXzEgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZV8xKSkge1xuICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goXCJcIi5jb25jYXQobmFtZV8xLCBcIj1cIikuY29uY2F0KG9wdGlvbnNbbmFtZV8xXSkpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB2YXIgZW5kcG9pbnQgPSAodGhpcy5zZXR0aW5ncy5zZWN1cmUpXG4gICAgICAgICAgICAgICAgID8gXCJ3c3M6Ly9cIlxuICAgICAgICAgICAgICAgICA6IFwid3M6Ly9cIjtcbiAgICAgICAgICAgICBpZiAocm9vbS5wdWJsaWNBZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgIGVuZHBvaW50ICs9IFwiXCIuY29uY2F0KHJvb20ucHVibGljQWRkcmVzcyk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICBlbmRwb2ludCArPSBcIlwiLmNvbmNhdCh0aGlzLnNldHRpbmdzLmhvc3RuYW1lKS5jb25jYXQodGhpcy5nZXRFbmRwb2ludFBvcnQoKSkuY29uY2F0KHRoaXMuc2V0dGluZ3MucGF0aG5hbWUpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoZW5kcG9pbnQsIFwiL1wiKS5jb25jYXQocm9vbS5wcm9jZXNzSWQsIFwiL1wiKS5jb25jYXQocm9vbS5yb29tSWQsIFwiP1wiKS5jb25jYXQocGFyYW1zLmpvaW4oJyYnKSk7XG4gICAgICAgICB9O1xuICAgICAgICAgQ2xpZW50LnByb3RvdHlwZS5nZXRIdHRwRW5kcG9pbnQgPSBmdW5jdGlvbiAoc2VnbWVudHMpIHtcbiAgICAgICAgICAgICBpZiAoc2VnbWVudHMgPT09IHZvaWQgMCkgeyBzZWdtZW50cyA9ICcnOyB9XG4gICAgICAgICAgICAgdmFyIHBhdGggPSBzZWdtZW50cy5zdGFydHNXaXRoKFwiL1wiKSA/IHNlZ21lbnRzIDogXCIvXCIuY29uY2F0KHNlZ21lbnRzKTtcbiAgICAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoKHRoaXMuc2V0dGluZ3Muc2VjdXJlKSA/IFwiaHR0cHNcIiA6IFwiaHR0cFwiLCBcIjovL1wiKS5jb25jYXQodGhpcy5zZXR0aW5ncy5ob3N0bmFtZSkuY29uY2F0KHRoaXMuZ2V0RW5kcG9pbnRQb3J0KCkpLmNvbmNhdCh0aGlzLnNldHRpbmdzLnBhdGhuYW1lKS5jb25jYXQocGF0aCk7XG4gICAgICAgICB9O1xuICAgICAgICAgQ2xpZW50LnByb3RvdHlwZS5nZXRFbmRwb2ludFBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgcmV0dXJuICh0aGlzLnNldHRpbmdzLnBvcnQgIT09IDgwICYmIHRoaXMuc2V0dGluZ3MucG9ydCAhPT0gNDQzKVxuICAgICAgICAgICAgICAgICA/IFwiOlwiLmNvbmNhdCh0aGlzLnNldHRpbmdzLnBvcnQpXG4gICAgICAgICAgICAgICAgIDogXCJcIjtcbiAgICAgICAgIH07XG4gICAgICAgICByZXR1cm4gQ2xpZW50O1xuICAgICB9KCkpO1xuXG4gICAgIHZhciBTY2hlbWFTZXJpYWxpemVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgZnVuY3Rpb24gU2NoZW1hU2VyaWFsaXplcigpIHtcbiAgICAgICAgIH1cbiAgICAgICAgIFNjaGVtYVNlcmlhbGl6ZXIucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHJhd1N0YXRlKSB7XG4gICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZGVjb2RlKHJhd1N0YXRlKTtcbiAgICAgICAgIH07XG4gICAgICAgICBTY2hlbWFTZXJpYWxpemVyLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcbiAgICAgICAgIH07XG4gICAgICAgICBTY2hlbWFTZXJpYWxpemVyLnByb3RvdHlwZS5wYXRjaCA9IGZ1bmN0aW9uIChwYXRjaGVzKSB7XG4gICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZGVjb2RlKHBhdGNoZXMpO1xuICAgICAgICAgfTtcbiAgICAgICAgIFNjaGVtYVNlcmlhbGl6ZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5zdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWyckY2hhbmdlcyddKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iucm9vdC5jbGVhclJlZnMoKTtcbiAgICAgICAgIH07XG4gICAgICAgICBTY2hlbWFTZXJpYWxpemVyLnByb3RvdHlwZS5oYW5kc2hha2UgPSBmdW5jdGlvbiAoYnl0ZXMsIGl0KSB7XG4gICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgLy8gVE9ETzogdmFsaWRhdGUgY2xpZW50L3NlcnZlciBkZWZpbml0aW5vc1xuICAgICAgICAgICAgICAgICB2YXIgcmVmbGVjdGlvbiA9IG5ldyB1bWQuUmVmbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICByZWZsZWN0aW9uLmRlY29kZShieXRlcywgaXQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSByZWZsZWN0ZWQgc3RhdGUgZnJvbSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHVtZC5SZWZsZWN0aW9uLmRlY29kZShieXRlcywgaXQpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgIH07XG4gICAgICAgICByZXR1cm4gU2NoZW1hU2VyaWFsaXplcjtcbiAgICAgfSgpKTtcblxuICAgICB2YXIgTm9uZVNlcmlhbGl6ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICBmdW5jdGlvbiBOb25lU2VyaWFsaXplcigpIHtcbiAgICAgICAgIH1cbiAgICAgICAgIE5vbmVTZXJpYWxpemVyLnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChyYXdTdGF0ZSkgeyB9O1xuICAgICAgICAgTm9uZVNlcmlhbGl6ZXIucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfTtcbiAgICAgICAgIE5vbmVTZXJpYWxpemVyLnByb3RvdHlwZS5wYXRjaCA9IGZ1bmN0aW9uIChwYXRjaGVzKSB7IH07XG4gICAgICAgICBOb25lU2VyaWFsaXplci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgICBOb25lU2VyaWFsaXplci5wcm90b3R5cGUuaGFuZHNoYWtlID0gZnVuY3Rpb24gKGJ5dGVzKSB7IH07XG4gICAgICAgICByZXR1cm4gTm9uZVNlcmlhbGl6ZXI7XG4gICAgIH0oKSk7XG5cbiAgICAgcmVnaXN0ZXJTZXJpYWxpemVyKCdzY2hlbWEnLCBTY2hlbWFTZXJpYWxpemVyKTtcbiAgICAgcmVnaXN0ZXJTZXJpYWxpemVyKCdub25lJywgTm9uZVNlcmlhbGl6ZXIpO1xuXG4gICAgIGV4cG9ydHMuQXV0aCA9IEF1dGg7XG4gICAgIGV4cG9ydHMuQ2xpZW50ID0gQ2xpZW50O1xuICAgICBleHBvcnRzLlJvb20gPSBSb29tO1xuICAgICBleHBvcnRzLlNjaGVtYVNlcmlhbGl6ZXIgPSBTY2hlbWFTZXJpYWxpemVyO1xuICAgICBleHBvcnRzLnJlZ2lzdGVyU2VyaWFsaXplciA9IHJlZ2lzdGVyU2VyaWFsaXplcjtcblxuICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4gfSkpO1xuIC8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbHlzZXVzLWNvY29zLWNyZWF0b3IuanMubWFwXG5cblxuLy8gI2VuZHJlZ2lvbiBPUklHSU5BTCBDT0RFXG5cbl9janNFeHBvcnRzID0gbW9kdWxlLmV4cG9ydHM7XG5fUHJvdG9jb2wgPSBtb2R1bGUuZXhwb3J0cy5Qcm90b2NvbDtcbl9FcnJvckNvZGUgPSBtb2R1bGUuZXhwb3J0cy5FcnJvckNvZGU7XG5fT1BFUkFUSU9OID0gbW9kdWxlLmV4cG9ydHMuT1BFUkFUSU9OO1xuX0FycmF5U2NoZW1hID0gbW9kdWxlLmV4cG9ydHMuQXJyYXlTY2hlbWE7XG5fQ29sbGVjdGlvblNjaGVtYSA9IG1vZHVsZS5leHBvcnRzLkNvbGxlY3Rpb25TY2hlbWE7XG5fQ29udGV4dCA9IG1vZHVsZS5leHBvcnRzLkNvbnRleHQ7XG5fTWFwU2NoZW1hID0gbW9kdWxlLmV4cG9ydHMuTWFwU2NoZW1hO1xuX1JlZmxlY3Rpb24gPSBtb2R1bGUuZXhwb3J0cy5SZWZsZWN0aW9uO1xuX1JlZmxlY3Rpb25GaWVsZCA9IG1vZHVsZS5leHBvcnRzLlJlZmxlY3Rpb25GaWVsZDtcbl9SZWZsZWN0aW9uVHlwZSA9IG1vZHVsZS5leHBvcnRzLlJlZmxlY3Rpb25UeXBlO1xuX1NjaGVtYSA9IG1vZHVsZS5leHBvcnRzLlNjaGVtYTtcbl9TY2hlbWFEZWZpbml0aW9uID0gbW9kdWxlLmV4cG9ydHMuU2NoZW1hRGVmaW5pdGlvbjtcbl9TZXRTY2hlbWEgPSBtb2R1bGUuZXhwb3J0cy5TZXRTY2hlbWE7XG5fZGVjb2RlID0gbW9kdWxlLmV4cG9ydHMuZGVjb2RlO1xuX2RlZmluZVR5cGVzID0gbW9kdWxlLmV4cG9ydHMuZGVmaW5lVHlwZXM7XG5fZGVwcmVjYXRlZCA9IG1vZHVsZS5leHBvcnRzLmRlcHJlY2F0ZWQ7XG5fZHVtcENoYW5nZXMgPSBtb2R1bGUuZXhwb3J0cy5kdW1wQ2hhbmdlcztcbl9lbmNvZGUwID0gbW9kdWxlLmV4cG9ydHMuZW5jb2RlO1xuX2ZpbHRlciA9IG1vZHVsZS5leHBvcnRzLmZpbHRlcjtcbl9maWx0ZXJDaGlsZHJlbiA9IG1vZHVsZS5leHBvcnRzLmZpbHRlckNoaWxkcmVuO1xuX2hhc0ZpbHRlciA9IG1vZHVsZS5leHBvcnRzLmhhc0ZpbHRlcjtcbl9yZWdpc3RlclR5cGUgPSBtb2R1bGUuZXhwb3J0cy5yZWdpc3RlclR5cGU7XG5fdHlwZSA9IG1vZHVsZS5leHBvcnRzLnR5cGU7XG5fX19lc01vZHVsZSA9IG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGU7XG5fQXV0aCA9IG1vZHVsZS5leHBvcnRzLkF1dGg7XG5fQ2xpZW50ID0gbW9kdWxlLmV4cG9ydHMuQ2xpZW50O1xuX1Jvb20gPSBtb2R1bGUuZXhwb3J0cy5Sb29tO1xuX1NjaGVtYVNlcmlhbGl6ZXIgPSBtb2R1bGUuZXhwb3J0cy5TY2hlbWFTZXJpYWxpemVyO1xuX3JlZ2lzdGVyU2VyaWFsaXplciA9IG1vZHVsZS5leHBvcnRzLnJlZ2lzdGVyU2VyaWFsaXplcjtcblxufSwge30pO1xuZXhwb3J0IHsgX2Nqc0V4cG9ydHMgYXMgZGVmYXVsdCB9O1xuZXhwb3J0IHsgX19janNNZXRhVVJMIH1cbiIsIi8vIEkgYW0gdGhlIGZhY2FkZSBtb2R1bGUgd2hvIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgQ29tbW9uSlMgbW9kdWxlICcuL2NvbHlzZXVzLmpzJ35cbmltcG9ydCB7IF9fY2pzTWV0YVVSTCBhcyByZXEgfSBmcm9tICcuL2NvbHlzZXVzLmpzJztcbmltcG9ydCBsb2FkZXIgZnJvbSAnY2NlOi9pbnRlcm5hbC9tbC9janMtbG9hZGVyLm1qcyc7XG5pZiAoIXJlcSkge1xuICAgIGxvYWRlci50aHJvd0ludmFsaWRXcmFwcGVyKCcuL2NvbHlzZXVzLmpzJywgaW1wb3J0Lm1ldGEudXJsKTtcbn1cbmxvYWRlci5yZXF1aXJlKHJlcSk7XG5leHBvcnQgKiBmcm9tICcuL2NvbHlzZXVzLmpzJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgZCB9IGZyb20gJy4vY29seXNldXMuanMnXG5leHBvcnQgeyBkIGFzIGRlZmF1bHQgfTsiLCJleHBvcnQgY29uc3QgZW51bSBFdmVudFR5cGUge1xyXG5cclxufVxyXG5cclxudHlwZSBJRXZlbnRDYWxsYmFjazxUPiA9IChkYXRhOiBUKSA9PiB2b2lkO1xyXG5cclxuaW50ZXJmYWNlIElFdmVudFN1YnNjcmliZXJzIHtcclxuICAgIFtldmVudFR5cGU6IG51bWJlcl06IEFycmF5PElFdmVudENhbGxiYWNrPGFueT4+IHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG5jbGFzcyBFdmVudFN5c3RlbSB7XHJcbiAgICBwcml2YXRlIHN1YnNjcmliZXJzOiBJRXZlbnRTdWJzY3JpYmVycyA9IHt9O1xyXG5cclxuICAgIHB1YmxpYyBwdWJsaXNoPFQ+KGV2ZW50OiBFdmVudFR5cGUsIGRhdGE6IFQpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBxdWV1ZSA9IHRoaXMuc3Vic2NyaWJlcnNbZXZlbnRdO1xyXG5cclxuICAgICAgICBpZiAoIXF1ZXVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY2Igb2YgcXVldWUpIHtcclxuICAgICAgICAgICAgY2IoZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3Vic2NyaWJlPFQ+KGV2ZW50OiBFdmVudFR5cGUsIGNhbGxiYWNrOiBJRXZlbnRDYWxsYmFjazxUPik6IElFdmVudENhbGxiYWNrPFQ+IHtcclxuICAgICAgICBpZiAoIXRoaXMuc3Vic2NyaWJlcnNbZXZlbnRdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcnNbZXZlbnRdID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnN1YnNjcmliZXJzW2V2ZW50XSEucHVzaChjYWxsYmFjayk7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiB0aGUgY2FsbGJhY2sgc28gd2UgY2FuIHVuc3Vic2NyaWJlIGZyb20gaXRcclxuICAgICAgICAvLyBUaGlzIHdheSB3ZSBjYW4gcGFzcyBhbiBhcnJvdyBmdW5jdGlvblxyXG4gICAgICAgIHJldHVybiBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdW5zdWJzY3JpYmUoZXZlbnQ6IEV2ZW50VHlwZSwgY2FsbGJhY2s/OiBJRXZlbnRDYWxsYmFjazxhbnk+KSB7XHJcbiAgICAgICAgY29uc3Qgc3VicyA9IHRoaXMuc3Vic2NyaWJlcnNbZXZlbnRdO1xyXG5cclxuICAgICAgICBpZiAoIXN1YnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJzW2V2ZW50XSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJzW2V2ZW50XSA9IHRoaXMuc3Vic2NyaWJlcnNbZXZlbnRdIS5maWx0ZXIoKHN1YkNiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViQ2IgIT09IGNhbGxiYWNrO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBHbG9iYWxFdmVudHMgPSBuZXcgRXZlbnRTeXN0ZW0oKTtcclxuXHJcbi8qKiBVc2FnZSBleGFtcGxlICovIFxyXG4vLyBTdWJzY3JpYmVcclxuLy8gY29uc3QgY2IgPSBHbG9iYWxFdmVudHMuc3Vic2NyaWJlKEV2ZW50VHlwZS5JTkZPX1VQREFURUQsIChkYXRhKSA9PiB7XHJcbi8vICBjb25zb2xlLmxvZyhkYXRhKTsgLy8ge2RhdGF9IGFscmVhZHkgaW5mZXJyZWQgYXMgc3RyaW5nXHJcbi8vIH0pO1xyXG5cclxuLy8gUHVibGlzaFxyXG4vLyBHbG9iYWxFdmVudHMucHVibGlzaChFdmVudFR5cGUuSU5GT19VUERBVEVELCAnRmVicnVhcnkgMXN0Jyk7XHJcblxyXG4vLyBVbnN1YnNjcmliZVxyXG4vLyBHbG9iYWxFdmVudHMudW5zdWJzY3JpYmUoRXZlbnRUeXBlLklORk9fVVBEQVRFRCwgY2IpOyIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSB9IGZyb20gJ2NjJztcclxuaW1wb3J0IENvbHlzZXVzIGZyb20gJ2RiOi8vY29seXNldXMtc2RrL2NvbHlzZXVzLmpzJztcclxuaW1wb3J0IHsgQ2xpZW50LCBSb29tIH0gZnJvbSAnZGI6Ly9jb2x5c2V1cy1zZGsvY29seXNldXMuanMnO1xyXG4vLyBpbXBvcnQgeyBDbGllbnQsIFJvb20gfSBmcm9tICcuLi8uLi9leHRlbnNpb25zL0NvbHlzZXVzIE11bHRpcGxheWVyIFNESy9ydW50aW1lL2NvbHlzZXVzLmpzJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdMb2R1VGVzdCcpXHJcbmV4cG9ydCBjbGFzcyBMb2R1VGVzdCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBAcHJvcGVydHkgaG9zdG5hbWUgPSBcImxvY2FsaG9zdFwiO1xyXG4gICAgQHByb3BlcnR5IHBvcnQgPSAyNTY3O1xyXG4gICAgQHByb3BlcnR5IHVzZVNTTCA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgY2xpZW50OiBDbGllbnQ7XHJcbiAgICBwcml2YXRlIHJvb206IFJvb207XHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICAvLyBJbnN0YW50aWF0ZSBDb2x5c2V1cyBDbGllbnRcclxuICAgICAgICAvLyBjb25uZWN0cyBpbnRvICh3c3x3c3MpOi8vaG9zdG5hbWVbOnBvcnRdXHJcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQ29seXNldXMuQ2xpZW50KGAke3RoaXMudXNlU1NMID8gXCJ3c3NcIiA6IFwid3NcIn06Ly8ke3RoaXMuaG9zdG5hbWV9JHsoWzQ0MywgODBdLmluY2x1ZGVzKHRoaXMucG9ydCkgfHwgdGhpcy51c2VTU0wpID8gXCJcIiA6IGA6JHt0aGlzLnBvcnR9YH1gKTtcclxuXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjbGllbnQnLCB0aGlzLmNsaWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgSm9pblJvb20oKSB7XHJcbiAgICAgICAgLy8gSm9pbiBvciBjcmVhdGUgdGhlIFwibXlfcm9vbVwiIHJvb21cclxuICAgICAgICB0aGlzLmNsaWVudC5qb2luT3JDcmVhdGUoXCJjbGFzc2ljXCIpLnRoZW4ocm9vbSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSm9pbmVkIHN1Y2Nlc3NmdWxseSFcIiwgcm9vbSk7XHJcblxyXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIHNlcnZlciBtZXNzYWdlc1xyXG4gICAgICAgICAgICByb29tLm9uTWVzc2FnZShcInBsYXllck1vdmVkXCIsIChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHttZXNzYWdlLmlkfSBtb3ZlZCB0byAoJHttZXNzYWdlLnh9LCAke21lc3NhZ2UueX0pYCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gU3RvcmUgcm9vbSByZWZlcmVuY2UgZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAgICB0aGlzLnJvb20gPSByb29tO1xyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJKb2luIGZhaWxlZDpcIiwgZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IGNvbG9yIH0gZnJvbSBcImNjXCI7XHJcblxyXG5leHBvcnQgY29uc3QgTHVkb0NvbmZpZyA9IHtcclxuXHJcbiAgICAvLyBzdl9ob3N0bmFtZTogXCJsb2NhbGhvc3RcIixcclxuICAgIC8vIHN2X3VzZVNTTDogZmFsc2UsXHJcbiAgICBzdl9ob3N0bmFtZTogXCJzZy1zZ3AtNWI0ODM5NTcuY29seXNldXMuY2xvdWRcIixcclxuICAgIHN2X3VzZVNTTDogdHJ1ZSxcclxuICAgIHN2X3BvcnQ6IDI1NjcsXHJcblxyXG4gICAgQm90RW5hYmxlOiBmYWxzZSxcclxuXHJcbiAgICBmaW5hbEdvYWxJbmRleDogNSwgLy81IG9yIDY/XHJcbiAgICBtYXhUaWxlczogNTIsXHJcbiAgICBpbml0aWFsUG9zaXRpb246IFtcclxuICAgICAgICAxLCAxNCwgMjcsIDQwXHJcbiAgICBdLFxyXG4gICAgcHJvdGVjdGVkUG9zOiBbXHJcbiAgICAgICAgOSwgMjIsIDM1LCA0OFxyXG4gICAgXSxcclxuICAgIGdvYWxQb3NpdGlvbjogW1xyXG4gICAgICAgIDUxLCAxMiwgMjUsIDM4XHJcbiAgICBdLFxyXG5cclxuICAgIG1lcmdlUHJvdGVjdGVkUG9zOiBbIC8vTWVyZ2UgaW5pdGlhbCBwb3NpdGlvbiBhbmQgcHJvdGVjdGVkIFBvc1xyXG4gICAgICAgIDEsIDksIDE0LCAyMiwgMjcsIDM1LCA0MCwgNDhcclxuICAgIF0sXHJcblxyXG4gICAgY29sb3JzUGxheWVyOiBbY29sb3IoXCJmYTAwMDBcIiksIGNvbG9yKFwiMDA1Y2ZmXCIpLCBjb2xvcihcIkZGMDBGRlwiKSwgY29sb3IoXCIwMGE3MDhcIildLFxyXG4gICAgcGxheWVyU2tpbjogWydSZWQnLCAnQmx1ZScsICdZZWxsb3cnLCAnR3JlZW4nXVxyXG59O1xyXG5cclxuZXhwb3J0IGVudW0gUGF3blRlYW0ge1xyXG4gICAgUmVkID0gMCxcclxuICAgIEJsdWUgPSAxLFxyXG4gICAgUHVycGxlID0gMixcclxuICAgIEdyZWVuID0gM1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBHYW1lRXZlbnQge1xyXG4gICAgU3RhcnRHYW1lID0gMCxcclxuICAgIFN0YXJ0VHVybiA9IDEsXHJcbiAgICBSb29sRGljZSA9IDIsXHJcbiAgICBNb3ZlUGF3biA9IDMsXHJcbiAgICBVc2VTa2lsbCA9IDQsXHJcblxyXG4gICAgRGljZVJvbGxlZCA9IDIwLFxyXG4gICAgTW92ZSA9IDIxLFxyXG4gICAgS2lsbGVkID0gMjIsXHJcblxyXG4gICAgU2tpcFR1cm4gPSAxMDAsLy9jaGVhdCwgdG9kbyByZW1vdmVcclxuICAgIEJvdEFjdGlvbiA9IDEwMSwvL2NoZWF0LCB0b2RvIHJlbW92ZVxyXG4gICAgR2FtZVN0YXRlID0gMTAyLC8vY2hlYXQsIHRvZG8gcmVtb3ZlXHJcbn0iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIEVkaXRCb3gsIE5vZGUsIFRvZ2dsZSwganMsIHYzLCBTcHJpdGUsIFNwcml0ZUZyYW1lLCBBbmltYXRpb24gfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IEx1ZG9Qb3MgfSBmcm9tICcuL0x1ZG9Qb3MnO1xyXG5pbXBvcnQgeyBMdWRvUGxheWVyIH0gZnJvbSAnLi9MdWRvUGxheWVyJztcclxuaW1wb3J0IENvbHlzZXVzIGZyb20gJ2RiOi8vY29seXNldXMtc2RrL2NvbHlzZXVzLmpzJztcclxuaW1wb3J0IHsgQ2xpZW50LCBSb29tIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9Db2x5c2V1cyBNdWx0aXBsYXllciBTREsvcnVudGltZS9jb2x5c2V1cyc7XHJcbmltcG9ydCB7IEdhbWVFdmVudCwgTHVkb0NvbmZpZyB9IGZyb20gJy4vTHVkb0NvbmZpZyc7XHJcbmltcG9ydCB7IEx1ZG9QYXduIH0gZnJvbSAnLi9MdWRvUGF3bic7XHJcbmltcG9ydCB7IEx1ZG9XYWl0aW5nUm9vbSB9IGZyb20gJy4vTHVkb1dhaXRpbmdSb29tJztcclxuaW1wb3J0IHsgTHVkb0xvYmJ5IH0gZnJvbSAnLi9MdWRvTG9iYnknO1xyXG5pbXBvcnQgeyBVc2VyRGF0YSB9IGZyb20gJy4uL0RhdGEvVXNlckRhdGEnO1xyXG5pbXBvcnQgeyBFbnVtU291bmQsIFNvdW5kQ29udHJvbGxlciB9IGZyb20gJy4uLy4uLzNyZC9Tb3VuZENvbnRyb2xsZXInO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ0x1ZG9HYW1lTWFuYWdlcicpXHJcbmV4cG9ydCBjbGFzcyBMdWRvR2FtZU1hbmFnZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIEBwcm9wZXJ0eShMdWRvTG9iYnkpXHJcbiAgICBwcml2YXRlIHVpX0xvYmJ5OiBMdWRvTG9iYnk7XHJcbiAgICBAcHJvcGVydHkoTHVkb1dhaXRpbmdSb29tKVxyXG4gICAgcHJpdmF0ZSB1aVdhaXRpbmdSb29tOiBMdWRvV2FpdGluZ1Jvb20gPSBudWxsO1xyXG5cclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgcHJpdmF0ZSBsdWRvUG9zSG9sZGVyX21haW5ib2FyZDogTm9kZTtcclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgcHJpdmF0ZSBsdWRvUG9zSG9sZGVyX0dvYWw6IE5vZGU7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHByaXZhdGUgbHVkb1BsYXllcnNIb2xkZXI6IE5vZGU7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHByaXZhdGUgbHVkb1Bvc0hvbGRlcl9Ib21lOiBOb2RlO1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwdWJsaWMgTHVkb1Bhd25Ib2xkZXI6IE5vZGU7XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwcml2YXRlIGJvYXJkTm9kZTogTm9kZTtcclxuXHJcbiAgICBAcHJvcGVydHkoRWRpdEJveClcclxuICAgIHB1YmxpYyBkaWNlQ2hlYXRFZGl0Qm94OiBFZGl0Qm94O1xyXG5cclxuICAgIEBwcm9wZXJ0eShTcHJpdGUpXHJcbiAgICBwcml2YXRlIGhvbWVTcHJpdGVzOiBTcHJpdGVbXSA9IFtdO1xyXG4gICAgQHByb3BlcnR5KFNwcml0ZUZyYW1lKVxyXG4gICAgcHJpdmF0ZSBob21lU3ByaXRlRnJhbWVzOiBTcHJpdGVGcmFtZVtdID0gW107XHJcblxyXG4gICAgQHByb3BlcnR5KFNwcml0ZSlcclxuICAgIHByaXZhdGUgZGljZVNwcml0ZTogU3ByaXRlO1xyXG4gICAgQHByb3BlcnR5KFNwcml0ZUZyYW1lKVxyXG4gICAgcHJpdmF0ZSBkaWNlU3ByaXRlRnJhbWVzOiBTcHJpdGVGcmFtZVtdID0gW107XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHByaXZhdGUgZGljZUdsb3c6IE5vZGU7XHJcbiAgICBAcHJvcGVydHkoQW5pbWF0aW9uKVxyXG4gICAgcHJpdmF0ZSBkaWNlQnRuQW5pbWF0aW9uOiBBbmltYXRpb247XHJcbiAgICBAcHJvcGVydHkoQW5pbWF0aW9uKVxyXG4gICAgcHJpdmF0ZSBkaWNlQW5pbTogQW5pbWF0aW9uO1xyXG5cclxuICAgIHB1YmxpYyBsdWRvUG9zX21haW5zOiBMdWRvUG9zW10gPSBbXTtcclxuICAgIHB1YmxpYyBsdWRvUG9zX0dvYWxzOiBMdWRvUG9zW11bXSA9IFtdO1xyXG4gICAgcHVibGljIGx1ZG9QbGF5ZXJzOiBMdWRvUGxheWVyW10gPSBbXTtcclxuICAgIHB1YmxpYyBsdWRvUG9zX0hvbWVzOiBMdWRvUG9zW11bXSA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgY2xpZW50OiBDbGllbnQ7XHJcbiAgICBwdWJsaWMgcm9vbTogUm9vbTtcclxuICAgIHB1YmxpYyBnYW1lRGF0YSA9IG51bGw7XHJcblxyXG4gICAgcHVibGljIHBsYXllcklkOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgb2Zmc2V0UGxheWVyID0gMDtcclxuICAgIHB1YmxpYyBvZmZzZXRCb2FyZCA9IDA7XHJcbiAgICBwdWJsaWMgbGFzdFBhd25Nb3ZlOiBMdWRvUGF3biA9IG51bGw7XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJJZCA9IGpzLklER2VuZXJhdG9yLmdsb2JhbC5nZXROZXdJZCgpO1xyXG4gICAgICAgIHRoaXMudWlfTG9iYnkuc2hvdyh0aGlzKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmx1ZG9Qb3NIb2xkZXJfbWFpbmJvYXJkLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMubHVkb1Bvc19tYWlucy5wdXNoKHRoaXMubHVkb1Bvc0hvbGRlcl9tYWluYm9hcmQuY2hpbGRyZW5baV0uZ2V0Q29tcG9uZW50KEx1ZG9Qb3MpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sdWRvUG9zSG9sZGVyX0dvYWwuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGE6IEx1ZG9Qb3NbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmx1ZG9Qb3NIb2xkZXJfR29hbC5jaGlsZHJlbltpXS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgYS5wdXNoKHRoaXMubHVkb1Bvc0hvbGRlcl9Hb2FsLmNoaWxkcmVuW2ldLmNoaWxkcmVuW2pdLmdldENvbXBvbmVudChMdWRvUG9zKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sdWRvUG9zX0dvYWxzLnB1c2goYSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubHVkb1Bvc0hvbGRlcl9Ib21lLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBhOiBMdWRvUG9zW10gPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5sdWRvUG9zSG9sZGVyX0hvbWUuY2hpbGRyZW5baV0uY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGEucHVzaCh0aGlzLmx1ZG9Qb3NIb2xkZXJfSG9tZS5jaGlsZHJlbltpXS5jaGlsZHJlbltqXS5nZXRDb21wb25lbnQoTHVkb1BvcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubHVkb1Bvc19Ib21lcy5wdXNoKGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmx1ZG9QbGF5ZXJzSG9sZGVyLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMubHVkb1BsYXllcnMucHVzaCh0aGlzLmx1ZG9QbGF5ZXJzSG9sZGVyLmNoaWxkcmVuW2ldLmdldENvbXBvbmVudChMdWRvUGxheWVyKSk7XHJcbiAgICAgICAgICAgIHRoaXMubHVkb1BsYXllcnNbaV0uX1N0YXJ0KHRoaXMsIGkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQ29seXNldXMuQ2xpZW50KGAke0x1ZG9Db25maWcuc3ZfdXNlU1NMID8gXCJ3c3NcIiA6IFwid3NcIn06Ly8ke0x1ZG9Db25maWcuc3ZfaG9zdG5hbWV9JHsoNDQzID09IEx1ZG9Db25maWcuc3ZfcG9ydCB8fCA4MCA9PSBMdWRvQ29uZmlnLnN2X3BvcnQgfHwgTHVkb0NvbmZpZy5zdl91c2VTU0wpID8gXCJcIiA6IGA6JHtMdWRvQ29uZmlnLnN2X3BvcnR9YH1gKTtcclxuXHJcbiAgICAgICAgdGhpcy5kaWNlQW5pbS5vbihBbmltYXRpb24uRXZlbnRUeXBlLkZJTklTSEVELCB0aGlzLm9uUm9sbERpY2VBbmltYXRpb25GaW5pc2hlZCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5kaWNlQW5pbS5nZXRTdGF0ZShcImFuaW1hdGlvbl9yb2xsRGljZVwiKS5yZXBlYXRDb3VudCA9IDI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uSm9pblJvb21DbGljaygpIHtcclxuICAgICAgICB0aGlzLmNsaWVudC5qb2luT3JDcmVhdGUoXCJjbGFzc2ljXCIsIHsgcGxheWVySWQ6IHRoaXMucGxheWVySWQgfSkudGhlbihyb29tID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJKb2luZWQgc3VjY2Vzc2Z1bGx5IVwiLCByb29tKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN0b3JlIHJvb20gcmVmZXJlbmNlIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgICAgdGhpcy5yb29tID0gcm9vbTtcclxuXHJcbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3Igc2VydmVyIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIHJvb20ub25NZXNzYWdlKFwiKlwiLCB0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHJvb20ub25MZWF2ZSh0aGlzLm9uTGVhdmVSb29tLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSm9pbiBmYWlsZWQ6XCIsIGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uSm9pblJvb21DbGljazJ2MigpIHtcclxuICAgICAgICB0aGlzLmNsaWVudC5qb2luT3JDcmVhdGUoXCIydnMyXCIsIHsgcGxheWVySWQ6IHRoaXMucGxheWVySWQgfSkudGhlbihyb29tID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJKb2luZWQgc3VjY2Vzc2Z1bGx5IVwiLCByb29tKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN0b3JlIHJvb20gcmVmZXJlbmNlIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgICAgdGhpcy5yb29tID0gcm9vbTtcclxuXHJcbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3Igc2VydmVyIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIHJvb20ub25NZXNzYWdlKFwiKlwiLCB0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHJvb20ub25MZWF2ZSh0aGlzLm9uTGVhdmVSb29tLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSm9pbiBmYWlsZWQ6XCIsIGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uQ3JlYXRlUm9vbUNsaWNrKCkge1xyXG4gICAgICAgIHRoaXMuY2xpZW50LmpvaW5PckNyZWF0ZShcIndhaXRpbmdSb29tXCIsIHsgcGxheWVySWQ6IHRoaXMucGxheWVySWQsIHNsb3RDb3VudDogMiwgZ2FtZU1vZGU6ICcydnMyJyB9KS50aGVuKHJvb20gPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZSByb29tIHN1Y2Nlc3NmdWxseSFcIiwgcm9vbSk7XHJcbiAgICAgICAgICAgIHRoaXMudWlXYWl0aW5nUm9vbS5zaG93KHRoaXMsIHRoaXMuY2xpZW50LCByb29tKTtcclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSm9pbiBmYWlsZWQ6XCIsIGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGpvaW5HYW1lUm9vbUJ5SWQocm9vbUlkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmNsaWVudC5qb2luQnlJZChyb29tSWQsIHsgcGxheWVySWQ6IHRoaXMucGxheWVySWQgfSkudGhlbihyb29tID0+IHtcclxuICAgICAgICAgICAgdGhpcy51aVdhaXRpbmdSb29tLmhpZGUoKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJKb2luZWQgc3VjY2Vzc2Z1bGx5IVwiLCByb29tKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN0b3JlIHJvb20gcmVmZXJlbmNlIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgICAgdGhpcy5yb29tID0gcm9vbTtcclxuXHJcbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3Igc2VydmVyIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIHJvb20ub25NZXNzYWdlKFwiKlwiLCB0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHJvb20ub25MZWF2ZSh0aGlzLm9uTGVhdmVSb29tLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSm9pbiBmYWlsZWQ6XCIsIGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkxlYXZlUm9vbSgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIm9uTGVhdmVSb29tXCIpO1xyXG4gICAgICAgIHRoaXMudWlfTG9iYnkuc2hvdyh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQmFja3RvTG9iYnlDbGljaygpIHtcclxuICAgICAgICB0aGlzLnVpX0xvYmJ5LnNob3codGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMucm9vbS5sZWF2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25NZXNzYWdlKG1lc3M6IEdhbWVFdmVudCwgZGF0YTogYW55KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ29uTWVzc2FnZScsIG1lc3MsIGRhdGEpO1xyXG4gICAgICAgIHN3aXRjaCAobWVzcykge1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVFdmVudC5TdGFydEdhbWU6XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblN0YXJ0R2FtZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVFdmVudC5EaWNlUm9sbGVkOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Sb2xsRGljZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVFdmVudC5TdGFydFR1cm46XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblN0YXJ0VHVybihkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBHYW1lRXZlbnQuTW92ZTpcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTW92ZVBhd24oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBHYW1lRXZlbnQuS2lsbGVkOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25LaWxsKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25TdGFydEdhbWUoZGF0YSkge1xyXG4gICAgICAgIHRoaXMubGFzdFBhd25Nb3ZlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnVpX0xvYmJ5LmhpZGUoKTtcclxuICAgICAgICB0aGlzLmdhbWVEYXRhID0gZGF0YTtcclxuXHJcbiAgICAgICAgdGhpcy5sdWRvUGxheWVycy5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICBlLkRpc2FibGUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKFVzZXJEYXRhLnVzZXJMb2NhbERhdGEuc3RhdGljUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXRQbGF5ZXIgPSBkYXRhLnBsYXllcnNbdGhpcy5yb29tLnNlc3Npb25JZF0udGVhbTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldFBsYXllciA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoaXMub2Zmc2V0Qm9hcmQgPSB0aGlzLm9mZnNldFBsYXllciAqIChMdWRvQ29uZmlnLm1heFRpbGVzIC8gNCk7XHJcbiAgICAgICAgdGhpcy5ib2FyZE5vZGUuYW5nbGUgPSB0aGlzLm9mZnNldFBsYXllciAqIDkwO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIm9mZnNldFBsYXllclwiLCB0aGlzLm9mZnNldFBsYXllcik7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ob21lU3ByaXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBpICsgdGhpcy5vZmZzZXRQbGF5ZXI7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSB0aGlzLmhvbWVTcHJpdGVzLmxlbmd0aCkgaW5kZXggLT0gdGhpcy5ob21lU3ByaXRlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuaG9tZVNwcml0ZXNbaV0uc3ByaXRlRnJhbWUgPSB0aGlzLmhvbWVTcHJpdGVGcmFtZXNbaW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcHJvZmlsZXNfa2V5cyA9IE9iamVjdC5rZXlzKGRhdGEucGxheWVycyk7XHJcbiAgICAgICAgcHJvZmlsZXNfa2V5cy5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmdldEx1ZG9QbGF5ZXIoZGF0YS5wbGF5ZXJzW2VdLnRlYW0pLkluaXQoZGF0YS5wbGF5ZXJzW2VdLCBlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGVja0RpY2VCdG4odGhpcy5nZXRMdWRvUGxheWVyKGRhdGEucGxheWVyVHVybikuaXNNZSk7XHJcblxyXG4gICAgICAgIHRoaXMuQ2hlY2tTaGllbGRlZCgpO1xyXG4gICAgICAgIHRoaXMuQ2hlY2tMYXlvdXRQYXduKCk7XHJcbiAgICAgICAgdGhpcy5DaGVja0xheWVyUGF3bigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDaGVja1NoaWVsZGVkKCkge1xyXG4gICAgICAgIHRoaXMubHVkb1BsYXllcnMuZm9yRWFjaChlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUubm9kZS5hY3RpdmUpXHJcbiAgICAgICAgICAgICAgICBlLmx1ZG9QYXducy5mb3JFYWNoKGYgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGYuY2hlY2tTaGllbGRlZCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENoZWNrTGF5b3V0UGF3bigpIHtcclxuXHJcbiAgICAgICAgbGV0IG0gPSBuZXcgTWFwPHN0cmluZywgTHVkb1Bhd25bXT4oKTtcclxuXHJcbiAgICAgICAgdGhpcy5sdWRvUGxheWVycy5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS5ub2RlLmFjdGl2ZSlcclxuICAgICAgICAgICAgICAgIGUubHVkb1Bhd25zLmZvckVhY2goZiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYucGF3bkRhdGEuYm9hcmRJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZi5jaGVja0xheW91dCgwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gZi5wYXduRGF0YS5ib2FyZEluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmLnBhd25EYXRhLmluSG9tZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgKz0gXCJfXCIgKyBmLnBhd25EYXRhLmluSG9tZS50b1N0cmluZygpICsgXCJfXCIgKyBmLnBhd25EYXRhLnRlYW0udG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZ2V0KGtleSkucHVzaChmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnI6IEx1ZG9QYXduW10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zZXQoa2V5LCBhcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG0uZm9yRWFjaCgodmFsdWU6IEx1ZG9QYXduW10sIGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGUuY2hlY2tMYXlvdXQoaSwgdmFsdWUubGVuZ3RoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDaGVja0xheWVyUGF3bigpIHtcclxuICAgICAgICB0aGlzLkx1ZG9QYXduSG9sZGVyLmNoaWxkcmVuLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYVBvcyA9IGEuZ2V0V29ybGRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICBjb25zdCBiUG9zID0gYi5nZXRXb3JsZFBvc2l0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoTWF0aC5yb3VuZChhUG9zLnkpID4gTWF0aC5yb3VuZChiUG9zLnkpKSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKE1hdGgucm91bmQoYVBvcy55KSA8IE1hdGgucm91bmQoYlBvcy55KSkgcmV0dXJuIDE7XHJcblxyXG4gICAgICAgICAgICBpZiAoTWF0aC5yb3VuZChhUG9zLngpID4gTWF0aC5yb3VuZChiUG9zLngpKSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKE1hdGgucm91bmQoYVBvcy54KSA8IE1hdGgucm91bmQoYlBvcy54KSkgcmV0dXJuIDE7XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuZ2V0Q29tcG9uZW50KEx1ZG9QYXduKS5sYXlvdXRJbmRleCAtIGIuZ2V0Q29tcG9uZW50KEx1ZG9QYXduKS5sYXlvdXRJbmRleDtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBSb2xsRGljZSgpIHtcclxuICAgICAgICB2YXIgbiA9ICt0aGlzLmRpY2VDaGVhdEVkaXRCb3guc3RyaW5nO1xyXG4gICAgICAgIGlmIChuID4gMCAmJiBuIDwgNykge1xyXG4gICAgICAgICAgICB0aGlzLnJvb20uc2VuZChHYW1lRXZlbnQuUm9vbERpY2UsIG4pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vbS5zZW5kKEdhbWVFdmVudC5Sb29sRGljZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbGFzdERpY2VSb2xsID0gbnVsbDtcclxuICAgIHByaXZhdGUgb25Sb2xsRGljZShkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5sYXN0RGljZVJvbGwgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuZGljZUJ0bkFuaW1hdGlvbi5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZGljZUdsb3cuYWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuZGljZUFuaW0uc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuZGljZUFuaW0ucGxheSgpO1xyXG4gICAgICAgIFNvdW5kQ29udHJvbGxlci5JbnN0YW5jZS5QbGF5U291bmQoRW51bVNvdW5kLnNmeF9yb2xsX2RpY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Sb2xsRGljZUFuaW1hdGlvbkZpbmlzaGVkKHR5cGU6IEFuaW1hdGlvbi5FdmVudFR5cGUsIHN0YXRlKSB7XHJcbiAgICAgICAgdGhpcy5sdWRvUGxheWVycy5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS5ub2RlLmFjdGl2ZSAmJiBlLnBsYXllcklkID09IHRoaXMubGFzdERpY2VSb2xsLnBsYXllcklkKSBlLm9uUm9sbERpY2UodGhpcy5sYXN0RGljZVJvbGwuZGljZVJvbGwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZGljZVNwcml0ZS5zcHJpdGVGcmFtZSA9IHRoaXMuZGljZVNwcml0ZUZyYW1lc1t0aGlzLmxhc3REaWNlUm9sbC5kaWNlUm9sbF07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEJvdEFjdGlvbigpIHtcclxuICAgICAgICB2YXIgbiA9ICt0aGlzLmRpY2VDaGVhdEVkaXRCb3guc3RyaW5nO1xyXG4gICAgICAgIGlmIChuID4gMCAmJiBuIDwgNykge1xyXG4gICAgICAgICAgICB0aGlzLnJvb20uc2VuZChHYW1lRXZlbnQuQm90QWN0aW9uLCBuKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJvb20uc2VuZChHYW1lRXZlbnQuQm90QWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFJlcXVlc3RHYW1lU3RhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5yb29tLnNlbmQoR2FtZUV2ZW50LkdhbWVTdGF0ZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBTa2lwVHVybigpIHtcclxuICAgICAgICB0aGlzLnJvb20uc2VuZChHYW1lRXZlbnQuU2tpcFR1cm4pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25TdGFydFR1cm4oZGF0YSkge1xyXG4gICAgICAgIHRoaXMubHVkb1BsYXllcnMuZm9yRWFjaChlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUubm9kZS5hY3RpdmUpXHJcbiAgICAgICAgICAgICAgICBlLm9uU3RhcnRUdXJuKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmNoZWNrRGljZUJ0bih0aGlzLmdldEx1ZG9QbGF5ZXIoZGF0YS5wbGF5ZXJUdXJuKS5pc01lKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubGFzdFBhd25Nb3ZlICE9IG51bGwgJiYgZGF0YS5ib251c1R5cGUgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFBhd25Nb3ZlLmlzR2FpbkJvbnVzVHVybiA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBNb3ZlUGF3bihpbmRleCkge1xyXG4gICAgICAgIHRoaXMucm9vbS5zZW5kKEdhbWVFdmVudC5Nb3ZlUGF3biwgaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Nb3ZlUGF3bihkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5sdWRvUGxheWVycy5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS5ub2RlLmFjdGl2ZSAmJiBlLnBsYXllcklkID09IGRhdGEucGxheWVySWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdFBhd25Nb3ZlID0gZS5sdWRvUGF3bnNbZGF0YS5wYXduSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0UGF3bk1vdmUub25Nb3ZlUGF3bihkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25LaWxsKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmdldEx1ZG9QbGF5ZXIoZGF0YS50YXJnZXQudGVhbSkubHVkb1Bhd25zW2RhdGEudGFyZ2V0LmluZGV4XS5vbk1vdmVQYXduKGRhdGEudGFyZ2V0LCB0aGlzLmxhc3REaWNlUm9sbC5kaWNlUm9sbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEx1ZG9QbGF5ZXIodGVhbSk6IEx1ZG9QbGF5ZXIge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHRlYW0gLSB0aGlzLm9mZnNldFBsYXllcjtcclxuICAgICAgICBpZiAoaW5kZXggPCAwKSBpbmRleCArPSA0O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmx1ZG9QbGF5ZXJzW2luZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Qm9hcmRJbmRleChib2FyZEluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGJvYXJkSW5kZXggLSB0aGlzLm9mZnNldEJvYXJkO1xyXG4gICAgICAgIGlmIChpbmRleCA8IDApIGluZGV4ICs9IEx1ZG9Db25maWcubWF4VGlsZXM7XHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tEaWNlQnRuKGlzTWUpIHtcclxuICAgICAgICBpZiAoaXNNZSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpY2VCdG5BbmltYXRpb24ubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmRpY2VHbG93LmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIFNvdW5kQ29udHJvbGxlci5JbnN0YW5jZS5QbGF5U291bmQoRW51bVNvdW5kLnNmeF9jYXJfaG9ybnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGljZUJ0bkFuaW1hdGlvbi5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmRpY2VHbG93LmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgTHVkb0dhbWVNYW5hZ2VyIH0gZnJvbSAnLi9MdWRvR2FtZU1hbmFnZXInO1xyXG5pbXBvcnQgeyBVaVBvcHVwTWFuYWdlciB9IGZyb20gJy4uL1VJL1VpUG9wdXBNYW5hZ2VyJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdMdWRvTG9iYnknKVxyXG5leHBvcnQgY2xhc3MgTHVkb0xvYmJ5IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBwcml2YXRlIGx1ZG9HYW1lTWFuYWdlcjogTHVkb0dhbWVNYW5hZ2VyO1xyXG4gICAgc2hvdyhfbHVkb0dhbWVNYW5hZ2VyOiBMdWRvR2FtZU1hbmFnZXIpIHtcclxuICAgICAgICB0aGlzLmx1ZG9HYW1lTWFuYWdlciA9IF9sdWRvR2FtZU1hbmFnZXI7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZSgpIHtcclxuICAgICAgICB0aGlzLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkpvaW5Sb29tQ2xpY2soKSB7XHJcbiAgICAgICAgdGhpcy5sdWRvR2FtZU1hbmFnZXIub25Kb2luUm9vbUNsaWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkpvaW5Sb29tQ2xpY2sydjIoKSB7XHJcbiAgICAgICAgdGhpcy5sdWRvR2FtZU1hbmFnZXIub25Kb2luUm9vbUNsaWNrMnYyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNyZWF0ZVJvb21DbGljaygpIHtcclxuICAgICAgICB0aGlzLmx1ZG9HYW1lTWFuYWdlci5vbkNyZWF0ZVJvb21DbGljaygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvblNldHRpbmdDbGljaygpIHtcclxuICAgICAgICBVaVBvcHVwTWFuYWdlci5JbnN0YW5jZS5TaG93VWlTZXR0aW5nKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBCdXR0b24sIENvbXBvbmVudCwgTm9kZSwgU3ByaXRlLCBBbmltYXRpb24sIHJlc291cmNlcywgQW5pbWF0aW9uQ2xpcCwgdHdlZW4sIFR3ZWVuLCBWZWMzLCB2MywgU3ByaXRlRnJhbWUgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IEx1ZG9QbGF5ZXIgfSBmcm9tICcuL0x1ZG9QbGF5ZXInO1xyXG5pbXBvcnQgeyBMdWRvQ29uZmlnIH0gZnJvbSAnLi9MdWRvQ29uZmlnJztcclxuaW1wb3J0IHsgVXRpbGl0eSB9IGZyb20gJy4uLy4uLzNyZC9VdGlsaXR5JztcclxuaW1wb3J0IHsgRW51bVNvdW5kLCBTb3VuZENvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi8zcmQvU291bmRDb250cm9sbGVyJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdMdWRvUGF3bicpXHJcbmV4cG9ydCBjbGFzcyBMdWRvUGF3biBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgcHVibGljIGx1ZG9QbGF5ZXI6IEx1ZG9QbGF5ZXI7XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwcml2YXRlIGluZGljYXRlck5vZGU6IE5vZGU7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHByaXZhdGUgaW5kaWNhdGVyQXJyb3c6IE5vZGU7XHJcbiAgICBAcHJvcGVydHkoQnV0dG9uKVxyXG4gICAgcHJpdmF0ZSBidG46IEJ1dHRvbjtcclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgcHJpdmF0ZSB2aWV3OiBOb2RlO1xyXG4gICAgQHByb3BlcnR5KEFuaW1hdGlvbilcclxuICAgIHByaXZhdGUgc2hpZWxkQW5pbWF0aW9uOiBBbmltYXRpb247XHJcbiAgICBwcml2YXRlIF9zaGllbGRBbmltYXRpb25DdXJDbGlwID0gXCJcIjtcclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgcHJpdmF0ZSBsYXlvdXQ6IE5vZGU7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHByaXZhdGUgUm90YXRlTm9kZTogTm9kZTtcclxuXHJcbiAgICBAcHJvcGVydHkoU3ByaXRlRnJhbWUpXHJcbiAgICBwcml2YXRlIGNhclNwcml0ZUZyYW1lczogU3ByaXRlRnJhbWVbXSA9IFtdO1xyXG4gICAgQHByb3BlcnR5KFNwcml0ZUZyYW1lKVxyXG4gICAgcHJpdmF0ZSBwZXRTcHJpdGVGcmFtZXM6IFNwcml0ZUZyYW1lW10gPSBbXTtcclxuICAgIEBwcm9wZXJ0eShTcHJpdGUpXHJcbiAgICBwcml2YXRlIGNhclNwcml0ZTogU3ByaXRlO1xyXG4gICAgQHByb3BlcnR5KFNwcml0ZSlcclxuICAgIHByaXZhdGUgcGV0U3ByaXRlOiBTcHJpdGU7XHJcblxyXG4gICAgQHByb3BlcnR5KEFuaW1hdGlvbilcclxuICAgIHByaXZhdGUgYWRkVHVybkFuaW1hdGlvbjogQW5pbWF0aW9uO1xyXG5cclxuICAgIHB1YmxpYyBpbmRleDogbnVtYmVyO1xyXG4gICAgcHVibGljIHBhd25EYXRhID0gbnVsbDtcclxuICAgIHByaXZhdGUganVtcEFuaW1UaW1lTXVsdGk6IG51bWJlcjtcclxuICAgIHByaXZhdGUganVtcERlbGF5OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGFuaW1DdXJQb3M6IGFueSA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBqdW1wQW5pbVRpbWUgPSAwLjE7XHJcbiAgICBwcml2YXRlIGp1bXBIZWlnaHQgPSAyMDtcclxuICAgIHByaXZhdGUgbGF5b3V0U2l6ZSA9IDY1O1xyXG4gICAgcHVibGljIGlzR2FpbkJvbnVzVHVybiA9IGZhbHNlO1xyXG5cclxuICAgIHB1YmxpYyBfU3RhcnQoX2x1ZG9QbGF5ZXI6IEx1ZG9QbGF5ZXIsIF9pbmRleCkge1xyXG5cclxuICAgICAgICB0aGlzLmluZGV4ID0gX2luZGV4O1xyXG4gICAgICAgIHRoaXMubHVkb1BsYXllciA9IF9sdWRvUGxheWVyO1xyXG5cclxuICAgICAgICB0aGlzLmluZGljYXRlck5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5idG4ubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5zaGllbGRBbmltYXRpb24ub24oQW5pbWF0aW9uLkV2ZW50VHlwZS5GSU5JU0hFRCwgdGhpcy5vblNoaWVsZEFuaW1hdGlvbkZpbmlzaGVkLCB0aGlzKTtcclxuICAgICAgICB0aGlzLnNldFNoaWVsZEFuaW1hdGlvbihmYWxzZSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkVHVybkFuaW1hdGlvbi5vbihBbmltYXRpb24uRXZlbnRUeXBlLkZJTklTSEVELCB0aGlzLm9uQWRkdHVybkFuaW1GaW5pc2hlZCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5hZGRUdXJuQW5pbWF0aW9uLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEluaXQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGF3bkRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMubm9kZS5zZXRXb3JsZFBvc2l0aW9uKHRoaXMuZ2V0UG9zTm9kZVdvcmxkUG9zaXRpb24odGhpcy5wYXduRGF0YS5ib2FyZEluZGV4LCB0aGlzLnBhd25EYXRhLmluSG9tZSkpO1xyXG5cclxuICAgICAgICB0aGlzLnBldFNwcml0ZS5zcHJpdGVGcmFtZSA9IHRoaXMucGV0U3ByaXRlRnJhbWVzW3RoaXMucGF3bkRhdGEudGVhbV07XHJcblxyXG4gICAgICAgIHRoaXMucm90YXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFJlYWR5VG9Nb3ZlKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmluZGljYXRlck5vZGUuYWN0aXZlID0gZGF0YTtcclxuICAgICAgICB0aGlzLmJ0bi5ub2RlLmFjdGl2ZSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5pbmRpY2F0ZXJBcnJvdy5hY3RpdmUgPSBkYXRhO1xyXG4gICAgICAgIGlmIChkYXRhID09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbmRpY2F0ZXJBcnJvdy5hY3RpdmUgPSB0aGlzLmx1ZG9QbGF5ZXIuaXNNZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uQ2xpY2soKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluZGljYXRlck5vZGUuYWN0aXZlKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMubHVkb1BsYXllci5sdWRvR2FtZU1hbmFnZXIuTW92ZVBhd24odGhpcy5wYXduRGF0YS5pbmRleCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBvbk1vdmVQYXduKGRhdGEsIGRlbGF5ID0gMCkge1xyXG4gICAgICAgIHRoaXMuanVtcERlbGF5ID0gZGVsYXk7XHJcbiAgICAgICAgdGhpcy5zZXRTaGllbGRBbmltYXRpb24oZmFsc2UpO1xyXG5cclxuICAgICAgICB0aGlzLm5vZGUuc2V0U2libGluZ0luZGV4KHRoaXMubm9kZS5wYXJlbnQuY2hpbGRyZW4ubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgVHdlZW4uc3RvcEFsbEJ5VGFyZ2V0KHRoaXMubm9kZSk7XHJcbiAgICAgICAgVHdlZW4uc3RvcEFsbEJ5VGFyZ2V0KHRoaXMudmlldyk7XHJcbiAgICAgICAgVHdlZW4uc3RvcEFsbEJ5VGFyZ2V0KHRoaXMubGF5b3V0KTtcclxuXHJcbiAgICAgICAgdGhpcy52aWV3LnNldFBvc2l0aW9uKFZlYzMuWkVSTyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLnNldFdvcmxkUG9zaXRpb24odGhpcy5nZXRQb3NOb2RlV29ybGRQb3NpdGlvbih0aGlzLnBhd25EYXRhLmJvYXJkSW5kZXgsIHRoaXMucGF3bkRhdGEuaW5Ib21lKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYW5pbUN1clBvcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuYW5pbUN1clBvc1tcImJvYXJkSW5kZXhcIl0gPSB0aGlzLnBhd25EYXRhLmJvYXJkSW5kZXg7XHJcbiAgICAgICAgdGhpcy5hbmltQ3VyUG9zW1wiaW5Ib21lXCJdID0gdGhpcy5wYXduRGF0YS5pbkhvbWU7XHJcblxyXG4gICAgICAgIHRoaXMucGF3bkRhdGEuYm9hcmRJbmRleCA9IGRhdGEuYm9hcmRJbmRleDtcclxuICAgICAgICB0aGlzLnBhd25EYXRhLmluSG9tZSA9IGRhdGEuaW5Ib21lO1xyXG5cclxuICAgICAgICB0aGlzLl9tb3ZlUGF3blRvUG9zX2FuaW0odHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfbW92ZVBhd25Ub1Bvc19hbmltKGlzRmlyc3RNb3ZlID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAoaXNGaXJzdE1vdmUgIT0gdHJ1ZSkgU291bmRDb250cm9sbGVyLkluc3RhbmNlLlBsYXlTb3VuZChFbnVtU291bmQuc2Z4X3Bhd25fbW92ZSk7XHJcblxyXG4gICAgICAgIHRoaXMuYW5pbUN1clBvcyA9IHRoaXMuZ2V0TmV4dFBvcyh0cnVlLCB0aGlzLmFuaW1DdXJQb3MpO1xyXG4gICAgICAgIGlmICh0aGlzLmFuaW1DdXJQb3MgPT0gbnVsbCkgeyAvL2RvbmUgbW92aW5nXHJcbiAgICAgICAgICAgIHRoaXMubHVkb1BsYXllci5sdWRvR2FtZU1hbmFnZXIuQ2hlY2tTaGllbGRlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmx1ZG9QbGF5ZXIubHVkb0dhbWVNYW5hZ2VyLkNoZWNrTGF5b3V0UGF3bigpO1xyXG4gICAgICAgICAgICB0aGlzLmx1ZG9QbGF5ZXIubHVkb0dhbWVNYW5hZ2VyLkNoZWNrTGF5ZXJQYXduKCk7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0FkZHR1cm5BbmltKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yb3RhdGUoKTtcclxuICAgICAgICBjb25zdCBkZWxheSA9IHRoaXMuanVtcERlbGF5ICogdGhpcy5qdW1wQW5pbVRpbWUgKyB0aGlzLmp1bXBBbmltVGltZSAqIDAuMztcclxuICAgICAgICBpZiAodGhpcy5qdW1wRGVsYXkgPiAwKSB7XHJcbiAgICAgICAgICAgIFV0aWxpdHkuQXN5bmNEZWxheShkZWxheSAqIDEwMDApLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgU291bmRDb250cm9sbGVyLkluc3RhbmNlLlBsYXlTb3VuZChFbnVtU291bmQuc2Z4X2Nhcl9jcmFzaCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHR3ZWVuKHRoaXMubGF5b3V0KVxyXG4gICAgICAgICAgICAuZGVsYXkoZGVsYXkpXHJcbiAgICAgICAgICAgIC50byh0aGlzLmp1bXBBbmltVGltZSwgeyBwb3NpdGlvbjogVmVjMy5aRVJPLCBzY2FsZTogVmVjMy5PTkUgfSlcclxuICAgICAgICAgICAgLnN0YXJ0KCk7XHJcblxyXG4gICAgICAgIHR3ZWVuKHRoaXMubm9kZSlcclxuICAgICAgICAgICAgLmRlbGF5KGRlbGF5KVxyXG4gICAgICAgICAgICAudG8odGhpcy5qdW1wQW5pbVRpbWUgKiB0aGlzLmp1bXBBbmltVGltZU11bHRpLCB7IHdvcmxkUG9zaXRpb246IHRoaXMuZ2V0UG9zTm9kZVdvcmxkUG9zaXRpb24odGhpcy5hbmltQ3VyUG9zLmJvYXJkSW5kZXgsIHRoaXMuYW5pbUN1clBvcy5pbkhvbWUpIH0pXHJcbiAgICAgICAgICAgIC5jYWxsKHRoaXMuX21vdmVQYXduVG9Qb3NfYW5pbS5iaW5kKHRoaXMpKVxyXG4gICAgICAgICAgICAuc3RhcnQoKTtcclxuXHJcbiAgICAgICAgbGV0IHQxID0gdHdlZW4odGhpcy52aWV3KVxyXG4gICAgICAgICAgICAudG8oKHRoaXMuanVtcEFuaW1UaW1lICogdGhpcy5qdW1wQW5pbVRpbWVNdWx0aSkgLyAyXHJcbiAgICAgICAgICAgICAgICAsIHsgcG9zaXRpb246IHYzKDAsIHRoaXMuanVtcEhlaWdodCAqIHRoaXMuanVtcEFuaW1UaW1lTXVsdGksIDApIH1cclxuICAgICAgICAgICAgICAgICwgeyBlYXNpbmc6IFwicXVhZE91dFwiIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbGV0IHQyID0gdHdlZW4odGhpcy52aWV3KVxyXG4gICAgICAgICAgICAudG8oKHRoaXMuanVtcEFuaW1UaW1lICogdGhpcy5qdW1wQW5pbVRpbWVNdWx0aSkgLyAyXHJcbiAgICAgICAgICAgICAgICAsIHsgcG9zaXRpb246IHYzKDAsIDAsIDApIH1cclxuICAgICAgICAgICAgICAgICwgeyBlYXNpbmc6IFwicXVhZEluXCIgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICB0d2Vlbih0aGlzLnZpZXcpLmRlbGF5KGRlbGF5KS5zZXF1ZW5jZSh0MSwgdDIpLnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQb3NOb2RlV29ybGRQb3NpdGlvbihib2FyZEluZGV4LCBpbkhvbWUpOiBWZWMzIHtcclxuICAgICAgICBpZiAoYm9hcmRJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubHVkb1BsYXllci5sdWRvR2FtZU1hbmFnZXIubHVkb1Bvc19Ib21lc1t0aGlzLmx1ZG9QbGF5ZXIucGF3blRlYW1dW01hdGguYWJzKGJvYXJkSW5kZXgpIC0gMV0ubm9kZS5nZXRXb3JsZFBvc2l0aW9uKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGluSG9tZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubHVkb1BsYXllci5sdWRvR2FtZU1hbmFnZXIubHVkb1Bvc19Hb2Fsc1t0aGlzLnBhd25EYXRhLnRlYW1dW2JvYXJkSW5kZXhdLm5vZGUuZ2V0V29ybGRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX2IgPSB0aGlzLmx1ZG9QbGF5ZXIubHVkb0dhbWVNYW5hZ2VyLmdldEJvYXJkSW5kZXgoYm9hcmRJbmRleCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sdWRvUGxheWVyLmx1ZG9HYW1lTWFuYWdlci5sdWRvUG9zX21haW5zW19iXS5ub2RlLmdldFdvcmxkUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE5leHRQb3MoaXNBbmltOiBib29sZWFuLCBhbmltQ3VyUG9zKTogYW55IHtcclxuICAgICAgICBpZiAoaXNBbmltKSB0aGlzLmp1bXBBbmltVGltZU11bHRpID0gMTtcclxuXHJcbiAgICAgICAgaWYgKGFuaW1DdXJQb3MuYm9hcmRJbmRleCA+PSBMdWRvQ29uZmlnLmZpbmFsR29hbEluZGV4ICYmIGFuaW1DdXJQb3MuaW5Ib21lID09IHRydWUpIHtcclxuICAgICAgICAgICAgYW5pbUN1clBvcyA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBhbmltQ3VyUG9zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzQW5pbSAmJiBhbmltQ3VyUG9zLmJvYXJkSW5kZXggPT0gdGhpcy5wYXduRGF0YS5ib2FyZEluZGV4ICYmIGFuaW1DdXJQb3MuaW5Ib21lID09IHRoaXMucGF3bkRhdGEuaW5Ib21lKSB7XHJcbiAgICAgICAgICAgIGFuaW1DdXJQb3MgPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gYW5pbUN1clBvcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhd25EYXRhLmJvYXJkSW5kZXggPCAwIHx8IGFuaW1DdXJQb3MuYm9hcmRJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgYW5pbUN1clBvcy5ib2FyZEluZGV4ID0gdGhpcy5wYXduRGF0YS5ib2FyZEluZGV4O1xyXG4gICAgICAgICAgICBhbmltQ3VyUG9zLmluSG9tZSA9IHRoaXMucGF3bkRhdGEuaW5Ib21lO1xyXG4gICAgICAgICAgICBpZiAoaXNBbmltKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmp1bXBBbmltVGltZU11bHRpID0gMztcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhd25EYXRhLmJvYXJkSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIFNvdW5kQ29udHJvbGxlci5JbnN0YW5jZS5QbGF5U291bmQoRW51bVNvdW5kLnNmeF9jYXJfbW92ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFuaW1DdXJQb3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYW5pbUN1clBvcy5pbkhvbWUgPT0gZmFsc2UgJiYgYW5pbUN1clBvcy5ib2FyZEluZGV4ID09IEx1ZG9Db25maWcuZ29hbFBvc2l0aW9uW3RoaXMucGF3bkRhdGEudGVhbV0pIHtcclxuICAgICAgICAgICAgYW5pbUN1clBvcy5ib2FyZEluZGV4ID0gMDtcclxuICAgICAgICAgICAgYW5pbUN1clBvcy5pbkhvbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gYW5pbUN1clBvcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFuaW1DdXJQb3MuYm9hcmRJbmRleCArPSAxO1xyXG4gICAgICAgIGlmIChhbmltQ3VyUG9zLmJvYXJkSW5kZXggPj0gTHVkb0NvbmZpZy5tYXhUaWxlcykgYW5pbUN1clBvcy5ib2FyZEluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFuaW1DdXJQb3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxheW91dEluZGV4ID0gMDtcclxuICAgIHB1YmxpYyBjaGVja0xheW91dChpbmRleDogbnVtYmVyLCB0b3RhbDogbnVtYmVyKSB7XHJcbiAgICAgICAgVHdlZW4uc3RvcEFsbEJ5VGFyZ2V0KHRoaXMubGF5b3V0KTtcclxuICAgICAgICB0aGlzLmxheW91dEluZGV4ID0gaW5kZXg7XHJcblxyXG4gICAgICAgIHZhciBtaWRQb2ludCA9IHRvdGFsIC8gMiAtIDAuNTtcclxuICAgICAgICB2YXIgcG9zID0gKG1pZFBvaW50IC0gaW5kZXgpICogKHRoaXMubGF5b3V0U2l6ZSAvIHRvdGFsKTtcclxuXHJcbiAgICAgICAgdmFyIHNjYWxlID0gMC40ICsgMC42IC8gdG90YWw7XHJcblxyXG4gICAgICAgIHR3ZWVuKHRoaXMubGF5b3V0KVxyXG4gICAgICAgICAgICAudG8odGhpcy5qdW1wQW5pbVRpbWUsIHsgcG9zaXRpb246IHYzKHBvcywgMCwgMCksIHNjYWxlOiB2MyhzY2FsZSwgc2NhbGUsIHNjYWxlKSB9KVxyXG4gICAgICAgICAgICAuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2hlY2tTaGllbGRlZCgpIHtcclxuICAgICAgICB0aGlzLnNldFNoaWVsZEFuaW1hdGlvbih0aGlzLl9jaGVja1NoaWVsZGVkKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NoZWNrU2hpZWxkZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMubHVkb1BsYXllci5wbGF5ZXJEYXRhLnRlYW1tYXRlID09IG51bGwgfHwgdGhpcy5sdWRvUGxheWVyLnBsYXllckRhdGEudGVhbW1hdGUgPT0gLTEpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5wYXduRGF0YS5pbkhvbWUpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGF3bkRhdGEuYm9hcmRJbmRleCA8IDApIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKEx1ZG9Db25maWcucHJvdGVjdGVkUG9zLmluZGV4T2YodGhpcy5wYXduRGF0YS5ib2FyZEluZGV4KSA+PSAwKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAoTHVkb0NvbmZpZy5pbml0aWFsUG9zaXRpb24uaW5kZXhPZih0aGlzLnBhd25EYXRhLmJvYXJkSW5kZXgpID49IDApIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLmx1ZG9QbGF5ZXIubHVkb0dhbWVNYW5hZ2VyLmdldEx1ZG9QbGF5ZXIodGhpcy5sdWRvUGxheWVyLnBsYXllckRhdGEudGVhbW1hdGUpLmx1ZG9QYXducztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gYXJyYXlbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAoZS5wYXduRGF0YS5ib2FyZEluZGV4IDwgMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChlLnBhd25EYXRhLmluSG9tZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUucGF3bkRhdGEuYm9hcmRJbmRleCA9PSAwICYmIHRoaXMucGF3bkRhdGEuYm9hcmRJbmRleCA9PSBMdWRvQ29uZmlnLmdvYWxQb3NpdGlvbltlLmx1ZG9QbGF5ZXIucGxheWVyRGF0YS50ZWFtXSkgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChlLnBhd25EYXRhLmJvYXJkSW5kZXggPT0gdGhpcy5wYXduRGF0YS5ib2FyZEluZGV4KSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlXHJcbiAgICAgICAgICAgIGlmIChlLnBhd25EYXRhLmJvYXJkSW5kZXggPT0gMCAmJiB0aGlzLnBhd25EYXRhLmJvYXJkSW5kZXggPT0gKEx1ZG9Db25maWcubWF4VGlsZXMgLSAxKSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGlmIChlLnBhd25EYXRhLmJvYXJkSW5kZXggPT0gKEx1ZG9Db25maWcubWF4VGlsZXMgLSAxKSAmJiB0aGlzLnBhd25EYXRhLmJvYXJkSW5kZXggPT0gMCkgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoZS5wYXduRGF0YS5ib2FyZEluZGV4ID09IHRoaXMucGF3bkRhdGEuYm9hcmRJbmRleCAtIDEpIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoZS5wYXduRGF0YS5ib2FyZEluZGV4ID09IHRoaXMucGF3bkRhdGEuYm9hcmRJbmRleCArIDEpIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFNoaWVsZEFuaW1hdGlvbihpc0FjdGl2ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmIChpc0FjdGl2ZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NoaWVsZEFuaW1hdGlvbkN1ckNsaXAgPT0gXCJhbmltYXRpb25fc2hpZWxkX2lkbGVfb25cIikgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGllbGRBbmltYXRpb25DdXJDbGlwID0gXCJhbmltYXRpb25fc2hpZWxkX29uXCI7XHJcbiAgICAgICAgICAgIGlmICh0aGlzID09IHRoaXMubHVkb1BsYXllci5sdWRvR2FtZU1hbmFnZXIubGFzdFBhd25Nb3ZlKSBTb3VuZENvbnRyb2xsZXIuSW5zdGFuY2UuUGxheVNvdW5kKEVudW1Tb3VuZC5zZnhfZ2Fpbl9zaGllbGQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zaGllbGRBbmltYXRpb25DdXJDbGlwID09IFwiYW5pbWF0aW9uX3NoaWVsZF9pZGxlX29mZlwiKSByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuX3NoaWVsZEFuaW1hdGlvbkN1ckNsaXAgPSBcImFuaW1hdGlvbl9zaGllbGRfb2ZmXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNoaWVsZEFuaW1hdGlvbi5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5zaGllbGRBbmltYXRpb24ucGxheSh0aGlzLl9zaGllbGRBbmltYXRpb25DdXJDbGlwKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uU2hpZWxkQW5pbWF0aW9uRmluaXNoZWQodHlwZTogQW5pbWF0aW9uLkV2ZW50VHlwZSwgc3RhdGUpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2hpZWxkQW5pbWF0aW9uQ3VyQ2xpcCA9PSBcImFuaW1hdGlvbl9zaGllbGRfb25cIikge1xyXG4gICAgICAgICAgICB0aGlzLl9zaGllbGRBbmltYXRpb25DdXJDbGlwID0gXCJhbmltYXRpb25fc2hpZWxkX2lkbGVfb25cIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3NoaWVsZEFuaW1hdGlvbkN1ckNsaXAgPT0gXCJhbmltYXRpb25fc2hpZWxkX29mZlwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoaWVsZEFuaW1hdGlvbkN1ckNsaXAgPSBcImFuaW1hdGlvbl9zaGllbGRfaWRsZV9vZmZcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNoaWVsZEFuaW1hdGlvbi5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5zaGllbGRBbmltYXRpb24ucGxheSh0aGlzLl9zaGllbGRBbmltYXRpb25DdXJDbGlwKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJvdGF0ZSgpIHtcclxuICAgICAgICBjb25zdCBsb29rTGVmdCA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jYXJTcHJpdGUuc3ByaXRlRnJhbWUgPSB0aGlzLmNhclNwcml0ZUZyYW1lc1t0aGlzLnBhd25EYXRhLnRlYW1dO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5Sb3RhdGVOb2RlLnNldFNjYWxlKFZlYzMuT05FKTtcclxuICAgICAgICAgICAgdGhpcy5Sb3RhdGVOb2RlLnNldFBvc2l0aW9uKFZlYzMuWkVSTyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhclNwcml0ZS5ub2RlLnBhcmVudC5zZXRQb3NpdGlvbihWZWMzLlpFUk8pO1xyXG4gICAgICAgICAgICB0aGlzLmluZGljYXRlck5vZGUuc2V0Um90YXRpb25Gcm9tRXVsZXIoVmVjMy5aRVJPKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbG9va1JpZ2h0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNhclNwcml0ZS5zcHJpdGVGcmFtZSA9IHRoaXMuY2FyU3ByaXRlRnJhbWVzW3RoaXMucGF3bkRhdGEudGVhbV07XHJcblxyXG4gICAgICAgICAgICB0aGlzLlJvdGF0ZU5vZGUuc2V0U2NhbGUodjMoLTEsIDEsIDEpKTtcclxuICAgICAgICAgICAgdGhpcy5Sb3RhdGVOb2RlLnNldFBvc2l0aW9uKFZlYzMuWkVSTyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhclNwcml0ZS5ub2RlLnBhcmVudC5zZXRQb3NpdGlvbihWZWMzLlpFUk8pO1xyXG4gICAgICAgICAgICB0aGlzLmluZGljYXRlck5vZGUuc2V0Um90YXRpb25Gcm9tRXVsZXIoVmVjMy5aRVJPKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbG9va1VwID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNhclNwcml0ZS5zcHJpdGVGcmFtZSA9IHRoaXMuY2FyU3ByaXRlRnJhbWVzW3RoaXMucGF3bkRhdGEudGVhbSArIDhdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5Sb3RhdGVOb2RlLnNldFNjYWxlKFZlYzMuT05FKTtcclxuICAgICAgICAgICAgdGhpcy5Sb3RhdGVOb2RlLnNldFBvc2l0aW9uKFZlYzMuWkVSTyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhclNwcml0ZS5ub2RlLnBhcmVudC5zZXRQb3NpdGlvbih2MygtMywgMCwgMCkpO1xyXG4gICAgICAgICAgICB0aGlzLmluZGljYXRlck5vZGUuc2V0Um90YXRpb25Gcm9tRXVsZXIodjMoMCwgMCwgLTkwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxvb2tEb3duID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNhclNwcml0ZS5zcHJpdGVGcmFtZSA9IHRoaXMuY2FyU3ByaXRlRnJhbWVzW3RoaXMucGF3bkRhdGEudGVhbSArIDRdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5Sb3RhdGVOb2RlLnNldFNjYWxlKFZlYzMuT05FKTtcclxuICAgICAgICAgICAgdGhpcy5Sb3RhdGVOb2RlLnNldFBvc2l0aW9uKHYzKC0yLCAwLCAwKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhclNwcml0ZS5ub2RlLnBhcmVudC5zZXRQb3NpdGlvbih2MygtMywgMCwgMCkpO1xyXG4gICAgICAgICAgICB0aGlzLmluZGljYXRlck5vZGUuc2V0Um90YXRpb25Gcm9tRXVsZXIodjMoMCwgMCwgOTApKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhd25EYXRhLmJvYXJkSW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5sdWRvUGxheWVyLnBhd25UZWFtKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgbG9va1JpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgbG9va0Rvd24oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBsb29rTGVmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBsb29rVXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgYW5pbUN1clBvcyA9IHt9O1xyXG4gICAgICAgIGFuaW1DdXJQb3NbXCJib2FyZEluZGV4XCJdID0gdGhpcy5wYXduRGF0YS5ib2FyZEluZGV4O1xyXG4gICAgICAgIGFuaW1DdXJQb3NbXCJpbkhvbWVcIl0gPSB0aGlzLnBhd25EYXRhLmluSG9tZTtcclxuXHJcbiAgICAgICAgYW5pbUN1clBvcyA9IHRoaXMuZ2V0TmV4dFBvcyhmYWxzZSwgYW5pbUN1clBvcyk7XHJcbiAgICAgICAgaWYgKGFuaW1DdXJQb3MgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMubHVkb1BsYXllci5wYXduVGVhbSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGxvb2tVcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGxvb2tSaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGxvb2tEb3duKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGxvb2tMZWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgX25leHRQb3MgPSB0aGlzLmdldFBvc05vZGVXb3JsZFBvc2l0aW9uKGFuaW1DdXJQb3NbXCJib2FyZEluZGV4XCJdLCBhbmltQ3VyUG9zW1wiaW5Ib21lXCJdKTtcclxuICAgICAgICBjb25zdCBfY3VyUG9zID0gdGhpcy5ub2RlLmdldFdvcmxkUG9zaXRpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKE1hdGgucm91bmQoX25leHRQb3MueSkgPiBNYXRoLnJvdW5kKF9jdXJQb3MueSkpIHtcclxuICAgICAgICAgICAgbG9va1VwKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChNYXRoLnJvdW5kKF9uZXh0UG9zLnkpIDwgTWF0aC5yb3VuZChfY3VyUG9zLnkpKSB7XHJcbiAgICAgICAgICAgIGxvb2tEb3duKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChNYXRoLnJvdW5kKF9uZXh0UG9zLngpID4gTWF0aC5yb3VuZChfY3VyUG9zLngpKSB7XHJcbiAgICAgICAgICAgIGxvb2tSaWdodCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5yb3VuZChfbmV4dFBvcy54KSA8IE1hdGgucm91bmQoX2N1clBvcy54KSkge1xyXG4gICAgICAgICAgICBsb29rTGVmdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxvb2tMZWZ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2hvd0FkZHR1cm5BbmltKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0dhaW5Cb251c1R1cm4pIHJldHVybjtcclxuICAgICAgICB0aGlzLmlzR2FpbkJvbnVzVHVybiA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFR1cm5BbmltYXRpb24ubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYWRkVHVybkFuaW1hdGlvbi5wbGF5KCk7XHJcbiAgICAgICAgU291bmRDb250cm9sbGVyLkluc3RhbmNlLlBsYXlTb3VuZChFbnVtU291bmQuc2Z4X2dhaW5fdHVybik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG9uQWRkdHVybkFuaW1GaW5pc2hlZCh0eXBlOiBBbmltYXRpb24uRXZlbnRUeXBlLCBzdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuYWRkVHVybkFuaW1hdGlvbi5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5hZGRUdXJuQW5pbWF0aW9uLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBCdXR0b24sIENvbXBvbmVudCwgTGFiZWwsIE5vZGUsIFNwcml0ZSwgU3ByaXRlRnJhbWUsIHYzIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBMdWRvUGF3biB9IGZyb20gJy4vTHVkb1Bhd24nO1xyXG5pbXBvcnQgeyBMdWRvR2FtZU1hbmFnZXIgfSBmcm9tICcuL0x1ZG9HYW1lTWFuYWdlcic7XHJcbmltcG9ydCB7IEx1ZG9Db25maWcsIFBhd25UZWFtIH0gZnJvbSAnLi9MdWRvQ29uZmlnJztcclxuaW1wb3J0IHsgVXNlckRhdGEgfSBmcm9tICcuLi9EYXRhL1VzZXJEYXRhJztcclxuaW1wb3J0IHsgRW51bVNvdW5kLCBTb3VuZENvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi8zcmQvU291bmRDb250cm9sbGVyJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdMdWRvUGxheWVyJylcclxuZXhwb3J0IGNsYXNzIEx1ZG9QbGF5ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgcHJpdmF0ZSB5b3VyVHVybl9nbG93OiBOb2RlO1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwcml2YXRlIHlvdXJUdXJuX2ZsYWc6IE5vZGU7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHByaXZhdGUgcGF3bnNIb2xkZXI6IE5vZGU7XHJcblxyXG4gICAgQHByb3BlcnR5KFNwcml0ZSlcclxuICAgIHByaXZhdGUgYXZhU3ByaXRlOiBTcHJpdGU7XHJcblxyXG4gICAgQHByb3BlcnR5KFNwcml0ZSlcclxuICAgIHByaXZhdGUgYXZhT3V0bGluZVNwcml0ZTogU3ByaXRlO1xyXG4gICAgQHByb3BlcnR5KFNwcml0ZUZyYW1lKVxyXG4gICAgcHJpdmF0ZSBhdmFPdXRsaW5lU3ByaXRlRnJhbWVzOiBTcHJpdGVGcmFtZVtdID0gW107XHJcblxyXG4gICAgQHByb3BlcnR5KFNwcml0ZSlcclxuICAgIHByaXZhdGUgbmFtZU91dGxpbmVTcHJpdGU6IFNwcml0ZTtcclxuICAgIEBwcm9wZXJ0eShTcHJpdGVGcmFtZSlcclxuICAgIHByaXZhdGUgbmFtZU91dGxpbmVTcHJpdGVGcmFtZTogU3ByaXRlRnJhbWVbXSA9IFtdO1xyXG5cclxuICAgIEBwcm9wZXJ0eShMYWJlbClcclxuICAgIHByaXZhdGUgbmFtZUxhYmVsOiBMYWJlbDtcclxuXHJcbiAgICBwdWJsaWMgbHVkb1Bhd25zOiBMdWRvUGF3bltdID0gW107XHJcblxyXG4gICAgcHVibGljIGx1ZG9HYW1lTWFuYWdlcjogTHVkb0dhbWVNYW5hZ2VyO1xyXG4gICAgcHVibGljIHBhd25UZWFtOiBQYXduVGVhbTtcclxuICAgIHB1YmxpYyBpc01lID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgcGxheWVySWQgPSBcIlwiO1xyXG4gICAgcHVibGljIHBsYXllckRhdGEgPSBudWxsO1xyXG5cclxuICAgIHB1YmxpYyBfU3RhcnQoX2x1ZG9HYW1lTWFuYWdlcjogTHVkb0dhbWVNYW5hZ2VyLCBfcGF3blRlYW06IFBhd25UZWFtKSB7XHJcblxyXG4gICAgICAgIHRoaXMubHVkb0dhbWVNYW5hZ2VyID0gX2x1ZG9HYW1lTWFuYWdlcjtcclxuICAgICAgICB0aGlzLnBhd25UZWFtID0gX3Bhd25UZWFtO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF3bnNIb2xkZXIuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5sdWRvUGF3bnMucHVzaCh0aGlzLnBhd25zSG9sZGVyLmNoaWxkcmVuW2ldLmdldENvbXBvbmVudChMdWRvUGF3bikpO1xyXG4gICAgICAgICAgICB0aGlzLmx1ZG9QYXduc1tpXS5fU3RhcnQodGhpcywgaSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmx1ZG9QYXducy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBlbGVtZW50Lm5vZGUuc2V0UGFyZW50KHRoaXMubHVkb0dhbWVNYW5hZ2VyLkx1ZG9QYXduSG9sZGVyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy55b3VyVHVybl9nbG93LmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMueW91clR1cm5fZmxhZy5hY3RpdmUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgSW5pdChkYXRhLCBfcGxheWVySWQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGxheWVySWQgPSBfcGxheWVySWQ7XHJcbiAgICAgICAgdGhpcy5pc01lID0gX3BsYXllcklkID09IHRoaXMubHVkb0dhbWVNYW5hZ2VyLnJvb20uc2Vzc2lvbklkO1xyXG4gICAgICAgIHRoaXMucGxheWVyRGF0YSA9IGRhdGE7XHJcblxyXG4gICAgICAgIHRoaXMubmFtZUxhYmVsLnN0cmluZyA9IChQYXduVGVhbVt0aGlzLnBsYXllckRhdGEudGVhbV0pLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgdGhpcy5hdmFPdXRsaW5lU3ByaXRlLnNwcml0ZUZyYW1lID0gdGhpcy5hdmFPdXRsaW5lU3ByaXRlRnJhbWVzW3RoaXMucGxheWVyRGF0YS50ZWFtXTtcclxuICAgICAgICB0aGlzLm5hbWVPdXRsaW5lU3ByaXRlLnNwcml0ZUZyYW1lID0gdGhpcy5uYW1lT3V0bGluZVNwcml0ZUZyYW1lW3RoaXMucGxheWVyRGF0YS50ZWFtXTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNNZSkge1xyXG4gICAgICAgICAgICB0aGlzLmF2YVNwcml0ZS5ub2RlLnBhcmVudC5zZXRTY2FsZSh2MygxLjYsIDEuNiwgMSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXZhU3ByaXRlLm5vZGUucGFyZW50LnNldFNjYWxlKHYzKDEsIDEsIDEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMub25TdGFydFR1cm4odGhpcy5sdWRvR2FtZU1hbmFnZXIuZ2FtZURhdGEpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEucGF3bnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IGRhdGEucGF3bnNbaV07XHJcbiAgICAgICAgICAgIHRoaXMubHVkb1Bhd25zW2UuaW5kZXhdLkluaXQoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBEaXNhYmxlKCkge1xyXG4gICAgICAgIHRoaXMucGxheWVySWQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmx1ZG9QYXducy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBlbGVtZW50Lm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uUm9sbERpY2UoZGF0YSkge1xyXG4gICAgICAgIHZhciB0b3RhbE1vdmVBYmxlUGF3biA9IDA7XHJcbiAgICAgICAgdGhpcy5sdWRvUGF3bnMuZm9yRWFjaChlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUucGF3bkRhdGEuYm9hcmRJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhID09IDYpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLlJlYWR5VG9Nb3ZlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsTW92ZUFibGVQYXduKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlLlJlYWR5VG9Nb3ZlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLnBhd25EYXRhLmluSG9tZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnBhd25EYXRhLmJvYXJkSW5kZXggKyBkYXRhID4gTHVkb0NvbmZpZy5maW5hbEdvYWxJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLlJlYWR5VG9Nb3ZlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLlJlYWR5VG9Nb3ZlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbE1vdmVBYmxlUGF3bisrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5SZWFkeVRvTW92ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbE1vdmVBYmxlUGF3bisrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0b3RhbE1vdmVBYmxlUGF3biA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubHVkb0dhbWVNYW5hZ2VyLlNraXBUdXJuKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTWUpIHtcclxuICAgICAgICAgICAgU291bmRDb250cm9sbGVyLkluc3RhbmNlLlBsYXlTb3VuZChFbnVtU291bmQuc2Z4X2Nhcl9zdGFydCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvblN0YXJ0VHVybihkYXRhKSB7XHJcbiAgICAgICAgdGhpcy55b3VyVHVybl9nbG93LmFjdGl2ZSA9IHRoaXMgPT0gdGhpcy5sdWRvR2FtZU1hbmFnZXIuZ2V0THVkb1BsYXllcihkYXRhLnBsYXllclR1cm4pO1xyXG4gICAgICAgIHRoaXMueW91clR1cm5fZmxhZy5hY3RpdmUgPSB0aGlzLnlvdXJUdXJuX2dsb3cuYWN0aXZlO1xyXG5cclxuICAgICAgICB0aGlzLmx1ZG9QYXducy5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICBlLlJlYWR5VG9Nb3ZlKGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSB9IGZyb20gJ2NjJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdMdWRvUG9zJylcclxuZXhwb3J0IGNsYXNzIEx1ZG9Qb3MgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgc3RhcnQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTGFiZWwsIE5vZGUgfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcbmltcG9ydCB7IENsaWVudCwgUm9vbSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvQ29seXNldXMgTXVsdGlwbGF5ZXIgU0RLL3J1bnRpbWUvY29seXNldXMnO1xyXG5pbXBvcnQgeyBMdWRvR2FtZU1hbmFnZXIgfSBmcm9tICcuLi9MdWRvL0x1ZG9HYW1lTWFuYWdlcic7XHJcbkBjY2NsYXNzKCdMdWRvV2FpdGluZ1Jvb20nKVxyXG5leHBvcnQgY2xhc3MgTHVkb1dhaXRpbmdSb29tIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHBsYXllcjFOb2RlOiBOb2RlO1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwbGF5ZXIyTm9kZTogTm9kZTtcclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgc3RhcnRCdG46IE5vZGU7XHJcblxyXG4gICAgcHJpdmF0ZSByb29tOiBSb29tID0gbnVsbDtcclxuICAgIHByaXZhdGUgY2xpZW50OiBDbGllbnQ7XHJcbiAgICBwcml2YXRlIG1hbmFnZXI6IEx1ZG9HYW1lTWFuYWdlcjtcclxuICAgIHNob3cobWFuYWdlcjogTHVkb0dhbWVNYW5hZ2VyLCBjbGllbnQ6IENsaWVudCwgcm9vbTogUm9vbSkge1xyXG4gICAgICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XHJcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XHJcbiAgICAgICAgdGhpcy5yb29tID0gcm9vbTtcclxuICAgICAgICByb29tLm9uTWVzc2FnZShcIipcIiwgdGhpcy5vbk1lc3NhZ2UuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHJvb20ub25MZWF2ZSh0aGlzLm9uTGVhdmVSb29tLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLnBsYXllcjFOb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGxheWVyMk5vZGUuYWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25NZXNzYWdlKG1lc3M6IHN0cmluZywgZGF0YTogYW55KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ29uTWVzc2FnZScsIG1lc3MsIGRhdGEpO1xyXG4gICAgICAgIHN3aXRjaCAobWVzcykge1xyXG4gICAgICAgICAgICBjYXNlIFwicGxheWVySm9pbmVkXCI6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzUm9vbU1hc3RlciA9IGRhdGEucm9vbU1hc3RlciA9PT0gdGhpcy5tYW5hZ2VyLnBsYXllcklkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEJ0bi5hY3RpdmUgPSBpc1Jvb21NYXN0ZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZmlsZXNfa2V5cyA9IE9iamVjdC5rZXlzKGRhdGEucGxheWVycyk7XHJcbiAgICAgICAgICAgICAgICBwcm9maWxlc19rZXlzLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXIgPSBkYXRhLnBsYXllcnNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncCcsIHBsYXllciwga2V5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWFuYWdlci5wbGF5ZXJJZCA9PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIxTm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllcjFOb2RlLmdldENvbXBvbmVudEluQ2hpbGRyZW4oTGFiZWwpLnN0cmluZyA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllcjJOb2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyMk5vZGUuZ2V0Q29tcG9uZW50SW5DaGlsZHJlbihMYWJlbCkuc3RyaW5nID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcblxyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibWF0Y2htYWtpbmdTdGFydGVkXCI6IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiam9pbkdhbWVSb29tXCI6IHRoaXMubWFuYWdlci5qb2luR2FtZVJvb21CeUlkKGRhdGEucm9vbUlkKTsgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBvbkxlYXZlUm9vbSgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIm9uTGVhdmVSb29tXCIpO1xyXG4gICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25MZWF2ZVJvb21DbGljaygpIHtcclxuICAgICAgICB0aGlzLnJvb20ubGVhdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uU3RhcnRHYW1lQ2xpY2soKSB7XHJcbiAgICAgICAgdGhpcy5yb29tLnNlbmQoJ3N0YXJ0Jyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsIlxyXG5pbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIE5vZGUsIHR3ZWVuLCB2MywgVUlPcGFjaXR5LCBDQ0ludGVnZXIsIENDT2JqZWN0IH0gZnJvbSAnY2MnO1xyXG4vLyBpbXBvcnQgeyBFbnVtU291bmQsIFNvdW5kQ29udHJvbGxlciB9IGZyb20gJy4uL0dhbWVwbGF5L1NvdW5kQ29udHJvbGxlcic7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKipcclxuICogUHJlZGVmaW5lZCB2YXJpYWJsZXNcclxuICogTmFtZSA9IFBvcFVwQmFzZVxyXG4gKiBEYXRlVGltZSA9IEZyaSBEZWMgMjQgMjAyMSAwNzoxNjo0NiBHTVQrMDcwMCAoSW5kb2NoaW5hIFRpbWUpXHJcbiAqIEF1dGhvciA9IGFjYWMxNTgxXHJcbiAqIEZpbGVCYXNlbmFtZSA9IFBvcFVwQmFzZS50c1xyXG4gKiBGaWxlQmFzZW5hbWVOb0V4dGVuc2lvbiA9IFBvcFVwQmFzZVxyXG4gKiBVUkwgPSBkYjovL2Fzc2V0cy9TY3JpcHQvdXRpbGl0eS9Qb3BVcEJhc2UudHNcclxuICogTWFudWFsVXJsID0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yLzMuMy9tYW51YWwvZW4vXHJcbiAqXHJcbiAqL1xyXG5cclxuQGNjY2xhc3MoJ1BvcFVwQmFzZScpXHJcbmV4cG9ydCBjbGFzcyBQb3BVcEJhc2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgU2NhbGVOb2RlOiBOb2RlO1xyXG5cclxuICAgIEBwcm9wZXJ0eShVSU9wYWNpdHkpXHJcbiAgICBmYWRlVUlPcGFjaXR5OiBVSU9wYWNpdHk7XHJcblxyXG4gICAgQHByb3BlcnR5KENDSW50ZWdlcilcclxuICAgIHB1YmxpYyBvcmRlcjogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwdWJsaWMgT25TaG93KGNiID0gbnVsbCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGUuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLlNjYWxlTm9kZSkgdGhpcy5TY2FsZU5vZGUuc2V0U2NhbGUoMSwgMSwgMSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZhZGVVSU9wYWNpdHkpIHRoaXMuZmFkZVVJT3BhY2l0eS5vcGFjaXR5ID0gMjU1O1xyXG4gICAgICAgICAgICB0aGlzLkNhbGxBY3Rpb24oY2IpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5TY2FsZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuU2NhbGVOb2RlLnNldFNjYWxlKDAuNSwgMC41LCAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdHdlZW4odGhpcy5TY2FsZU5vZGUpLnRvKDAuMywgeyBzY2FsZTogdjMoMSwgMSwgMSkgfSwgeyBlYXNpbmc6ICdiYWNrT3V0JyB9KS5jYWxsKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkNhbGxBY3Rpb24oY2IpO1xyXG4gICAgICAgICAgICAgICAgfSkuc3RhcnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5mYWRlVUlPcGFjaXR5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZhZGVVSU9wYWNpdHkub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0d2Vlbih0aGlzLmZhZGVVSU9wYWNpdHkpLnRvKDAuMiwgeyBvcGFjaXR5OiAyNTUgfSkuY2FsbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLlNjYWxlTm9kZSkgdGhpcy5DYWxsQWN0aW9uKGNiKTtcclxuICAgICAgICAgICAgICAgIH0pLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLlNjYWxlTm9kZSAmJiAhdGhpcy5mYWRlVUlPcGFjaXR5KSB0aGlzLkNhbGxBY3Rpb24oY2IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgT25IaWRlKGNiID0gbnVsbCwgaXNQbGF5U291bmQgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm5vZGUuYWN0aXZlKSByZXR1cm47XHJcbiAgICAgICAgLy8gaWYgKFNvdW5kQ29udHJvbGxlci5JbnN0YW5jZSAmJiBpc1BsYXlTb3VuZCkgU291bmRDb250cm9sbGVyLkluc3RhbmNlLlBsYXlTb3VuZChFbnVtU291bmQuR2FtZVVJX2Nsb3NlcG9wdXApO1xyXG4gICAgICAgIGlmICh0aGlzLlNjYWxlTm9kZSkge1xyXG4gICAgICAgICAgICB0d2Vlbih0aGlzLlNjYWxlTm9kZSkudG8oMC4zLCB7IHNjYWxlOiB2MygwLjUsIDAuNSwgMC41KSB9LCB7IGVhc2luZzogJ2NpcmNPdXQnIH0pLmNhbGwoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5DYWxsQWN0aW9uKGNiKTtcclxuICAgICAgICAgICAgfSkuc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZmFkZVVJT3BhY2l0eSkge1xyXG4gICAgICAgICAgICB0d2Vlbih0aGlzLmZhZGVVSU9wYWNpdHkpLnRvKDAuMiwgeyBvcGFjaXR5OiAwIH0pLmNhbGwoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLlNjYWxlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkNhbGxBY3Rpb24oY2IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuU2NhbGVOb2RlICYmICF0aGlzLmZhZGVVSU9wYWNpdHkpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLkNhbGxBY3Rpb24oY2IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jYkhpZGU/LigpO1xyXG4gICAgICAgIHRoaXMuY2JIaWRlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIENhbGxBY3Rpb24oY2IpIHtcclxuICAgICAgICBpZiAoY2IpIGNiKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjYkhpZGUgOiBGdW5jdGlvbiA9IG51bGw7XHJcbiAgICBwdWJsaWMgU2V0Q2FsbGJhY2tIaWRlKGNiSGlkZTpGdW5jdGlvbil7XHJcbiAgICAgICAgdGhpcy5jYkhpZGUgPSBjYkhpZGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBbMV0gQ2xhc3MgbWVtYmVyIGNvdWxkIGJlIGRlZmluZWQgbGlrZSB0aGlzLlxyXG4gKiBbMl0gVXNlIGBwcm9wZXJ0eWAgZGVjb3JhdG9yIGlmIHlvdXIgd2FudCB0aGUgbWVtYmVyIHRvIGJlIHNlcmlhbGl6YWJsZS5cclxuICogWzNdIFlvdXIgaW5pdGlhbGl6YXRpb24gZ29lcyBoZXJlLlxyXG4gKiBbNF0gWW91ciB1cGRhdGUgZnVuY3Rpb24gZ29lcyBoZXJlLlxyXG4gKlxyXG4gKiBMZWFybiBtb3JlIGFib3V0IHNjcmlwdGluZzogaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yLzMuMy9tYW51YWwvZW4vc2NyaXB0aW5nL1xyXG4gKiBMZWFybiBtb3JlIGFib3V0IENDQ2xhc3M6IGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci8zLjMvbWFudWFsL2VuL3NjcmlwdGluZy9jY2NsYXNzLmh0bWxcclxuICogTGVhcm4gbW9yZSBhYm91dCBsaWZlLWN5Y2xlIGNhbGxiYWNrczogaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yLzMuMy9tYW51YWwvZW4vc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcclxuICovXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSwgQXVkaW9Tb3VyY2UsIEF1ZGlvQ2xpcCwgZGlyZWN0b3IgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IFVzZXJEYXRhIH0gZnJvbSAnLi4vU2NyaXB0cy9EYXRhL1VzZXJEYXRhJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKlxyXG4gKiBQcmVkZWZpbmVkIHZhcmlhYmxlc1xyXG4gKiBOYW1lID0gU291bmRDb250cm9sbGVyXHJcbiAqIERhdGVUaW1lID0gU2F0IERlYyAyNSAyMDIxIDA4OjQ2OjU1IEdNVCswNzAwIChJbmRvY2hpbmEgVGltZSlcclxuICogQXV0aG9yID0gYWNhYzE1ODFcclxuICogRmlsZUJhc2VuYW1lID0gU291bmRDb250cm9sbGVyLnRzXHJcbiAqIEZpbGVCYXNlbmFtZU5vRXh0ZW5zaW9uID0gU291bmRDb250cm9sbGVyXHJcbiAqIFVSTCA9IGRiOi8vYXNzZXRzL1NjcmlwdC9HYW1lcGxheS9Tb3VuZENvbnRyb2xsZXIudHNcclxuICogTWFudWFsVXJsID0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yLzMuMy9tYW51YWwvZW4vXHJcbiAqXHJcbiAqL1xyXG5cclxuZXhwb3J0IGVudW0gRW51bVNvdW5kIHtcclxuICAgIEJHTV8xLFxyXG4gICAgR2FtZVVJX2J1dHRvbl9jbGljayxcclxuICAgIHNmeF9jYXJfY3Jhc2gsXHJcbiAgICBzZnhfY2FyX3N0YXJ0LFxyXG4gICAgc2Z4X2Nhcl9ob3JucyxcclxuICAgIHNmeF9jYXJfbW92ZSxcclxuICAgIHNmeF9nYWluX3R1cm4sXHJcbiAgICBzZnhfcm9sbF9kaWNlLFxyXG4gICAgc2Z4X3Bhd25fbW92ZSxcclxuICAgIHNmeF9nYWluX3NoaWVsZFxyXG59XHJcblxyXG5AY2NjbGFzcygnU291bmRDb250cm9sbGVyJylcclxuZXhwb3J0IGNsYXNzIFNvdW5kQ29udHJvbGxlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBwdWJsaWMgc3RhdGljIEluc3RhbmNlOiBTb3VuZENvbnRyb2xsZXI7XHJcblxyXG4gICAgQHByb3BlcnR5KEF1ZGlvU291cmNlKVxyXG4gICAgcHJpdmF0ZSBCZ011c2ljOiBBdWRpb1NvdXJjZTtcclxuXHJcbiAgICBAcHJvcGVydHkoQXVkaW9Tb3VyY2UpXHJcbiAgICBwcml2YXRlIFNvdW5kRlg6IEF1ZGlvU291cmNlO1xyXG5cclxuICAgIEBwcm9wZXJ0eShBdWRpb0NsaXApXHJcbiAgICBwcml2YXRlIEF1ZGlvQ2xpcHM6IEF1ZGlvQ2xpcFtdID0gW107XHJcblxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIGlmIChTb3VuZENvbnRyb2xsZXIuSW5zdGFuY2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBTb3VuZENvbnRyb2xsZXIuSW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgICAgICBkaXJlY3Rvci5hZGRQZXJzaXN0Um9vdE5vZGUodGhpcy5ub2RlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5VcGRhdGVTb3VuZFN0YXRlKCk7XHJcbiAgICAgICAgdGhpcy5TZXRCZ011c2ljKEVudW1Tb3VuZC5CR01fMSk7XHJcbiAgICB9XHJcblxyXG4gICAgVXBkYXRlU291bmRTdGF0ZSgpIHtcclxuICAgICAgICB0aGlzLkJnTXVzaWMudm9sdW1lID0gVXNlckRhdGEudXNlckxvY2FsRGF0YS5tdXNpY09uID8gMC43IDogMDtcclxuICAgIH1cclxuXHJcbiAgICBQbGF5U291bmQoZTogRW51bVNvdW5kLCB2b2x1bWU6IG51bWJlciA9IDEpIHtcclxuICAgICAgICBpZiAoVXNlckRhdGEudXNlckxvY2FsRGF0YS5zb3VuZE9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuU291bmRGWC5sb29wID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuU291bmRGWC5wbGF5T25lU2hvdCh0aGlzLkF1ZGlvQ2xpcHNbZV0sIHZvbHVtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFBsYXlTb3VuZExvb3AoZTogRW51bVNvdW5kLCB2b2x1bWU6IG51bWJlciA9IDEpIHtcclxuICAgICAgICBpZiAoVXNlckRhdGEudXNlckxvY2FsRGF0YS5zb3VuZE9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuU291bmRGWC52b2x1bWUgPSB2b2x1bWU7XHJcbiAgICAgICAgICAgIHRoaXMuU291bmRGWC5sb29wID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5Tb3VuZEZYLmNsaXAgPSB0aGlzLkF1ZGlvQ2xpcHNbZV07XHJcbiAgICAgICAgICAgIHRoaXMuU291bmRGWC5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFN0b3BTb3VuZExvb3AoKSB7XHJcbiAgICAgICAgdGhpcy5Tb3VuZEZYLnN0b3AoKTtcclxuICAgIH1cclxuXHJcbiAgICBTZXRCZ011c2ljKGU6IEVudW1Tb3VuZCkge1xyXG4gICAgICAgIHRoaXMuQmdNdXNpYy5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5CZ011c2ljLmxvb3AgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuQmdNdXNpYy5jbGlwID0gdGhpcy5BdWRpb0NsaXBzW2VdO1xyXG4gICAgICAgIHRoaXMuQmdNdXNpYy5wbGF5KCk7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlLCBVSVRyYW5zZm9ybSwgdmlldywgQ0NGbG9hdCB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgVXRpbGl0eSB9IGZyb20gJy4vVXRpbGl0eSc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKipcclxuICogUHJlZGVmaW5lZCB2YXJpYWJsZXNcclxuICogTmFtZSA9IFVJRml0V2lkdGhIZWxwZXJcclxuICogRGF0ZVRpbWUgPSBGcmkgSmFuIDI4IDIwMjIgMDY6NDQ6NTggR01UKzA3MDAgKEluZG9jaGluYSBUaW1lKVxyXG4gKiBBdXRob3IgPSBhY2FjMTU4MVxyXG4gKiBGaWxlQmFzZW5hbWUgPSBVSUZpdFdpZHRoSGVscGVyLnRzXHJcbiAqIEZpbGVCYXNlbmFtZU5vRXh0ZW5zaW9uID0gVUlGaXRXaWR0aEhlbHBlclxyXG4gKiBVUkwgPSBkYjovL2Fzc2V0cy9TY3JpcHQvdXRpbGl0eS9VSUZpdFdpZHRoSGVscGVyLnRzXHJcbiAqIE1hbnVhbFVybCA9IGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci8zLjQvbWFudWFsL2VuL1xyXG4gKlxyXG4gKi9cclxuXHJcbi8vVXNlIHRoaXMgZm9yIFVpIGVsZW1lbnQgbmVlZCBGaXQgV2lkdGggb24gYSBGaXQgSGVpZ2h0IHByb2plY3QgKHJlcXVpcmUgVXRpbGl0eSBzY3JpcHQgaXMgaW4gcHJvamVjdClcclxuQGNjY2xhc3MoJ1VJRml0V2lkdGhIZWxwZXInKVxyXG5leHBvcnQgY2xhc3MgVUlGaXRXaWR0aEhlbHBlciBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgQHByb3BlcnR5KFVJVHJhbnNmb3JtKVxyXG4gICAgcHJpdmF0ZSBjYW52YXNUb0ZpdDogVUlUcmFuc2Zvcm07XHJcblxyXG4gICAgcHJpdmF0ZSBiYXNlU2NhbGUgPSAxO1xyXG4gICAgcHJpdmF0ZSBkZXNpZ25XaWR0aCA9IDIwMDE7XHJcblxyXG4gICAgQHByb3BlcnR5KENDRmxvYXQpXHJcbiAgICBwcml2YXRlIEhhcmRDb2RlV2lkdGg6IG51bWJlciA9IC0xO1xyXG5cclxuICAgIHB1YmxpYyBjYWxsYmFja3M6IEZ1bmN0aW9uW10gPSBbXTtcclxuICAgIHByaXZhdGUgZnJhbWVDb3VudCA9IDA7XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5kZXNpZ25XaWR0aCA9IHZpZXcuZ2V0RGVzaWduUmVzb2x1dGlvblNpemUoKS53aWR0aDtcclxuICAgICAgICBpZiAodGhpcy5IYXJkQ29kZVdpZHRoID09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuSGFyZENvZGVXaWR0aCA9IHRoaXMuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKS53aWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFV0aWxpdHkuYWRkUmVzaXplQ2FsbEJhY2sodGhpcy5ub2RlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVXBkYXRlU2l6ZSgyMDApO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYmFzZVNjYWxlID0gdGhpcy5ub2RlLnNjYWxlLng7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uRW5hYmxlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZnJhbWVDb3VudCA9IDI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWVDb3VudCA8PSAwKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5mcmFtZUNvdW50LS07XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWVDb3VudCA8PSAwKSB0aGlzLl91cGRhdGVTaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBVcGRhdGVTaXplKGRlbGF5OiBudW1iZXIpIHtcclxuICAgICAgICBVdGlsaXR5LkFzeW5jRGVsYXkoZGVsYXkpLnRoZW4odGhpcy5fdXBkYXRlU2l6ZS5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91cGRhdGVTaXplKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhc1RvRml0ID09IG51bGwpIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5IYXJkQ29kZVdpZHRoID4gdGhpcy5jYW52YXNUb0ZpdC53aWR0aCkge1xyXG4gICAgICAgICAgICBsZXQgc2NhbGUgPSB0aGlzLmJhc2VTY2FsZSAqICh0aGlzLmNhbnZhc1RvRml0LndpZHRoIC8gdGhpcy5kZXNpZ25XaWR0aCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5zZXRTY2FsZShzY2FsZSwgc2NhbGUsIDEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5zZXRTY2FsZSh0aGlzLmJhc2VTY2FsZSwgdGhpcy5iYXNlU2NhbGUsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuZm9yRWFjaChlID0+IHtcclxuICAgICAgICAgICAgZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgICAgICBVdGlsaXR5LnJlbW92ZVJlc2l6ZUNhbGxCYWNrKHRoaXMubm9kZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBbMV0gQ2xhc3MgbWVtYmVyIGNvdWxkIGJlIGRlZmluZWQgbGlrZSB0aGlzLlxyXG4gKiBbMl0gVXNlIGBwcm9wZXJ0eWAgZGVjb3JhdG9yIGlmIHlvdXIgd2FudCB0aGUgbWVtYmVyIHRvIGJlIHNlcmlhbGl6YWJsZS5cclxuICogWzNdIFlvdXIgaW5pdGlhbGl6YXRpb24gZ29lcyBoZXJlLlxyXG4gKiBbNF0gWW91ciB1cGRhdGUgZnVuY3Rpb24gZ29lcyBoZXJlLlxyXG4gKlxyXG4gKiBMZWFybiBtb3JlIGFib3V0IHNjcmlwdGluZzogaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yLzMuNC9tYW51YWwvZW4vc2NyaXB0aW5nL1xyXG4gKiBMZWFybiBtb3JlIGFib3V0IENDQ2xhc3M6IGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci8zLjQvbWFudWFsL2VuL3NjcmlwdGluZy9jY2NsYXNzLmh0bWxcclxuICogTGVhcm4gbW9yZSBhYm91dCBsaWZlLWN5Y2xlIGNhbGxiYWNrczogaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yLzMuNC9tYW51YWwvZW4vc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcclxuICovXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgZ2FtZSwgTm9kZSB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgVXNlckRhdGEgfSBmcm9tICcuLi9EYXRhL1VzZXJEYXRhJztcclxuaW1wb3J0IHsgVWlTZXR0aW5nIH0gZnJvbSAnLi9VaVNldHRpbmcnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ1VpUG9wdXBNYW5hZ2VyJylcclxuZXhwb3J0IGNsYXNzIFVpUG9wdXBNYW5hZ2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIEluc3RhbmNlOiBVaVBvcHVwTWFuYWdlcjtcclxuXHJcbiAgICBAcHJvcGVydHkoVWlTZXR0aW5nKSBwcml2YXRlIHVpU2V0dGluZzogVWlTZXR0aW5nO1xyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBpZiAoVWlQb3B1cE1hbmFnZXIuSW5zdGFuY2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBVaVBvcHVwTWFuYWdlci5JbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIGdhbWUuYWRkUGVyc2lzdFJvb3ROb2RlKHRoaXMubm9kZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBVc2VyRGF0YS5Mb2FkVXNlckxvY2FsRGF0YSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTaG93VWlTZXR0aW5nKCkge1xyXG4gICAgICAgIHRoaXMudWlTZXR0aW5nLlNob3coKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSwgVG9nZ2xlIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBVc2VyRGF0YSB9IGZyb20gJy4uL0RhdGEvVXNlckRhdGEnO1xyXG5pbXBvcnQgeyBBY2NvdW50TWFuYWdlciB9IGZyb20gJy4uL0RhdGEvQWNjb3VudE1hbmFnZXInO1xyXG5pbXBvcnQgeyBTb3VuZENvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi8zcmQvU291bmRDb250cm9sbGVyJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdVaVNldHRpbmcnKVxyXG5leHBvcnQgY2xhc3MgVWlTZXR0aW5nIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBAcHJvcGVydHkoVG9nZ2xlKVxyXG4gICAgcHVibGljIHN0YXRpY1Bvc2l0aW9uVG9nZ2xlOiBUb2dnbGU7XHJcbiAgICBAcHJvcGVydHkoVG9nZ2xlKVxyXG4gICAgcHVibGljIG11c2ljVG9nZ2xlOiBUb2dnbGU7XHJcbiAgICBAcHJvcGVydHkoVG9nZ2xlKVxyXG4gICAgcHVibGljIHNvdW5kVG9nZ2xlOiBUb2dnbGU7XHJcblxyXG5cclxuXHJcbiAgICBwdWJsaWMgU2hvdygpIHtcclxuICAgICAgICB0aGlzLm5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0aWNQb3NpdGlvblRvZ2dsZS5pc0NoZWNrZWQgPSBVc2VyRGF0YS51c2VyTG9jYWxEYXRhLnN0YXRpY1Bvc2l0aW9uO1xyXG4gICAgICAgIHRoaXMubXVzaWNUb2dnbGUuaXNDaGVja2VkID0gVXNlckRhdGEudXNlckxvY2FsRGF0YS5tdXNpY09uO1xyXG4gICAgICAgIHRoaXMuc291bmRUb2dnbGUuaXNDaGVja2VkID0gVXNlckRhdGEudXNlckxvY2FsRGF0YS5zb3VuZE9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBIaWRlKCkge1xyXG4gICAgICAgIFVzZXJEYXRhLnVzZXJMb2NhbERhdGEubXVzaWNPbiA9IHRoaXMubXVzaWNUb2dnbGUuaXNDaGVja2VkO1xyXG4gICAgICAgIFVzZXJEYXRhLnVzZXJMb2NhbERhdGEuc291bmRPbiA9IHRoaXMuc291bmRUb2dnbGUuaXNDaGVja2VkO1xyXG4gICAgICAgIFVzZXJEYXRhLnVzZXJMb2NhbERhdGEuc3RhdGljUG9zaXRpb24gPSB0aGlzLnN0YXRpY1Bvc2l0aW9uVG9nZ2xlLmlzQ2hlY2tlZDtcclxuICAgICAgICBVc2VyRGF0YS5TYXZlVXNlckxvY2FsRGF0YSgpO1xyXG5cclxuICAgICAgICBTb3VuZENvbnRyb2xsZXIuSW5zdGFuY2UuVXBkYXRlU291bmRTdGF0ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvZ2luKCkge1xyXG4gICAgICAgIEFjY291bnRNYW5hZ2VyLkluc3RhbmNlLkxvZ2luVGVsZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlLCBzeXMgfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlckRhdGEge1xyXG4gICAgcHVibGljIHN0YXRpYyB1c2VyTG9jYWxEYXRhOiBVc2VyTG9jYWxEYXRhID0ge1xyXG4gICAgICAgIG11c2ljT246IHRydWUsXHJcbiAgICAgICAgc291bmRPbjogdHJ1ZSxcclxuICAgICAgICBjaGFuZ2VfbG9nX3ZlcnNpb246IFwiXCIsXHJcbiAgICAgICAgc3RhdGljUG9zaXRpb246IHRydWVcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBMb2FkVXNlckxvY2FsRGF0YSgpIHtcclxuICAgICAgICBsZXQgZGF0YSA9IHN5cy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJMb2NhbERhdGFcIik7XHJcbiAgICAgICAgaWYgKGRhdGEgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgIT0gJycgJiYgZGF0YSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXNlckxvY2FsRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgU2F2ZVVzZXJMb2NhbERhdGEoKSB7XHJcbiAgICAgICAgc3lzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidXNlckxvY2FsRGF0YVwiLCBKU09OLnN0cmluZ2lmeSh0aGlzLnVzZXJMb2NhbERhdGEpKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlckxvY2FsRGF0YSB7XHJcbiAgICBtdXNpY09uOiBib29sZWFuO1xyXG4gICAgc291bmRPbjogYm9vbGVhbjtcclxuICAgIGNoYW5nZV9sb2dfdmVyc2lvbjogc3RyaW5nO1xyXG4gICAgc3RhdGljUG9zaXRpb246IGJvb2xlYW47XHJcbn0iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBTcHJpdGUsIHR3ZWVuLCBUd2VlbiwgTm9kZSwgUGFydGljbGVTeXN0ZW0sIENvbG9yLCB2aWV3LCBBbmltYXRpb24sIF9fcHJpdmF0ZSB9IGZyb20gJ2NjJztcclxuLyoqXHJcbiAqIFByZWRlZmluZWQgdmFyaWFibGVzXHJcbiAqIE5hbWUgPSBVdGlsaXR5XHJcbiAqIERhdGVUaW1lID0gU2F0IERlYyAxMSAyMDIxIDIwOjM3OjA4IEdNVCswNzAwIChJbmRvY2hpbmEgVGltZSlcclxuICogQXV0aG9yID0gYWNhYzE1ODFcclxuICogRmlsZUJhc2VuYW1lID0gVXRpbGl0eS50c1xyXG4gKiBGaWxlQmFzZW5hbWVOb0V4dGVuc2lvbiA9IFV0aWxpdHlcclxuICogVVJMID0gZGI6Ly9hc3NldHMvU2NyaXB0L3V0aWxpdHkvVXRpbGl0eS50c1xyXG4gKiBNYW51YWxVcmwgPSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvMy4zL21hbnVhbC9lbi9cclxuICpcclxuICovXHJcblxyXG5leHBvcnQgY2xhc3MgVXRpbGl0eSB7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgUmVzaXplQ2FsbGJhY2sgPSAwO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgUmVzaXplQ2JNYXA6IE1hcDxOb2RlLCBGdW5jdGlvbj4gPSBuZXcgTWFwKCk7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpc1NldENhbGxCYWNrID0gZmFsc2U7XHJcbiAgICBzdGF0aWMgYWRkUmVzaXplQ2FsbEJhY2sodGFyZ2V0OiBOb2RlLCBjYjogRnVuY3Rpb24pIHtcclxuICAgICAgICBpZiAoIVV0aWxpdHkuaXNTZXRDYWxsQmFjaykge1xyXG4gICAgICAgICAgICB2aWV3LnNldFJlc2l6ZUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChVdGlsaXR5LlJlc2l6ZUNhbGxiYWNrICE9IG51bGwpIGNsZWFyVGltZW91dChVdGlsaXR5LlJlc2l6ZUNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIFV0aWxpdHkuUmVzaXplQ2FsbGJhY2sgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgVXRpbGl0eS5SZXNpemVDYk1hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgVXRpbGl0eSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBVdGlsaXR5LlJlc2l6ZUNiTWFwLnNldCh0YXJnZXQsIGNiKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyByZW1vdmVSZXNpemVDYWxsQmFjayh0YXJnZXQ6IE5vZGUpIHtcclxuICAgICAgICBpZiAoVXRpbGl0eS5SZXNpemVDYk1hcC5oYXModGFyZ2V0KSlcclxuICAgICAgICAgICAgVXRpbGl0eS5SZXNpemVDYk1hcC5kZWxldGUodGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdHdlZW5OdW1iZXIoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyLCBjYWxsSW5Qcm9ncmVzczogKGN1cnJlbnQ6IG51bWJlcikgPT4gYW55LCBkZWxheSA9IDApOiBUd2VlbjxOdW1iZXJUb1R3ZWVuPiB7XHJcbiAgICAgICAgdmFyIG51bWJlclRvVHdlZW46IE51bWJlclRvVHdlZW4gPSBuZXcgTnVtYmVyVG9Ud2Vlbihmcm9tKTtcclxuICAgICAgICB2YXIgdCA9IHR3ZWVuKG51bWJlclRvVHdlZW4pLmRlbGF5KGRlbGF5KS50byhkdXJhdGlvbiwgeyBuOiB0byB9LCB7XHJcbiAgICAgICAgICAgIHByb2dyZXNzOiAoc3RhcnQsIGVuZCwgY3VycmVudCwgdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnROID0gTWF0aC5mbG9vcihzdGFydCArIChlbmQgLSBzdGFydCkgKiB0KTtcclxuICAgICAgICAgICAgICAgIGNhbGxJblByb2dyZXNzKGN1cnJlbnROKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50TjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhbGwoKCkgPT4ge1xyXG4gICAgICAgICAgICBjYWxsSW5Qcm9ncmVzcyh0byk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdC5zdGFydCgpO1xyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0d2VlblNwcml0ZUNvbG9yKHRvQ29sb3I6IENvbG9yLCBzcHJpdGU6IFNwcml0ZSwgZHVyYXRpb246IG51bWJlcik6IFR3ZWVuPFNwcml0ZT4ge1xyXG4gICAgICAgIGxldCBuZXdDOiBhbnkgPSB7IHI6IHRvQ29sb3IuciwgZzogdG9Db2xvci5nLCBiOiB0b0NvbG9yLmIsIGE6IHRvQ29sb3IuYSB9O1xyXG4gICAgICAgIHJldHVybiB0d2VlbihzcHJpdGUpLnRvKGR1cmF0aW9uLCB7IGNvbG9yOiBuZXdDIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBQbGF5UGFydGljbGUobjogTm9kZSkge1xyXG4gICAgICAgIG4uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICBsZXQgYSA9IG4uZ2V0Q29tcG9uZW50KFBhcnRpY2xlU3lzdGVtKTtcclxuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChhLmlzUGxheWluZykge1xyXG4gICAgICAgICAgICAgICAgYS5zdG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYS5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobi5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIG4uY2hpbGRyZW4uZm9yRWFjaCh4ID0+IHRoaXMuUGxheVBhcnRpY2xlKHgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIFN0b3BQYXJ0aWNsZShuOiBOb2RlKSB7XHJcbiAgICAgICAgbGV0IGEgPSBuLmdldENvbXBvbmVudChQYXJ0aWNsZVN5c3RlbSk7XHJcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoYS5pc1BsYXlpbmcpIGEuc3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYXJyYXkgPSBuLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKFBhcnRpY2xlU3lzdGVtKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhcnJheVtpXS5pc1BsYXlpbmcpIGFycmF5W2ldLnN0b3AoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbi5hY3RpdmUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgUGxheUFuaW1hdGlvbihuOiBOb2RlKSB7XHJcbiAgICAgICAgbi5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIG4uZ2V0Q29tcG9uZW50KEFuaW1hdGlvbikucGxheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBBc3luY0RlbGF5KG1pbGxpc2Vjb25kczogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgbWlsbGlzZWNvbmRzKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE51bWJlclRvVHdlZW4ge1xyXG4gICAgY29uc3RydWN0b3IobjogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5uID0gbjtcclxuICAgIH1cclxuICAgIG46IG51bWJlcjtcclxufVxyXG5cclxuIl19